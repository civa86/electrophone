{"version":3,"sources":["webpack:///web-synth.min.js","webpack:///webpack/bootstrap be85d4cf9e68fee7afc2","webpack:///./src/index.js","webpack:///./src/lib/AudioContext.js","webpack:///./src/lib/core/Constants.js","webpack:///./src/lib/core/Module.js","webpack:///./src/lib/core/SoundSource.js","webpack:///./src/lib/modules/index.js","webpack:///./src/WebSynth.js","webpack:///./src/lib/Synth.js","webpack:///./src/lib/core/EffectManager.js","webpack:///./src/lib/core/Voice.js","webpack:///./src/lib/modules/Envelope.js","webpack:///./src/lib/modules/Filter.js","webpack:///./src/lib/modules/Master.js","webpack:///./src/lib/modules/Modulator.js","webpack:///./src/lib/modules/Noise.js","webpack:///./src/lib/modules/Oscillator.js","webpack:///./~/tunajs/tuna.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_WebSynth","_WebSynth2","win","window","WebSynth","Object","defineProperty","value","AudioCtx","AudioContext","webkitAudioContext","ctx","deprecatedFn","createGainNode","createDelayNode","f","TYPES","MASTER","OSCILLATOR","MODULATOR","FILTER","NOISE","REVERB","CHORUS","DELAY","ENVELOPE","CONST","ADSR","NOISE_WHITE","NOISE_PINK","NOISE_BROWN","WAVE_SINE","WAVE_SQUARE","WAVE_SAWTOOTH","WAVE_TRIANLGE","WAVE_CUSTOM","FILTER_LOWPASS","FILTER_HIGHPASS","FILTER_BANDPASS","FILTER_LOWSHELF","FILTER_HIGHSHELF","FILTER_PEAKING","FILTER_NOTCH","FILTER_ALLPASS","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_AudioContext","_AudioContext2","Module","this","gain","main","link","level","createGain","l","disconnect","ret","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_get","_x","_x2","_x3","_again","object","property","receiver","Function","desc","getOwnPropertyDescriptor","undefined","getter","get","parent","getPrototypeOf","_coreModule","_coreModule2","SoundSource","_Module","start","release","stop","_interopRequire","_Oscillator","Oscillator","_Modulator","Modulator","_Noise","Noise","_Filter","Filter","_Envelope","Envelope","_Master","Master","_interopRequireWildcard","newObj","hasOwnProperty","_libModules","Modules","_libCoreConstants","_libSynth","_libSynth2","_this","synth","methods","keys","fx","VARS","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","type","toLowerCase","label","_iterator","Symbol","iterator","next","done","err","play","note","_coreConstants","_coreVoice","_coreVoice2","Synth","modulesConfig","voices","attack","decay","sustain","String","Error","addModule","noteOn","noteOff","_tunajs","_tunajs2","manager","_modules","_SoundSource","_SoundSource2","_Constants","Voice","soundSources","master","setupModules","linkModules","modConf","forEach","mod","push","_this2","currentModule","currentModuleType","destinationModule","source","dest","getLineOut","getLineIn","connect","lineOut","_this3","e","setEnvelope","setNote","_this4","adsr","getReleaseTime","resetEnvelope","now","currentTime","envelope","attackLevel","sustainLevel","attackEnd","t","getEnvelopeTarget","setValueAtTime","linearRampToValueAtTime","setTargetAtTime","cancelScheduledValues","_coreEffectManager","_coreEffectManager2","freq","q","bypass","filterGain","frequency","Q","filterType","filter","detune","input","output","env","destination","_coreSoundSource","_coreSoundSource2","createOscillator","createBufferSource","color","setColor","buffer","white","pink","brown","noiseBuffer","getNoiseBuffer","bufferSize","getBufferSize","getChannelData","Math","random","b0","b1","b2","b3","b4","b5","b6","lastOut","sampleRate","createBuffer","loop","setDetune","definition","Tuna","context","console","log","connectify","userContext","userInstance","shimConnect","node","Array","shift","apply","arguments","Super","isPrototypeOf","slice","unshift","oconnect","__connectified__","proto","dbToWAVolume","db","max","round","pow","fmod","x","y","tmp","tmp2","pY","l2","toExponential","match","parseInt","toFixed","parseFloat","sign","abs","tanh","n","exp","initValue","userVal","defaultVal","pipe","param","val","activate","doActivate","activateNode","activateCallback","_bypass","set","_lastBypassValue","connectInOrder","nodeArray","error","getDefaults","result","defaults","automate","duration","startTime","method","dur","_is","automatable","name","FLOAT","BOOLEAN","STRING","INT","define","Bitcrusher","properties","processor","createScriptProcessor","step","phaser","last","onaudioprocess","inputBuffer","outputBuffer","bits","normfreq","floor","min","Cabinet","convolver","newConvolver","impulsePath","makeupNode","makeupGain","Convolver","impulse","dryLevel","wetLevel","Chorus","attenuator","splitter","createChannelSplitter","delayL","createDelay","delayR","feedbackGainNodeLR","feedbackGainNodeRL","merger","createChannelMerger","lfoL","LFO","delayTime","callback","lfoR","feedback","rate","delay","depth","phase","PI","_delay","offset","_depth","oscillation","_feedback","_rate","Compressor","compNode","createDynamicsCompressor","automakeup","threshold","ratio","knee","computeMakeup","magicCoefficient","_automakeup","createConvolver","dry","filterLow","createBiquadFilter","filterHigh","wet","highCut","lowCut","xhr","XMLHttpRequest","open","responseType","onreadystatechange","readyState","status","decodeAudioData","response","send","Delay","feedbackNode","cutoff","resonance","MoogFilter","in1","in2","in3","in4","out1","out2","out3","out4","fb","inputFactor","Overdrive","inputDrive","waveshaper","createWaveShaper","outputDrive","ws_table","Float32Array","k_nSamples","drive","outputGain","curveAmount","algorithmIndex","scaled","_drive","_curveAmount","_algorithmIndex","waveshaperAlgorithms","curve","_outputGain","amount","n_samples","k","a","abx","Phaser","filtersL","filtersR","feedbackGainNodeL","feedbackGainNodeR","filteredSignal","stage","baseModulationFrequency","stereoPhase","filters","_baseModulationFrequency","_stereoPhase","newPhase","_phase","PingPongDelay","stereoToMonoMix","feedbackLevel","delayLeft","delayRight","delayTimeLeft","delayTimeRight","_delayTimeLeft","_delayTimeRight","Tremolo","amplitudeL","amplitudeR","intensity","_intensity","WahWah","envelopeFollower","EnvelopeFollower","sweep","filterBp","filterPeaking","init","automode","enableAutoMode","sensitivity","baseFrequency","excursionOctaves","_automode","filterFreqTimeout","setFilterFreq","_baseFrequency","_excursionFrequency","_sweep","clearTimeout","setTimeout","bind","_sensitivity","_excursionOctaves","_resonance","jsNode","buffersize","attackTime","releaseTime","_envelope","_attackTime","_attackC","_releaseTime","_releaseC","_callback","_target","activated","returnCompute","event","compute","current","chan","rms","count","channels","numberOfChannels","sqrt","_frequency","_phaseInc","_offset","_oscillation","that","sin","toString"],"mappings":"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","file":"web-synth.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/*!**********************!*\\\n  !*** ./src/index.js ***!\n  \\**********************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _WebSynth = __webpack_require__(/*! ./WebSynth */ 6);\n\t\n\tvar _WebSynth2 = _interopRequireDefault(_WebSynth);\n\t\n\tvar win = window || {};\n\t\n\twin.WebSynth = _WebSynth2['default'];\n\n/***/ },\n/* 1 */\n/*!*********************************!*\\\n  !*** ./src/lib/AudioContext.js ***!\n  \\*********************************/\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\tvar AudioCtx = window.AudioContext || window.webkitAudioContext,\n\t    ctx = new AudioCtx(),\n\t    deprecatedFn = {\n\t    createGainNode: 'createGain',\n\t    createDelayNode: 'createDelay'\n\t};\n\t\n\tfor (var f in deprecatedFn) {\n\t    if (typeof ctx[f] === 'function') {\n\t        ctx[deprecatedFn[f]] = ctx[f];\n\t    }\n\t}\n\t\n\texports['default'] = ctx;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 2 */\n/*!***********************************!*\\\n  !*** ./src/lib/core/Constants.js ***!\n  \\***********************************/\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\tvar TYPES = {\n\t    MASTER: 'Master',\n\t    OSCILLATOR: 'Oscillator',\n\t    MODULATOR: 'Modulator',\n\t    FILTER: 'Filter',\n\t    NOISE: 'Noise',\n\t    REVERB: 'Reverb',\n\t    CHORUS: 'Chorus',\n\t    DELAY: 'Delay',\n\t    ENVELOPE: 'Envelope'\n\t};\n\t\n\texports.TYPES = TYPES;\n\tvar CONST = {\n\t    MASTER: 'master',\n\t    ADSR: 'adsr',\n\t\n\t    NOISE_WHITE: 'white',\n\t    NOISE_PINK: 'pink',\n\t    NOISE_BROWN: 'brown',\n\t\n\t    WAVE_SINE: 'sine',\n\t    WAVE_SQUARE: 'square',\n\t    WAVE_SAWTOOTH: 'sawtooth',\n\t    WAVE_TRIANLGE: 'triangle',\n\t    WAVE_CUSTOM: 'custom',\n\t\n\t    FILTER_LOWPASS: 'lowpass',\n\t    FILTER_HIGHPASS: 'highpass',\n\t    FILTER_BANDPASS: 'bandpass',\n\t    FILTER_LOWSHELF: 'lowshelf',\n\t    FILTER_HIGHSHELF: 'highshelf',\n\t    FILTER_PEAKING: 'peaking',\n\t    FILTER_NOTCH: 'notch',\n\t    FILTER_ALLPASS: 'allpass'\n\t};\n\texports.CONST = CONST;\n\n/***/ },\n/* 3 */\n/*!********************************!*\\\n  !*** ./src/lib/core/Module.js ***!\n  \\********************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _AudioContext = __webpack_require__(/*! ../AudioContext */ 1);\n\t\n\tvar _AudioContext2 = _interopRequireDefault(_AudioContext);\n\t\n\tvar Module = (function () {\n\t    function Module(props) {\n\t        _classCallCheck(this, Module);\n\t\n\t        this.gain = null;\n\t        this.main = null;\n\t        this.link = props.link || null;\n\t        this.level = +props.level;\n\t\n\t        this.createGain(this.level);\n\t    }\n\t\n\t    _createClass(Module, [{\n\t        key: 'createGain',\n\t        value: function createGain(level) {\n\t            var l = level >= 0 ? level % 101 : 100;\n\t            this.gain = _AudioContext2['default'].createGain();\n\t            this.gain.gain.value = l / 100;\n\t        }\n\t    }, {\n\t        key: 'disconnect',\n\t        value: function disconnect() {\n\t            this.gain.disconnect();\n\t        }\n\t    }, {\n\t        key: 'getLineIn',\n\t        value: function getLineIn() {\n\t            return this.main;\n\t        }\n\t    }, {\n\t        key: 'getLineOut',\n\t        value: function getLineOut() {\n\t            return this.gain;\n\t        }\n\t    }, {\n\t        key: 'getEnvelopeTarget',\n\t        value: function getEnvelopeTarget(target) {\n\t            var ret = null;\n\t\n\t            if (this.main && this.main[target]) {\n\t                ret = this.main[target];\n\t            } else if (target === 'gain' && this.gain) {\n\t                ret = this.gain.gain;\n\t            }\n\t\n\t            return ret;\n\t        }\n\t    }]);\n\t\n\t    return Module;\n\t})();\n\t\n\texports['default'] = Module;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 4 */\n/*!*************************************!*\\\n  !*** ./src/lib/core/SoundSource.js ***!\n  \\*************************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _AudioContext = __webpack_require__(/*! ../AudioContext */ 1);\n\t\n\tvar _AudioContext2 = _interopRequireDefault(_AudioContext);\n\t\n\tvar _coreModule = __webpack_require__(/*! ../core/Module */ 3);\n\t\n\tvar _coreModule2 = _interopRequireDefault(_coreModule);\n\t\n\tvar SoundSource = (function (_Module) {\n\t    _inherits(SoundSource, _Module);\n\t\n\t    function SoundSource(props) {\n\t        _classCallCheck(this, SoundSource);\n\t\n\t        _get(Object.getPrototypeOf(SoundSource.prototype), 'constructor', this).call(this, props);\n\t    }\n\t\n\t    _createClass(SoundSource, [{\n\t        key: 'noteOn',\n\t        value: function noteOn() {\n\t            this.main.start(0);\n\t        }\n\t    }, {\n\t        key: 'noteOff',\n\t        value: function noteOff(release) {\n\t            this.main.stop(release);\n\t        }\n\t    }]);\n\t\n\t    return SoundSource;\n\t})(_coreModule2['default']);\n\t\n\texports['default'] = SoundSource;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 5 */\n/*!**********************************!*\\\n  !*** ./src/lib/modules/index.js ***!\n  \\**********************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }\n\t\n\tvar _Oscillator = __webpack_require__(/*! ./Oscillator */ 15);\n\t\n\texports.Oscillator = _interopRequire(_Oscillator);\n\t\n\tvar _Modulator = __webpack_require__(/*! ./Modulator */ 13);\n\t\n\texports.Modulator = _interopRequire(_Modulator);\n\t\n\tvar _Noise = __webpack_require__(/*! ./Noise */ 14);\n\t\n\texports.Noise = _interopRequire(_Noise);\n\t\n\tvar _Filter = __webpack_require__(/*! ./Filter */ 11);\n\t\n\texports.Filter = _interopRequire(_Filter);\n\t\n\tvar _Envelope = __webpack_require__(/*! ./Envelope */ 10);\n\t\n\texports.Envelope = _interopRequire(_Envelope);\n\t\n\tvar _Master = __webpack_require__(/*! ./Master */ 12);\n\t\n\texports.Master = _interopRequire(_Master);\n\n/***/ },\n/* 6 */\n/*!*************************!*\\\n  !*** ./src/WebSynth.js ***!\n  \\*************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _libModules = __webpack_require__(/*! ./lib/modules */ 5);\n\t\n\tvar Modules = _interopRequireWildcard(_libModules);\n\t\n\tvar _libCoreConstants = __webpack_require__(/*! ./lib/core/Constants */ 2);\n\t\n\tvar _libSynth = __webpack_require__(/*! ./lib/Synth */ 7);\n\t\n\tvar _libSynth2 = _interopRequireDefault(_libSynth);\n\t\n\tvar WebSynth = function WebSynth() {\n\t    var _this = this;\n\t\n\t    _classCallCheck(this, WebSynth);\n\t\n\t    var synth = new _libSynth2['default'](),\n\t        methods = Object.keys(Modules),\n\t        fx = undefined;\n\t\n\t    this.VARS = _libCoreConstants.CONST;\n\t\n\t    //Synth Module Creators\n\t    var _iteratorNormalCompletion = true;\n\t    var _didIteratorError = false;\n\t    var _iteratorError = undefined;\n\t\n\t    try {\n\t        var _loop = function () {\n\t            var type = _step.value;\n\t\n\t            fx = type.toLowerCase();\n\t            _this[fx] = function (label, props) {\n\t                synth.module(type, label, props);\n\t                return _this;\n\t            };\n\t        };\n\t\n\t        for (var _iterator = methods[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t            _loop();\n\t        }\n\t    } catch (err) {\n\t        _didIteratorError = true;\n\t        _iteratorError = err;\n\t    } finally {\n\t        try {\n\t            if (!_iteratorNormalCompletion && _iterator['return']) {\n\t                _iterator['return']();\n\t            }\n\t        } finally {\n\t            if (_didIteratorError) {\n\t                throw _iteratorError;\n\t            }\n\t        }\n\t    }\n\t\n\t    this.play = function (note) {\n\t        return synth.play(note);\n\t    };\n\t    this.stop = function (note) {\n\t        return synth.stop(note);\n\t    };\n\t};\n\t\n\texports['default'] = WebSynth;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 7 */\n/*!**************************!*\\\n  !*** ./src/lib/Synth.js ***!\n  \\**************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _AudioContext = __webpack_require__(/*! ./AudioContext */ 1);\n\t\n\tvar _AudioContext2 = _interopRequireDefault(_AudioContext);\n\t\n\tvar _coreConstants = __webpack_require__(/*! ./core/Constants */ 2);\n\t\n\tvar _coreVoice = __webpack_require__(/*! ./core/Voice */ 9);\n\t\n\tvar _coreVoice2 = _interopRequireDefault(_coreVoice);\n\t\n\tvar Synth = (function () {\n\t    function Synth() {\n\t        _classCallCheck(this, Synth);\n\t\n\t        this.modulesConfig = {};\n\t        this.voices = {};\n\t\n\t        this.module('Master', _coreConstants.CONST.MASTER, {\n\t            level: 100\n\t        });\n\t\n\t        this.module('Envelope', _coreConstants.CONST.ADSR, {\n\t            link: _coreConstants.CONST.MASTER,\n\t            target: 'gain',\n\t            level: 100,\n\t            attack: null,\n\t            decay: 0.1,\n\t            sustain: 100,\n\t            release: 5\n\t        });\n\t    }\n\t\n\t    _createClass(Synth, [{\n\t        key: 'module',\n\t        value: function module(type, label, props) {\n\t            if (!type || type.constructor !== String) {\n\t                throw new Error('Synth Module :: missing type');\n\t            }\n\t\n\t            if (!label || label.constructor !== String) {\n\t                throw new Error('Synth Module :: missing label');\n\t            }\n\t\n\t            if (!props || props.constructor !== Object) {\n\t                throw new Error('Synth Module :: missing properties');\n\t            }\n\t\n\t            if (!this.modulesConfig[label]) {\n\t                this.addModule(type, label, props);\n\t            }\n\t        }\n\t    }, {\n\t        key: 'addModule',\n\t        value: function addModule(type, label, props) {\n\t            this.modulesConfig[label] = {\n\t                type: type,\n\t                props: props\n\t            };\n\t        }\n\t    }, {\n\t        key: 'play',\n\t        value: function play(note) {\n\t            if (!this.voices[note]) {\n\t                this.voices[note] = new _coreVoice2['default'](note, this.modulesConfig);\n\t                this.voices[note].noteOn();\n\t            }\n\t        }\n\t    }, {\n\t        key: 'stop',\n\t        value: function stop(note) {\n\t            if (this.voices[note]) {\n\t                this.voices[note].noteOff();\n\t                this.voices[note] = undefined;\n\t            }\n\t        }\n\t    }]);\n\t\n\t    return Synth;\n\t})();\n\t\n\texports['default'] = Synth;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 8 */\n/*!***************************************!*\\\n  !*** ./src/lib/core/EffectManager.js ***!\n  \\***************************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t  value: true\n\t});\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tvar _AudioContext = __webpack_require__(/*! ../AudioContext */ 1);\n\t\n\tvar _AudioContext2 = _interopRequireDefault(_AudioContext);\n\t\n\tvar _tunajs = __webpack_require__(/*! tunajs */ 16);\n\t\n\tvar _tunajs2 = _interopRequireDefault(_tunajs);\n\t\n\tvar manager = new _tunajs2['default'](_AudioContext2['default']);\n\t\n\texports['default'] = manager;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 9 */\n/*!*******************************!*\\\n  !*** ./src/lib/core/Voice.js ***!\n  \\*******************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _AudioContext = __webpack_require__(/*! ../AudioContext */ 1);\n\t\n\tvar _AudioContext2 = _interopRequireDefault(_AudioContext);\n\t\n\tvar _modules = __webpack_require__(/*! ../modules */ 5);\n\t\n\tvar Modules = _interopRequireWildcard(_modules);\n\t\n\tvar _SoundSource = __webpack_require__(/*! ./SoundSource */ 4);\n\t\n\tvar _SoundSource2 = _interopRequireDefault(_SoundSource);\n\t\n\tvar _Constants = __webpack_require__(/*! ./Constants */ 2);\n\t\n\tvar Voice = (function () {\n\t    function Voice(note, modulesConfig) {\n\t        _classCallCheck(this, Voice);\n\t\n\t        this.note = note;\n\t        this.modulesConfig = modulesConfig;\n\t        this.modules = {};\n\t        this.soundSources = [];\n\t        this.master = null;\n\t\n\t        this.setupModules();\n\t        this.linkModules();\n\t    }\n\t\n\t    _createClass(Voice, [{\n\t        key: 'setupModules',\n\t        value: function setupModules() {\n\t            var _this = this;\n\t\n\t            var modConf = undefined,\n\t                m = undefined;\n\t\n\t            Object.keys(this.modulesConfig).forEach(function (mod) {\n\t                modConf = _this.modulesConfig[mod];\n\t                if (modConf.type && modConf.props) {\n\t                    m = new Modules[modConf.type](modConf.props);\n\t                    _this.modules[mod] = {\n\t                        type: modConf.type,\n\t                        instance: m\n\t                    };\n\t\n\t                    if (m.instance instanceof _SoundSource2['default']) {\n\t                        _this.soundSources.push(m);\n\t                    } else if (modConf.type === _Constants.TYPES.MASTER) {\n\t                        _this.master = m;\n\t                    }\n\t                }\n\t            });\n\t        }\n\t    }, {\n\t        key: 'linkModules',\n\t        value: function linkModules() {\n\t            var _this2 = this;\n\t\n\t            Object.keys(this.modules).forEach(function (mod) {\n\t                var currentModule = _this2.modules[mod].instance,\n\t                    currentModuleType = _this2.modules[mod].type,\n\t                    destinationModule = undefined,\n\t                    source = undefined,\n\t                    dest = undefined;\n\t\n\t                if (currentModule.link) {\n\t                    destinationModule = _this2.modules[currentModule.link];\n\t                    if (destinationModule && destinationModule.instance) {\n\t                        source = currentModule.getLineOut();\n\t                        dest = destinationModule.instance.getLineIn(currentModuleType);\n\t                        //console.log(mod, source, currentModule.link, dest);\n\t                        if (source && dest) {\n\t                            source.connect(dest);\n\t                        }\n\t                    }\n\t                }\n\t            });\n\t\n\t            this.master.lineOut();\n\t        }\n\t    }, {\n\t        key: 'noteOn',\n\t        value: function noteOn() {\n\t            var _this3 = this;\n\t\n\t            var m = undefined,\n\t                dest = undefined;\n\t\n\t            Object.keys(this.modules).forEach(function (e) {\n\t                m = _this3.modules[e].instance;\n\t\n\t                if (typeof m.setEnvelope === 'function') {\n\t                    dest = _this3.modules[m.link] ? _this3.modules[m.link].instance : null;\n\t                    m.setEnvelope(dest);\n\t                }\n\t                if (typeof m.setNote === 'function') {\n\t                    m.setNote(+_this3.note);\n\t                }\n\t            });\n\t            Object.keys(this.modules).forEach(function (e) {\n\t                m = _this3.modules[e].instance;\n\t                if (typeof m.noteOn === 'function') {\n\t                    m.noteOn();\n\t                }\n\t            });\n\t        }\n\t    }, {\n\t        key: 'noteOff',\n\t        value: function noteOff() {\n\t            var _this4 = this;\n\t\n\t            var release = 0,\n\t                adsr = this.modules.adsr.instance,\n\t                m = undefined,\n\t                dest = undefined;\n\t\n\t            release = adsr.getReleaseTime();\n\t\n\t            Object.keys(this.modules).forEach(function (e) {\n\t                m = _this4.modules[e].instance;\n\t                if (typeof m.resetEnvelope === 'function') {\n\t                    dest = _this4.modules[m.link] ? _this4.modules[m.link].instance : null;\n\t                    m.resetEnvelope(dest);\n\t                }\n\t            });\n\t            Object.keys(this.modules).forEach(function (e) {\n\t                m = _this4.modules[e].instance;\n\t                if (typeof m.noteOff === 'function') {\n\t                    m.noteOff(release);\n\t                }\n\t            });\n\t        }\n\t    }]);\n\t\n\t    return Voice;\n\t})();\n\t\n\texports['default'] = Voice;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 10 */\n/*!*************************************!*\\\n  !*** ./src/lib/modules/Envelope.js ***!\n  \\*************************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _coreConstants = __webpack_require__(/*! ../core/Constants */ 2);\n\t\n\tvar _AudioContext = __webpack_require__(/*! ../AudioContext */ 1);\n\t\n\tvar _AudioContext2 = _interopRequireDefault(_AudioContext);\n\t\n\tvar _coreModule = __webpack_require__(/*! ../core/Module */ 3);\n\t\n\tvar _coreModule2 = _interopRequireDefault(_coreModule);\n\t\n\tvar Envelope = (function (_Module) {\n\t    _inherits(Envelope, _Module);\n\t\n\t    function Envelope(props) {\n\t        _classCallCheck(this, Envelope);\n\t\n\t        _get(Object.getPrototypeOf(Envelope.prototype), 'constructor', this).call(this, props);\n\t\n\t        this.target = props.target || null;\n\t\n\t        this.attack = props.attack;\n\t        this.decay = props.decay;\n\t        this.sustain = props.sustain;\n\t        this.release = props.release;\n\t    }\n\t\n\t    _createClass(Envelope, [{\n\t        key: 'createGain',\n\t        value: function createGain() {\n\t            return false;\n\t        }\n\t    }, {\n\t        key: 'getReleaseTime',\n\t        value: function getReleaseTime() {\n\t            var now = _AudioContext2['default'].currentTime,\n\t                release = undefined;\n\t\n\t            if (this.release) {\n\t                release = now + this.release / 10.0;\n\t            } else {\n\t                release = now + 0.2;\n\t            }\n\t\n\t            return release;\n\t        }\n\t    }, {\n\t        key: 'setEnvelope',\n\t        value: function setEnvelope(dest) {\n\t            var now = _AudioContext2['default'].currentTime,\n\t                envelope = this.level % 101,\n\t                attackLevel = undefined,\n\t                sustainLevel = undefined,\n\t                attackEnd = this.attack / 20.0,\n\t                t = undefined;\n\t\n\t            if (this.target === 'gain') {\n\t                attackLevel = envelope / 100;\n\t                sustainLevel = this.sustain / 100.0;\n\t            } else {\n\t                attackLevel = envelope * 72; // Range: 0-7200: 6-octave range\n\t                sustainLevel = attackLevel * this.sustain / 100.0; // range: 0-7200\n\t            }\n\t\n\t            if (!attackEnd) {\n\t                attackEnd = 0.05; // tweak to get target decay to work properly\n\t            }\n\t\n\t            if (dest && typeof dest.getEnvelopeTarget === 'function') {\n\t                t = dest.getEnvelopeTarget(this.target);\n\t\n\t                if (t) {\n\t                    t.setValueAtTime(0, now);\n\t                    t.linearRampToValueAtTime(attackLevel, now + attackEnd);\n\t                    t.setTargetAtTime(sustainLevel, now + attackEnd, this.decay / 100.0);\n\t                }\n\t            }\n\t        }\n\t    }, {\n\t        key: 'resetEnvelope',\n\t        value: function resetEnvelope(dest) {\n\t            var now = _AudioContext2['default'].currentTime,\n\t                t = undefined;\n\t\n\t            if (dest && typeof dest.getEnvelopeTarget === 'function') {\n\t                t = dest.getEnvelopeTarget(this.target);\n\t\n\t                if (t) {\n\t                    t.cancelScheduledValues(now);\n\t                    if (this.target === 'gain') {\n\t                        t.setValueAtTime(t.value, now);\n\t                    }\n\t                    t.setTargetAtTime(0, now, this.release / 100.0);\n\t                }\n\t            }\n\t        }\n\t    }, {\n\t        key: 'getLineOut',\n\t        value: function getLineOut() {\n\t            return false;\n\t        }\n\t    }]);\n\t\n\t    return Envelope;\n\t})(_coreModule2['default']);\n\t\n\texports['default'] = Envelope;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 11 */\n/*!***********************************!*\\\n  !*** ./src/lib/modules/Filter.js ***!\n  \\***********************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _coreConstants = __webpack_require__(/*! ../core/Constants */ 2);\n\t\n\tvar _AudioContext = __webpack_require__(/*! ../AudioContext */ 1);\n\t\n\tvar _AudioContext2 = _interopRequireDefault(_AudioContext);\n\t\n\tvar _coreModule = __webpack_require__(/*! ../core/Module */ 3);\n\t\n\tvar _coreModule2 = _interopRequireDefault(_coreModule);\n\t\n\tvar _coreEffectManager = __webpack_require__(/*! ../core/EffectManager */ 8);\n\t\n\tvar _coreEffectManager2 = _interopRequireDefault(_coreEffectManager);\n\t\n\tvar Filter = (function (_Module) {\n\t    _inherits(Filter, _Module);\n\t\n\t    function Filter(props) {\n\t        _classCallCheck(this, Filter);\n\t\n\t        _get(Object.getPrototypeOf(Filter.prototype), 'constructor', this).call(this, props);\n\t\n\t        this.freq = +props.freq || 11000;\n\t        this.q = +props.q || 10;\n\t        this.bypass = +props.bypass || 0;\n\t        this.filterGain = this.level || 0;\n\t\n\t        //TODO think about a Effect super class....to cancel gain creation\n\t        this.main = new _coreEffectManager2['default'].Filter({\n\t            frequency: this.freq, //20 to 22050\n\t            Q: this.q, //0.001 to 100\n\t            gain: this.filterGain, //-40 to 40\n\t            filterType: props.type || _coreConstants.CONST.FILTER_LOWPASS,\n\t            bypass: this.bypass\n\t        });\n\t    }\n\t\n\t    _createClass(Filter, [{\n\t        key: 'createGain',\n\t        value: function createGain() {\n\t            return false;\n\t        }\n\t    }, {\n\t        key: 'getLineIn',\n\t        value: function getLineIn(source) {\n\t            if (source === _coreConstants.TYPES.MODULATOR) {\n\t                //TODO let main parameter detune | frequency... configurable\n\t                return this.main.filter.detune;\n\t            } else {\n\t                return this.main.input;\n\t            }\n\t        }\n\t    }, {\n\t        key: 'getLineOut',\n\t        value: function getLineOut() {\n\t            return this.main.output;\n\t        }\n\t    }, {\n\t        key: 'getEnvelopeTarget',\n\t        value: function getEnvelopeTarget(target) {\n\t            var ret = null;\n\t\n\t            if (target === 'gain') {\n\t                ret = this.main.output.gain;\n\t            } else if (this.main && this.main.filter && this.main.filter[target]) {\n\t                ret = this.main.filter[target];\n\t            }\n\t\n\t            return ret;\n\t        }\n\t    }]);\n\t\n\t    return Filter;\n\t})(_coreModule2['default']);\n\t\n\texports['default'] = Filter;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 12 */\n/*!***********************************!*\\\n  !*** ./src/lib/modules/Master.js ***!\n  \\***********************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _coreConstants = __webpack_require__(/*! ../core/Constants */ 2);\n\t\n\tvar _AudioContext = __webpack_require__(/*! ../AudioContext */ 1);\n\t\n\tvar _AudioContext2 = _interopRequireDefault(_AudioContext);\n\t\n\tvar _coreModule = __webpack_require__(/*! ../core/Module */ 3);\n\t\n\tvar _coreModule2 = _interopRequireDefault(_coreModule);\n\t\n\tvar Master = (function (_Module) {\n\t    _inherits(Master, _Module);\n\t\n\t    function Master(props) {\n\t        _classCallCheck(this, Master);\n\t\n\t        _get(Object.getPrototypeOf(Master.prototype), 'constructor', this).call(this, props);\n\t\n\t        this.main = _AudioContext2['default'].createGain();\n\t        this.env = props.envelope || null;\n\t        this.link = null;\n\t    }\n\t\n\t    //setEnvelope () {\n\t    //    let now = AudioContext.currentTime,\n\t    //        envAttackEnd;\n\t    //\n\t    //    this.envelope.gain.value = 0.0;\n\t    //\n\t    //    if (this.env) {\n\t    //        envAttackEnd = now + (this.env.attack / 20.0);\n\t    //        this.envelope.gain.setValueAtTime(0.0, now);\n\t    //        this.envelope.gain.linearRampToValueAtTime(1.0, envAttackEnd);\n\t    //        this.envelope.gain.setTargetAtTime(\n\t    //            (this.env.sustain / 100.0),\n\t    //            envAttackEnd,\n\t    //            (this.env.decay / 100.0) + 0.001\n\t    //        );\n\t    //    } else {\n\t    //        this.envelope.gain.setValueAtTime(0.0, now);\n\t    //        this.envelope.gain.linearRampToValueAtTime(1.0, now + 0.02);\n\t    //        this.envelope.gain.setTargetAtTime(1, now + 0.02, 0 + 0.001);\n\t    //        this.envelope.gain.value = 1;\n\t    //    }\n\t    //}\n\t    //\n\t    //resetEnvelope () {\n\t    //    let now = AudioContext.currentTime;\n\t    //\n\t    //    if (this.env) {\n\t    //        this.envelope.gain.cancelScheduledValues(now);\n\t    //        this.envelope.gain.setValueAtTime(this.envelope.gain.value, now);\n\t    //        this.envelope.gain.setTargetAtTime(0.0, now, (this.env.release / 100));\n\t    //    } else {\n\t    //        this.envelope.gain.cancelScheduledValues(now);\n\t    //        this.envelope.gain.setValueAtTime(this.envelope.gain.value, now);\n\t    //        this.envelope.gain.setTargetAtTime(0.0, now, 0.05);\n\t    //    }\n\t    //}\n\t\n\t    _createClass(Master, [{\n\t        key: 'getLineIn',\n\t        value: function getLineIn() {\n\t            return this.main;\n\t        }\n\t    }, {\n\t        key: 'lineOut',\n\t        value: function lineOut() {\n\t            this.main.connect(this.gain);\n\t            this.gain.connect(_AudioContext2['default'].destination);\n\t        }\n\t    }]);\n\t\n\t    return Master;\n\t})(_coreModule2['default']);\n\t\n\texports['default'] = Master;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 13 */\n/*!**************************************!*\\\n  !*** ./src/lib/modules/Modulator.js ***!\n  \\**************************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _coreConstants = __webpack_require__(/*! ../core/Constants */ 2);\n\t\n\tvar _AudioContext = __webpack_require__(/*! ../AudioContext */ 1);\n\t\n\tvar _AudioContext2 = _interopRequireDefault(_AudioContext);\n\t\n\tvar _coreSoundSource = __webpack_require__(/*! ../core/SoundSource */ 4);\n\t\n\tvar _coreSoundSource2 = _interopRequireDefault(_coreSoundSource);\n\t\n\tvar Modulator = (function (_SoundSource) {\n\t    _inherits(Modulator, _SoundSource);\n\t\n\t    function Modulator(props) {\n\t        _classCallCheck(this, Modulator);\n\t\n\t        _get(Object.getPrototypeOf(Modulator.prototype), 'constructor', this).call(this, props);\n\t\n\t        this.freq = +props.freq || 440;\n\t\n\t        this.main = _AudioContext2['default'].createOscillator();\n\t        this.main.type = props.type || _coreConstants.CONST.WAVE_SINE;\n\t        this.main.connect(this.gain);\n\t    }\n\t\n\t    _createClass(Modulator, [{\n\t        key: 'setNote',\n\t        value: function setNote() {\n\t            var f = this.freq % 11;\n\t            this.main.frequency.value = f;\n\t        }\n\t    }, {\n\t        key: 'getLineIn',\n\t        value: function getLineIn() {\n\t            return this.main.frequency;\n\t        }\n\t    }]);\n\t\n\t    return Modulator;\n\t})(_coreSoundSource2['default']);\n\t\n\texports['default'] = Modulator;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 14 */\n/*!**********************************!*\\\n  !*** ./src/lib/modules/Noise.js ***!\n  \\**********************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _coreConstants = __webpack_require__(/*! ../core/Constants */ 2);\n\t\n\tvar _AudioContext = __webpack_require__(/*! ../AudioContext */ 1);\n\t\n\tvar _AudioContext2 = _interopRequireDefault(_AudioContext);\n\t\n\tvar _coreSoundSource = __webpack_require__(/*! ../core/SoundSource */ 4);\n\t\n\tvar _coreSoundSource2 = _interopRequireDefault(_coreSoundSource);\n\t\n\tvar Noise = (function (_SoundSource) {\n\t    _inherits(Noise, _SoundSource);\n\t\n\t    function Noise(props) {\n\t        _classCallCheck(this, Noise);\n\t\n\t        _get(Object.getPrototypeOf(Noise.prototype), 'constructor', this).call(this, props);\n\t\n\t        this.main = _AudioContext2['default'].createBufferSource();\n\t        this.main.connect(this.gain);\n\t\n\t        this.color = props.color || 'white';\n\t        this.setColor();\n\t    }\n\t\n\t    _createClass(Noise, [{\n\t        key: 'setColor',\n\t        value: function setColor() {\n\t            switch (this.color) {\n\t                case 'white':\n\t                    this.main.buffer = this.white();\n\t                    break;\n\t                case 'pink':\n\t                    this.main.buffer = this.pink();\n\t                    break;\n\t                case 'brown':\n\t                    this.main.buffer = this.brown();\n\t                    break;\n\t                default:\n\t                    throw new Error('Invalid Noise color: ' + this.color);\n\t            }\n\t        }\n\t    }, {\n\t        key: 'white',\n\t        value: function white() {\n\t            var noiseBuffer = this.getNoiseBuffer(),\n\t                bufferSize = this.getBufferSize(),\n\t                output = noiseBuffer.getChannelData(0);\n\t\n\t            for (var i = 0; i < bufferSize; i++) {\n\t                output[i] = Math.random() * 2 - 1;\n\t            }\n\t\n\t            return noiseBuffer;\n\t        }\n\t    }, {\n\t        key: 'pink',\n\t        value: function pink() {\n\t            var b0 = undefined,\n\t                b1 = undefined,\n\t                b2 = undefined,\n\t                b3 = undefined,\n\t                b4 = undefined,\n\t                b5 = undefined,\n\t                b6 = undefined,\n\t                noiseBuffer = this.getNoiseBuffer(),\n\t                bufferSize = this.getBufferSize(),\n\t                output = noiseBuffer.getChannelData(0),\n\t                white = undefined;\n\t\n\t            b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\t\n\t            for (var i = 0; i < bufferSize; i++) {\n\t                white = Math.random() * 2 - 1;\n\t\n\t                b0 = 0.99886 * b0 + white * 0.0555179;\n\t                b1 = 0.99332 * b1 + white * 0.0750759;\n\t                b2 = 0.96900 * b2 + white * 0.1538520;\n\t                b3 = 0.86650 * b3 + white * 0.3104856;\n\t                b4 = 0.55000 * b4 + white * 0.5329522;\n\t                b5 = -0.7616 * b5 - white * 0.0168980;\n\t\n\t                output[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t                output[i] *= 0.11;\n\t                b6 = white * 0.115926;\n\t            }\n\t\n\t            return noiseBuffer;\n\t        }\n\t    }, {\n\t        key: 'brown',\n\t        value: function brown() {\n\t            var noiseBuffer = this.getNoiseBuffer(),\n\t                bufferSize = this.getBufferSize(),\n\t                output = noiseBuffer.getChannelData(0),\n\t                lastOut = 0.0,\n\t                white = undefined;\n\t\n\t            for (var i = 0; i < bufferSize; i++) {\n\t                white = white = Math.random() * 2 - 1;\n\t\n\t                output[i] = (lastOut + 0.02 * white) / 1.02;\n\t                lastOut = output[i];\n\t                output[i] *= 3.5;\n\t            }\n\t\n\t            return noiseBuffer;\n\t        }\n\t    }, {\n\t        key: 'getBufferSize',\n\t        value: function getBufferSize() {\n\t            return 2 * _AudioContext2['default'].sampleRate;\n\t        }\n\t    }, {\n\t        key: 'getNoiseBuffer',\n\t        value: function getNoiseBuffer() {\n\t            var bufferSize = this.getBufferSize(),\n\t                noiseBuffer = _AudioContext2['default'].createBuffer(1, bufferSize, _AudioContext2['default'].sampleRate);\n\t            return noiseBuffer;\n\t        }\n\t    }, {\n\t        key: 'setNote',\n\t        value: function setNote() {\n\t            this.main.loop = true;\n\t        }\n\t    }]);\n\t\n\t    return Noise;\n\t})(_coreSoundSource2['default']);\n\t\n\texports['default'] = Noise;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 15 */\n/*!***************************************!*\\\n  !*** ./src/lib/modules/Oscillator.js ***!\n  \\***************************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, '__esModule', {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar _coreConstants = __webpack_require__(/*! ../core/Constants */ 2);\n\t\n\tvar _AudioContext = __webpack_require__(/*! ../AudioContext */ 1);\n\t\n\tvar _AudioContext2 = _interopRequireDefault(_AudioContext);\n\t\n\tvar _coreSoundSource = __webpack_require__(/*! ../core/SoundSource */ 4);\n\t\n\tvar _coreSoundSource2 = _interopRequireDefault(_coreSoundSource);\n\t\n\tvar Oscillator = (function (_SoundSource) {\n\t    _inherits(Oscillator, _SoundSource);\n\t\n\t    function Oscillator(props) {\n\t        _classCallCheck(this, Oscillator);\n\t\n\t        _get(Object.getPrototypeOf(Oscillator.prototype), 'constructor', this).call(this, props);\n\t\n\t        this.detune = +props.detune || 0;\n\t\n\t        this.main = _AudioContext2['default'].createOscillator();\n\t        this.main.type = props.type || _coreConstants.CONST.WAVE_SINE;\n\t        this.main.connect(this.gain);\n\t\n\t        this.setDetune();\n\t    }\n\t\n\t    _createClass(Oscillator, [{\n\t        key: 'setDetune',\n\t        value: function setDetune() {\n\t            if (this.detune > 1200) {\n\t                this.detune = 1200;\n\t            } else if (this.detune < -1200) {\n\t                this.detune = -1200;\n\t            }\n\t\n\t            this.main.detune.value = this.detune;\n\t        }\n\t    }, {\n\t        key: 'setNote',\n\t        value: function setNote(note) {\n\t            this.main.frequency.value = note;\n\t        }\n\t    }, {\n\t        key: 'getLineIn',\n\t        value: function getLineIn() {\n\t            return this.main.frequency;\n\t        }\n\t    }]);\n\t\n\t    return Oscillator;\n\t})(_coreSoundSource2['default']);\n\t\n\texports['default'] = Oscillator;\n\tmodule.exports = exports['default'];\n\n/***/ },\n/* 16 */\n/*!**************************!*\\\n  !*** ./~/tunajs/tuna.js ***!\n  \\**************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t    Copyright (c) 2012 DinahMoe AB & Oskar Eriksson\n\t\n\t    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation\n\t    files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy,\n\t    modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software\n\t    is furnished to do so, subject to the following conditions:\n\t\n\t    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\t\n\t    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n\t    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t*/\n\t(function(window) {\n\t    var userContext,\n\t        userInstance,\n\t        pipe = function(param, val) {\n\t            param.value = val;\n\t        },\n\t        Super = Object.create(null, {\n\t            activate: {\n\t                writable: true,\n\t                value: function(doActivate) {\n\t                    if (doActivate) {\n\t                        this.input.disconnect();\n\t                        this.input.connect(this.activateNode);\n\t                        if (this.activateCallback) {\n\t                            this.activateCallback(doActivate);\n\t                        }\n\t                    } else {\n\t                        this.input.disconnect();\n\t                        this.input.connect(this.output);\n\t                    }\n\t                }\n\t            },\n\t            bypass: {\n\t                get: function() {\n\t                    return this._bypass;\n\t                },\n\t                set: function(value) {\n\t                    if (this._lastBypassValue === value) {\n\t                        return;\n\t                    }\n\t                    this._bypass = value;\n\t                    this.activate(!value);\n\t                    this._lastBypassValue = value;\n\t                }\n\t            },\n\t            connect: {\n\t                value: function(target) {\n\t                    this.output.connect(target);\n\t                }\n\t            },\n\t            disconnect: {\n\t                value: function(target) {\n\t                    this.output.disconnect(target);\n\t                }\n\t            },\n\t            connectInOrder: {\n\t                value: function(nodeArray) {\n\t                    var i = nodeArray.length - 1;\n\t                    while (i--) {\n\t                        if (!nodeArray[i].connect) {\n\t                            return console.error(\"AudioNode.connectInOrder: TypeError: Not an AudioNode.\", nodeArray[i]);\n\t                        }\n\t                        if (nodeArray[i + 1].input) {\n\t                            nodeArray[i].connect(nodeArray[i + 1].input);\n\t                        } else {\n\t                            nodeArray[i].connect(nodeArray[i + 1]);\n\t                        }\n\t                    }\n\t                }\n\t            },\n\t            getDefaults: {\n\t                value: function() {\n\t                    var result = {};\n\t                    for (var key in this.defaults) {\n\t                        result[key] = this.defaults[key].value;\n\t                    }\n\t                    return result;\n\t                }\n\t            },\n\t            automate: {\n\t                value: function(property, value, duration, startTime) {\n\t                    var start = startTime ? ~~(startTime / 1000) : userContext.currentTime,\n\t                        dur = duration ? ~~(duration / 1000) : 0,\n\t                        _is = this.defaults[property],\n\t                        param = this[property],\n\t                        method;\n\t\n\t                    if (param) {\n\t                        if (_is.automatable) {\n\t                            if (!duration) {\n\t                                method = \"setValueAtTime\";\n\t                            } else {\n\t                                method = \"linearRampToValueAtTime\";\n\t                                param.cancelScheduledValues(start);\n\t                                param.setValueAtTime(param.value, start);\n\t                            }\n\t                            param[method](value, dur + start);\n\t                        } else {\n\t                            param = value;\n\t                        }\n\t                    } else {\n\t                        console.error(\"Invalid Property for \" + this.name);\n\t                    }\n\t                }\n\t            }\n\t        }),\n\t        FLOAT = \"float\",\n\t        BOOLEAN = \"boolean\",\n\t        STRING = \"string\",\n\t        INT = \"int\";\n\t\n\t    if (typeof module !== \"undefined\" && module.exports) {\n\t        module.exports = Tuna;\n\t    } else if (true) {\n\t        window.define(\"Tuna\", definition);\n\t    } else {\n\t        window.Tuna = Tuna;\n\t    }\n\t\n\t    function definition() {\n\t        return Tuna;\n\t    }\n\t\n\t    function Tuna(context) {\n\t        if (!(this instanceof Tuna)) {\n\t            return new Tuna(context);\n\t        }\n\t        if (!window.AudioContext) {\n\t            window.AudioContext = window.webkitAudioContext;\n\t        }\n\t        if (!context) {\n\t            console.log(\"tuna.js: Missing audio context! Creating a new context for you.\");\n\t            context = window.AudioContext && (new window.AudioContext());\n\t        }\n\t        if (!context) {\n\t            throw new Error(\"Tuna cannot initialize because this environment does not support web audio.\");\n\t        }\n\t        connectify(context);\n\t        userContext = context;\n\t        userInstance = this;\n\t    }\n\t\n\t    function connectify(context) {\n\t        if (context.__connectified__ === true) return;\n\t\n\t        var gain = context.createGain(),\n\t            proto = Object.getPrototypeOf(Object.getPrototypeOf(gain)),\n\t            oconnect = proto.connect;\n\t\n\t        proto.connect = shimConnect;\n\t        context.__connectified__ = true; // Prevent overriding connect more than once\n\t\n\t        function shimConnect() {\n\t            var node = Array.prototype.shift.apply(arguments);\n\t            node = Super.isPrototypeOf ? (Super.isPrototypeOf(node) ? node.input : node) : (node.input || node);\n\t            arguments = Array.prototype.slice.call(arguments);\n\t            arguments.unshift(node);\n\t            oconnect.apply(this, arguments);\n\t            return node;\n\t        }\n\t    }\n\t\n\t    function dbToWAVolume(db) {\n\t        return Math.max(0, Math.round(100 * Math.pow(2, db / 6)) / 100);\n\t    }\n\t\n\t    function fmod(x, y) {\n\t        // http://kevin.vanzonneveld.net\n\t        // *     example 1: fmod(5.7, 1.3);\n\t        // *     returns 1: 0.5\n\t        var tmp, tmp2, p = 0,\n\t            pY = 0,\n\t            l = 0.0,\n\t            l2 = 0.0;\n\t\n\t        tmp = x.toExponential().match(/^.\\.?(.*)e(.+)$/);\n\t        p = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\n\t        tmp = y.toExponential().match(/^.\\.?(.*)e(.+)$/);\n\t        pY = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\n\t\n\t        if (pY > p) {\n\t            p = pY;\n\t        }\n\t\n\t        tmp2 = (x % y);\n\t\n\t        if (p < -100 || p > 20) {\n\t            // toFixed will give an out of bound error so we fix it like this:\n\t            l = Math.round(Math.log(tmp2) / Math.log(10));\n\t            l2 = Math.pow(10, l);\n\t\n\t            return (tmp2 / l2).toFixed(l - p) * l2;\n\t        } else {\n\t            return parseFloat(tmp2.toFixed(-p));\n\t        }\n\t    }\n\t\n\t    function sign(x) {\n\t        if (x === 0) {\n\t            return 1;\n\t        } else {\n\t            return Math.abs(x) / x;\n\t        }\n\t    }\n\t\n\t    function tanh(n) {\n\t        return (Math.exp(n) - Math.exp(-n)) / (Math.exp(n) + Math.exp(-n));\n\t    }\n\t\n\t    function initValue(userVal, defaultVal) {\n\t        return userVal === undefined ? defaultVal : userVal;\n\t    }\n\t\n\t    Tuna.prototype.Bitcrusher = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.bufferSize = properties.bufferSize || this.defaults.bufferSize.value;\n\t\n\t        this.input = userContext.createGain();\n\t        this.activateNode = userContext.createGain();\n\t        this.processor = userContext.createScriptProcessor(this.bufferSize, 1, 1);\n\t        this.output = userContext.createGain();\n\t\n\t        this.activateNode.connect(this.processor);\n\t        this.processor.connect(this.output);\n\t\n\t        var phaser = 0,\n\t            last = 0,\n\t            input, output, step, i, length;\n\t        this.processor.onaudioprocess = function(e) {\n\t            input = e.inputBuffer.getChannelData(0),\n\t            output = e.outputBuffer.getChannelData(0),\n\t            step = Math.pow(1 / 2, this.bits);\n\t            length = input.length;\n\t            for (i = 0; i < length; i++) {\n\t                phaser += this.normfreq;\n\t                if (phaser >= 1.0) {\n\t                    phaser -= 1.0;\n\t                    last = step * Math.floor(input[i] / step + 0.5);\n\t                }\n\t                output[i] = last;\n\t            }\n\t        };\n\t\n\t        this.bits = properties.bits || this.defaults.bits.value;\n\t        this.normfreq = initValue(properties.normfreq, this.defaults.normfreq.value);\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.Bitcrusher.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"Bitcrusher\"\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                bits: {\n\t                    value: 4,\n\t                    min: 1,\n\t                    max: 16,\n\t                    automatable: false,\n\t                    type: INT\n\t                },\n\t                bufferSize: {\n\t                    value: 4096,\n\t                    min: 256,\n\t                    max: 16384,\n\t                    automatable: false,\n\t                    type: INT\n\t                },\n\t                bypass: {\n\t                    value: true,\n\t                    automatable: false,\n\t                    type: BOOLEAN\n\t                },\n\t                normfreq: {\n\t                    value: 0.1,\n\t                    min: 0.0001,\n\t                    max: 1.0,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                }\n\t            }\n\t        },\n\t        bits: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.processor.bits;\n\t            },\n\t            set: function(value) {\n\t                this.processor.bits = value;\n\t            }\n\t        },\n\t        normfreq: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.processor.normfreq;\n\t            },\n\t            set: function(value) {\n\t                this.processor.normfreq = value;\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.Cabinet = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.activateNode = userContext.createGain();\n\t        this.convolver = this.newConvolver(properties.impulsePath ||\n\t            \"../impulses/impulse_guitar.wav\");\n\t        this.makeupNode = userContext.createGain();\n\t        this.output = userContext.createGain();\n\t\n\t        this.activateNode.connect(this.convolver.input);\n\t        this.convolver.output.connect(this.makeupNode);\n\t        this.makeupNode.connect(this.output);\n\t\n\t        this.makeupGain = initValue(properties.makeupGain, this.defaults\n\t            .makeupGain);\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.Cabinet.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"Cabinet\"\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                makeupGain: {\n\t                    value: 1,\n\t                    min: 0,\n\t                    max: 20,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                bypass: {\n\t                    value: false,\n\t                    automatable: false,\n\t                    type: BOOLEAN\n\t                }\n\t            }\n\t        },\n\t        makeupGain: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.makeupNode.gain;\n\t            },\n\t            set: function(value) {\n\t                this.makeupNode.gain.value = value;\n\t            }\n\t        },\n\t        newConvolver: {\n\t            value: function(impulsePath) {\n\t                return new userInstance.Convolver({\n\t                    impulse: impulsePath,\n\t                    dryLevel: 0,\n\t                    wetLevel: 1\n\t                });\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.Chorus = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.attenuator = this.activateNode = userContext.createGain();\n\t        this.splitter = userContext.createChannelSplitter(2);\n\t        this.delayL = userContext.createDelay();\n\t        this.delayR = userContext.createDelay();\n\t        this.feedbackGainNodeLR = userContext.createGain();\n\t        this.feedbackGainNodeRL = userContext.createGain();\n\t        this.merger = userContext.createChannelMerger(2);\n\t        this.output = userContext.createGain();\n\t\n\t        this.lfoL = new userInstance.LFO({\n\t            target: this.delayL.delayTime,\n\t            callback: pipe\n\t        });\n\t        this.lfoR = new userInstance.LFO({\n\t            target: this.delayR.delayTime,\n\t            callback: pipe\n\t        });\n\t\n\t        this.input.connect(this.attenuator);\n\t        this.attenuator.connect(this.output);\n\t        this.attenuator.connect(this.splitter);\n\t        this.splitter.connect(this.delayL, 0);\n\t        this.splitter.connect(this.delayR, 1);\n\t        this.delayL.connect(this.feedbackGainNodeLR);\n\t        this.delayR.connect(this.feedbackGainNodeRL);\n\t        this.feedbackGainNodeLR.connect(this.delayR);\n\t        this.feedbackGainNodeRL.connect(this.delayL);\n\t        this.delayL.connect(this.merger, 0, 0);\n\t        this.delayR.connect(this.merger, 0, 1);\n\t        this.merger.connect(this.output);\n\t\n\t        this.feedback = initValue(properties.feedback, this.defaults.feedback\n\t            .value);\n\t        this.rate = initValue(properties.rate, this.defaults.rate.value);\n\t        this.delay = initValue(properties.delay, this.defaults.delay.value);\n\t        this.depth = initValue(properties.depth, this.defaults.depth.value);\n\t        this.lfoR.phase = Math.PI / 2;\n\t        this.attenuator.gain.value = 0.6934; // 1 / (10 ^ (((20 * log10(3)) / 3) / 20))\n\t        this.lfoL.activate(true);\n\t        this.lfoR.activate(true);\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.Chorus.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"Chorus\"\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                feedback: {\n\t                    value: 0.4,\n\t                    min: 0,\n\t                    max: 0.95,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                delay: {\n\t                    value: 0.0045,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                depth: {\n\t                    value: 0.7,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                rate: {\n\t                    value: 1.5,\n\t                    min: 0,\n\t                    max: 8,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                bypass: {\n\t                    value: true,\n\t                    automatable: false,\n\t                    type: BOOLEAN\n\t                }\n\t            }\n\t        },\n\t        delay: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._delay;\n\t            },\n\t            set: function(value) {\n\t                this._delay = 0.0002 * (Math.pow(10, value) * 2);\n\t                this.lfoL.offset = this._delay;\n\t                this.lfoR.offset = this._delay;\n\t                this._depth = this._depth;\n\t            }\n\t        },\n\t        depth: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._depth;\n\t            },\n\t            set: function(value) {\n\t                this._depth = value;\n\t                this.lfoL.oscillation = this._depth * this._delay;\n\t                this.lfoR.oscillation = this._depth * this._delay;\n\t            }\n\t        },\n\t        feedback: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._feedback;\n\t            },\n\t            set: function(value) {\n\t                this._feedback = value;\n\t                this.feedbackGainNodeLR.gain.value = this._feedback;\n\t                this.feedbackGainNodeRL.gain.value = this._feedback;\n\t            }\n\t        },\n\t        rate: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._rate;\n\t            },\n\t            set: function(value) {\n\t                this._rate = value;\n\t                this.lfoL.frequency = this._rate;\n\t                this.lfoR.frequency = this._rate;\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.Compressor = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.compNode = this.activateNode = userContext.createDynamicsCompressor();\n\t        this.makeupNode = userContext.createGain();\n\t        this.output = userContext.createGain();\n\t\n\t        this.compNode.connect(this.makeupNode);\n\t        this.makeupNode.connect(this.output);\n\t\n\t        this.automakeup = initValue(properties.automakeup, this.defaults\n\t            .automakeup\n\t            .value);\n\t        this.makeupGain = properties.makeupGain || this.defaults.makeupGain\n\t            .value;\n\t        this.threshold = initValue(properties.threshold, this.defaults.threshold\n\t            .value);\n\t        this.release = properties.release || this.defaults.release.value;\n\t        this.attack = initValue(properties.attack, this.defaults.attack\n\t            .value);\n\t        this.ratio = properties.ratio || this.defaults.ratio.value;\n\t        this.knee = initValue(properties.knee, this.defaults.knee.value);\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.Compressor.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"Compressor\"\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                threshold: {\n\t                    value: -20,\n\t                    min: -60,\n\t                    max: 0,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                release: {\n\t                    value: 250,\n\t                    min: 10,\n\t                    max: 2000,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                makeupGain: {\n\t                    value: 1,\n\t                    min: 1,\n\t                    max: 100,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                attack: {\n\t                    value: 1,\n\t                    min: 0,\n\t                    max: 1000,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                ratio: {\n\t                    value: 4,\n\t                    min: 1,\n\t                    max: 50,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                knee: {\n\t                    value: 5,\n\t                    min: 0,\n\t                    max: 40,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                automakeup: {\n\t                    value: false,\n\t                    automatable: false,\n\t                    type: BOOLEAN\n\t                },\n\t                bypass: {\n\t                    value: true,\n\t                    automatable: false,\n\t                    type: BOOLEAN\n\t                }\n\t            }\n\t        },\n\t        computeMakeup: {\n\t            value: function() {\n\t                var magicCoefficient = 4,\n\t                    // raise me if the output is too hot\n\t                    c = this.compNode;\n\t                return -(c.threshold.value - c.threshold.value /\n\t                        c.ratio.value) /\n\t                    magicCoefficient;\n\t            }\n\t        },\n\t        automakeup: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._automakeup;\n\t            },\n\t            set: function(value) {\n\t                this._automakeup = value;\n\t                if (this._automakeup) this.makeupGain = this.computeMakeup();\n\t            }\n\t        },\n\t        threshold: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.compNode.threshold;\n\t            },\n\t            set: function(value) {\n\t                this.compNode.threshold.value = value;\n\t                if (this._automakeup) this.makeupGain = this.computeMakeup();\n\t            }\n\t        },\n\t        ratio: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.compNode.ratio;\n\t            },\n\t            set: function(value) {\n\t                this.compNode.ratio.value = value;\n\t                if (this._automakeup) this.makeupGain = this.computeMakeup();\n\t            }\n\t        },\n\t        knee: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.compNode.knee;\n\t            },\n\t            set: function(value) {\n\t                this.compNode.knee.value = value;\n\t                if (this._automakeup) this.makeupGain = this.computeMakeup();\n\t            }\n\t        },\n\t        attack: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.compNode.attack;\n\t            },\n\t            set: function(value) {\n\t                this.compNode.attack.value = value / 1000;\n\t            }\n\t        },\n\t        release: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.compNode.release;\n\t            },\n\t            set: function(value) {\n\t                this.compNode.release = value / 1000;\n\t            }\n\t        },\n\t        makeupGain: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.makeupNode.gain;\n\t            },\n\t            set: function(value) {\n\t                this.makeupNode.gain.value = dbToWAVolume(value);\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.Convolver = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.activateNode = userContext.createGain();\n\t        this.convolver = userContext.createConvolver();\n\t        this.dry = userContext.createGain();\n\t        this.filterLow = userContext.createBiquadFilter();\n\t        this.filterHigh = userContext.createBiquadFilter();\n\t        this.wet = userContext.createGain();\n\t        this.output = userContext.createGain();\n\t\n\t        this.activateNode.connect(this.filterLow);\n\t        this.activateNode.connect(this.dry);\n\t        this.filterLow.connect(this.filterHigh);\n\t        this.filterHigh.connect(this.convolver);\n\t        this.convolver.connect(this.wet);\n\t        this.wet.connect(this.output);\n\t        this.dry.connect(this.output);\n\t\n\t        this.dryLevel = initValue(properties.dryLevel, this.defaults.dryLevel\n\t            .value);\n\t        this.wetLevel = initValue(properties.wetLevel, this.defaults.wetLevel\n\t            .value);\n\t        this.highCut = properties.highCut || this.defaults.highCut.value;\n\t        this.buffer = properties.impulse ||\n\t            \"../impulses/ir_rev_short.wav\";\n\t        this.lowCut = properties.lowCut || this.defaults.lowCut.value;\n\t        this.level = initValue(properties.level, this.defaults.level.value);\n\t        this.filterHigh.type = \"lowpass\";\n\t        this.filterLow.type = \"highpass\";\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.Convolver.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"Convolver\"\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                highCut: {\n\t                    value: 22050,\n\t                    min: 20,\n\t                    max: 22050,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                lowCut: {\n\t                    value: 20,\n\t                    min: 20,\n\t                    max: 22050,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                dryLevel: {\n\t                    value: 1,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                wetLevel: {\n\t                    value: 1,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                level: {\n\t                    value: 1,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                }\n\t            }\n\t        },\n\t        lowCut: {\n\t            get: function() {\n\t                return this.filterLow.frequency;\n\t            },\n\t            set: function(value) {\n\t                this.filterLow.frequency.value = value;\n\t            }\n\t        },\n\t        highCut: {\n\t            get: function() {\n\t                return this.filterHigh.frequency;\n\t            },\n\t            set: function(value) {\n\t                this.filterHigh.frequency.value = value;\n\t            }\n\t        },\n\t        level: {\n\t            get: function() {\n\t                return this.output.gain;\n\t            },\n\t            set: function(value) {\n\t                this.output.gain.value = value;\n\t            }\n\t        },\n\t        dryLevel: {\n\t            get: function() {\n\t                return this.dry.gain\n\t            },\n\t            set: function(value) {\n\t                this.dry.gain.value = value;\n\t            }\n\t        },\n\t        wetLevel: {\n\t            get: function() {\n\t                return this.wet.gain;\n\t            },\n\t            set: function(value) {\n\t                this.wet.gain.value = value;\n\t            }\n\t        },\n\t        buffer: {\n\t            enumerable: false,\n\t            get: function() {\n\t                return this.convolver.buffer;\n\t            },\n\t            set: function(impulse) {\n\t                var convolver = this.convolver,\n\t                    xhr = new XMLHttpRequest();\n\t                if (!impulse) {\n\t                    console.log(\"Tuna.Convolver.setBuffer: Missing impulse path!\");\n\t                    return;\n\t                }\n\t                xhr.open(\"GET\", impulse, true);\n\t                xhr.responseType = \"arraybuffer\";\n\t                xhr.onreadystatechange = function() {\n\t                    if (xhr.readyState === 4) {\n\t                        if (xhr.status < 300 && xhr.status > 199 || xhr.status === 302) {\n\t                            userContext.decodeAudioData(xhr.response, function(buffer) {\n\t                                convolver.buffer = buffer;\n\t                            }, function(e) {\n\t                                if (e) console.log(\"Tuna.Convolver.setBuffer: Error decoding data\" + e);\n\t                            });\n\t                        }\n\t                    }\n\t                };\n\t                xhr.send(null);\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.Delay = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.activateNode = userContext.createGain();\n\t        this.dry = userContext.createGain();\n\t        this.wet = userContext.createGain();\n\t        this.filter = userContext.createBiquadFilter();\n\t        this.delay = userContext.createDelay();\n\t        this.feedbackNode = userContext.createGain();\n\t        this.output = userContext.createGain();\n\t\n\t        this.activateNode.connect(this.delay);\n\t        this.activateNode.connect(this.dry);\n\t        this.delay.connect(this.filter);\n\t        this.filter.connect(this.feedbackNode);\n\t        this.feedbackNode.connect(this.delay);\n\t        this.feedbackNode.connect(this.wet);\n\t        this.wet.connect(this.output);\n\t        this.dry.connect(this.output);\n\t\n\t        this.delayTime = properties.delayTime || this.defaults.delayTime.value;\n\t        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\n\t        this.wetLevel = initValue(properties.wetLevel, this.defaults.wetLevel.value);\n\t        this.dryLevel = initValue(properties.dryLevel, this.defaults.dryLevel.value);\n\t        this.cutoff = properties.cutoff || this.defaults.cutoff.value;\n\t        this.filter.type = \"lowpass\";\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.Delay.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"Delay\"\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                delayTime: {\n\t                    value: 100,\n\t                    min: 20,\n\t                    max: 1000,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                feedback: {\n\t                    value: 0.45,\n\t                    min: 0,\n\t                    max: 0.9,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                cutoff: {\n\t                    value: 20000,\n\t                    min: 20,\n\t                    max: 20000,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                wetLevel: {\n\t                    value: 0.5,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                dryLevel: {\n\t                    value: 1,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                }\n\t            }\n\t        },\n\t        delayTime: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.delay.delayTime;\n\t            },\n\t            set: function(value) {\n\t                this.delay.delayTime.value = value / 1000;\n\t            }\n\t        },\n\t        wetLevel: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.wet.gain;\n\t            },\n\t            set: function(value) {\n\t                this.wet.gain.value = value;\n\t            }\n\t        },\n\t        dryLevel: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.dry.gain;\n\t            },\n\t            set: function(value) {\n\t                this.dry.gain.value = value;\n\t            }\n\t        },\n\t        feedback: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.feedbackNode.gain;\n\t            },\n\t            set: function(value) {\n\t                this.feedbackNode.gain.value = value;\n\t            }\n\t        },\n\t        cutoff: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.filter.frequency;\n\t            },\n\t            set: function(value) {\n\t                this.filter.frequency.value = value;\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.Filter = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.activateNode = userContext.createGain();\n\t        this.filter = userContext.createBiquadFilter();\n\t        this.output = userContext.createGain();\n\t\n\t        this.activateNode.connect(this.filter);\n\t        this.filter.connect(this.output);\n\t\n\t        this.frequency = properties.frequency || this.defaults.frequency\n\t            .value;\n\t        this.Q = properties.resonance || this.defaults.Q.value;\n\t        this.filterType = initValue(properties.filterType, this.defaults\n\t            .filterType\n\t            .value);\n\t        this.gain = initValue(properties.gain, this.defaults.gain.value);\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.Filter.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"Filter\"\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                frequency: {\n\t                    value: 800,\n\t                    min: 20,\n\t                    max: 22050,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                Q: {\n\t                    value: 1,\n\t                    min: 0.001,\n\t                    max: 100,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                gain: {\n\t                    value: 0,\n\t                    min: -40,\n\t                    max: 40,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                bypass: {\n\t                    value: true,\n\t                    automatable: false,\n\t                    type: BOOLEAN\n\t                },\n\t                filterType: {\n\t                    value: \"lowpass\",\n\t                    automatable: false,\n\t                    type: STRING\n\t                }\n\t            }\n\t        },\n\t        filterType: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.filter.type;\n\t            },\n\t            set: function(value) {\n\t                this.filter.type = value;\n\t            }\n\t        },\n\t        Q: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.filter.Q;\n\t            },\n\t            set: function(value) {\n\t                this.filter.Q.value = value;\n\t            }\n\t        },\n\t        gain: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.filter.gain;\n\t            },\n\t            set: function(value) {\n\t                this.filter.gain.value = value;\n\t            }\n\t        },\n\t        frequency: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.filter.frequency;\n\t            },\n\t            set: function(value) {\n\t                this.filter.frequency.value = value;\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.MoogFilter = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.bufferSize = properties.bufferSize || this.defaults.bufferSize\n\t            .value;\n\t\n\t        this.input = userContext.createGain();\n\t        this.activateNode = userContext.createGain();\n\t        this.processor = userContext.createScriptProcessor(this.bufferSize,\n\t            1,\n\t            1);\n\t        this.output = userContext.createGain();\n\t\n\t        this.activateNode.connect(this.processor);\n\t        this.processor.connect(this.output);\n\t\n\t        var in1, in2, in3, in4, out1, out2, out3, out4;\n\t        in1 = in2 = in3 = in4 = out1 = out2 = out3 = out4 = 0.0;\n\t        var input, output, f, fb, i, length;\n\t        this.processor.onaudioprocess = function(e) {\n\t            input = e.inputBuffer.getChannelData(0),\n\t                output = e.outputBuffer.getChannelData(0),\n\t                f = this.cutoff * 1.16,\n\t                inputFactor = 0.35013 * (f * f) * (f * f);\n\t            fb = this.resonance * (1.0 - 0.15 * f * f);\n\t            length = input.length;\n\t            for (i = 0; i < length; i++) {\n\t                input[i] -= out4 * fb;\n\t                input[i] *= inputFactor;\n\t                out1 = input[i] + 0.3 * in1 + (1 - f) * out1; // Pole 1\n\t                in1 = input[i];\n\t                out2 = out1 + 0.3 * in2 + (1 - f) * out2; // Pole 2\n\t                in2 = out1;\n\t                out3 = out2 + 0.3 * in3 + (1 - f) * out3; // Pole 3\n\t                in3 = out2;\n\t                out4 = out3 + 0.3 * in4 + (1 - f) * out4; // Pole 4\n\t                in4 = out3;\n\t                output[i] = out4;\n\t            }\n\t        };\n\t\n\t        this.cutoff = initValue(properties.cutoff, this.defaults.cutoff\n\t            .value);\n\t        this.resonance = initValue(properties.resonance, this.defaults.resonance\n\t            .value);\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.MoogFilter.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"MoogFilter\"\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                bufferSize: {\n\t                    value: 4096,\n\t                    min: 256,\n\t                    max: 16384,\n\t                    automatable: false,\n\t                    type: INT\n\t                },\n\t                bypass: {\n\t                    value: false,\n\t                    automatable: false,\n\t                    type: BOOLEAN\n\t                },\n\t                cutoff: {\n\t                    value: 0.065,\n\t                    min: 0.0001,\n\t                    max: 1.0,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                resonance: {\n\t                    value: 3.5,\n\t                    min: 0.0,\n\t                    max: 4.0,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                }\n\t            }\n\t        },\n\t        cutoff: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.processor.cutoff;\n\t            },\n\t            set: function(value) {\n\t                this.processor.cutoff = value;\n\t            }\n\t        },\n\t        resonance: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.processor.resonance;\n\t            },\n\t            set: function(value) {\n\t                this.processor.resonance = value;\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.Overdrive = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.activateNode = userContext.createGain();\n\t        this.inputDrive = userContext.createGain();\n\t        this.waveshaper = userContext.createWaveShaper();\n\t        this.outputDrive = userContext.createGain();\n\t        this.output = userContext.createGain();\n\t\n\t        this.activateNode.connect(this.inputDrive);\n\t        this.inputDrive.connect(this.waveshaper);\n\t        this.waveshaper.connect(this.outputDrive);\n\t        this.outputDrive.connect(this.output);\n\t\n\t        this.ws_table = new Float32Array(this.k_nSamples);\n\t        this.drive = initValue(properties.drive, this.defaults.drive.value);\n\t        this.outputGain = initValue(properties.outputGain, this.defaults\n\t            .outputGain\n\t            .value);\n\t        this.curveAmount = initValue(properties.curveAmount, this.defaults\n\t            .curveAmount\n\t            .value);\n\t        this.algorithmIndex = initValue(properties.algorithmIndex, this\n\t            .defaults\n\t            .algorithmIndex.value);\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.Overdrive.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"Overdrive\"\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                drive: {\n\t                    value: 1,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: true,\n\t                    type: FLOAT,\n\t                    scaled: true\n\t                },\n\t                outputGain: {\n\t                    value: 1,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: true,\n\t                    type: FLOAT,\n\t                    scaled: true\n\t                },\n\t                curveAmount: {\n\t                    value: 0.725,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                algorithmIndex: {\n\t                    value: 0,\n\t                    min: 0,\n\t                    max: 5,\n\t                    automatable: false,\n\t                    type: INT\n\t                }\n\t            }\n\t        },\n\t        k_nSamples: {\n\t            value: 8192\n\t        },\n\t        drive: {\n\t            get: function() {\n\t                return this.inputDrive.gain;\n\t            },\n\t            set: function(value) {\n\t                this._drive = value;\n\t            }\n\t        },\n\t        curveAmount: {\n\t            get: function() {\n\t                return this._curveAmount;\n\t            },\n\t            set: function(value) {\n\t                this._curveAmount = value;\n\t                if (this._algorithmIndex === undefined) {\n\t                    this._algorithmIndex = 0;\n\t                }\n\t                this.waveshaperAlgorithms[this._algorithmIndex]\n\t                    (this._curveAmount,\n\t                        this.k_nSamples, this.ws_table);\n\t                this.waveshaper.curve = this.ws_table;\n\t            }\n\t        },\n\t        outputGain: {\n\t            get: function() {\n\t                return this.outputDrive.gain;\n\t            },\n\t            set: function(value) {\n\t                this._outputGain = dbToWAVolume(value);\n\t            }\n\t        },\n\t        algorithmIndex: {\n\t            get: function() {\n\t                return this._algorithmIndex;\n\t            },\n\t            set: function(value) {\n\t                this._algorithmIndex = value;\n\t                this.curveAmount = this._curveAmount;\n\t            }\n\t        },\n\t        waveshaperAlgorithms: {\n\t            value: [\n\t                function(amount, n_samples, ws_table) {\n\t                    amount = Math.min(amount, 0.9999);\n\t                    var k = 2 * amount / (1 - amount),\n\t                        i, x;\n\t                    for (i = 0; i < n_samples; i++) {\n\t                        x = i * 2 / n_samples - 1;\n\t                        ws_table[i] = (1 + k) * x / (1 + k * Math.abs(x));\n\t                    }\n\t                },\n\t                function(amount, n_samples, ws_table) {\n\t                    var i, x, y;\n\t                    for (i = 0; i < n_samples; i++) {\n\t                        x = i * 2 / n_samples - 1;\n\t                        y = ((0.5 * Math.pow((x + 1.4), 2)) - 1) * y >= 0 ? 5.8 : 1.2;\n\t                        ws_table[i] = tanh(y);\n\t                    }\n\t                },\n\t                function(amount, n_samples, ws_table) {\n\t                    var i, x, y, a = 1 - amount;\n\t                    for (i = 0; i < n_samples; i++) {\n\t                        x = i * 2 / n_samples - 1;\n\t                        y = x < 0 ? -Math.pow(Math.abs(x), a + 0.04) : Math.pow(x, a);\n\t                        ws_table[i] = tanh(y * 2);\n\t                    }\n\t                },\n\t                function(amount, n_samples, ws_table) {\n\t                    var i, x, y, abx, a = 1 - amount > 0.99 ? 0.99 : 1 - amount;\n\t                    for (i = 0; i < n_samples; i++) {\n\t                        x = i * 2 / n_samples - 1;\n\t                        abx = Math.abs(x);\n\t                        if (abx < a) y = abx;\n\t                        else if (abx > a) y = a + (abx - a) / (1 + Math.pow((abx - a) / (1 - a), 2));\n\t                        else if (abx > 1) y = abx;\n\t                        ws_table[i] = sign(x) * y * (1 / ((a + 1) / 2));\n\t                    }\n\t                },\n\t                function(amount, n_samples, ws_table) { // fixed curve, amount doesn't do anything, the distortion is just from the drive\n\t                    var i, x;\n\t                    for (i = 0; i < n_samples; i++) {\n\t                        x = i * 2 / n_samples - 1;\n\t                        if (x < -0.08905) {\n\t                            ws_table[i] = (-3 / 4) * (1 - (Math.pow((1 - (Math.abs(x) - 0.032857)), 12)) + (1 / 3) * (Math.abs(x) -\n\t                                0.032847)) + 0.01;\n\t                        } else if (x >= -0.08905 && x < 0.320018) {\n\t                            ws_table[i] = (-6.153 * (x * x)) + 3.9375 * x;\n\t                        } else {\n\t                            ws_table[i] = 0.630035;\n\t                        }\n\t                    }\n\t                },\n\t                function(amount, n_samples, ws_table) {\n\t                    var a = 2 + Math.round(amount * 14),\n\t                        // we go from 2 to 16 bits, keep in mind for the UI\n\t                        bits = Math.round(Math.pow(2, a - 1)),\n\t                        // real number of quantization steps divided by 2\n\t                        i, x;\n\t                    for (i = 0; i < n_samples; i++) {\n\t                        x = i * 2 / n_samples - 1;\n\t                        ws_table[i] = Math.round(x * bits) / bits;\n\t                    }\n\t                }\n\t            ]\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.Phaser = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.splitter = this.activateNode = userContext.createChannelSplitter(2);\n\t        this.filtersL = [];\n\t        this.filtersR = [];\n\t        this.feedbackGainNodeL = userContext.createGain();\n\t        this.feedbackGainNodeR = userContext.createGain();\n\t        this.merger = userContext.createChannelMerger(2);\n\t        this.filteredSignal = userContext.createGain();\n\t        this.output = userContext.createGain();\n\t        this.lfoL = new userInstance.LFO({\n\t            target: this.filtersL,\n\t            callback: this.callback\n\t        });\n\t        this.lfoR = new userInstance.LFO({\n\t            target: this.filtersR,\n\t            callback: this.callback\n\t        });\n\t\n\t        var i = this.stage;\n\t        while (i--) {\n\t            this.filtersL[i] = userContext.createBiquadFilter();\n\t            this.filtersR[i] = userContext.createBiquadFilter();\n\t            this.filtersL[i].type = \"allpass\";\n\t            this.filtersR[i].type = \"allpass\";\n\t        }\n\t        this.input.connect(this.splitter);\n\t        this.input.connect(this.output);\n\t        this.splitter.connect(this.filtersL[0], 0, 0);\n\t        this.splitter.connect(this.filtersR[0], 1, 0);\n\t        this.connectInOrder(this.filtersL);\n\t        this.connectInOrder(this.filtersR);\n\t        this.filtersL[this.stage - 1].connect(this.feedbackGainNodeL);\n\t        this.filtersL[this.stage - 1].connect(this.merger, 0, 0);\n\t        this.filtersR[this.stage - 1].connect(this.feedbackGainNodeR);\n\t        this.filtersR[this.stage - 1].connect(this.merger, 0, 1);\n\t        this.feedbackGainNodeL.connect(this.filtersL[0]);\n\t        this.feedbackGainNodeR.connect(this.filtersR[0]);\n\t        this.merger.connect(this.output);\n\t\n\t        this.rate = initValue(properties.rate, this.defaults.rate.value);\n\t        this.baseModulationFrequency = properties.baseModulationFrequency || this.defaults.baseModulationFrequency.value;\n\t        this.depth = initValue(properties.depth, this.defaults.depth.value);\n\t        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\n\t        this.stereoPhase = initValue(properties.stereoPhase, this.defaults.stereoPhase.value);\n\t\n\t        this.lfoL.activate(true);\n\t        this.lfoR.activate(true);\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.Phaser.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"Phaser\"\n\t        },\n\t        stage: {\n\t            value: 4\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                rate: {\n\t                    value: 0.1,\n\t                    min: 0,\n\t                    max: 8,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                depth: {\n\t                    value: 0.6,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                feedback: {\n\t                    value: 0.7,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                stereoPhase: {\n\t                    value: 40,\n\t                    min: 0,\n\t                    max: 180,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                baseModulationFrequency: {\n\t                    value: 700,\n\t                    min: 500,\n\t                    max: 1500,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                }\n\t            }\n\t        },\n\t        callback: {\n\t            value: function(filters, value) {\n\t                for (var stage = 0; stage < 4; stage++) {\n\t                    filters[stage].frequency.value = value;\n\t                }\n\t            }\n\t        },\n\t        depth: {\n\t            get: function() {\n\t                return this._depth;\n\t            },\n\t            set: function(value) {\n\t                this._depth = value;\n\t                this.lfoL.oscillation = this._baseModulationFrequency * this._depth;\n\t                this.lfoR.oscillation = this._baseModulationFrequency * this._depth;\n\t            }\n\t        },\n\t        rate: {\n\t            get: function() {\n\t                return this._rate;\n\t            },\n\t            set: function(value) {\n\t                this._rate = value;\n\t                this.lfoL.frequency = this._rate;\n\t                this.lfoR.frequency = this._rate;\n\t            }\n\t        },\n\t        baseModulationFrequency: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._baseModulationFrequency;\n\t            },\n\t            set: function(value) {\n\t                this._baseModulationFrequency = value;\n\t                this.lfoL.offset = this._baseModulationFrequency;\n\t                this.lfoR.offset = this._baseModulationFrequency;\n\t                this._depth = this._depth;\n\t            }\n\t        },\n\t        feedback: {\n\t            get: function() {\n\t                return this._feedback;\n\t            },\n\t            set: function(value) {\n\t                this._feedback = value;\n\t                this.feedbackGainNodeL.gain.value = this._feedback;\n\t                this.feedbackGainNodeR.gain.value = this._feedback;\n\t            }\n\t        },\n\t        stereoPhase: {\n\t            get: function() {\n\t                return this._stereoPhase;\n\t            },\n\t            set: function(value) {\n\t                this._stereoPhase = value;\n\t                var newPhase = this.lfoL._phase + this._stereoPhase *\n\t                    Math.PI /\n\t                    180;\n\t                newPhase = fmod(newPhase, 2 * Math.PI);\n\t                this.lfoR._phase = newPhase;\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.PingPongDelay = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.wetLevel = userContext.createGain();\n\t        this.stereoToMonoMix = userContext.createGain();\n\t        this.feedbackLevel = userContext.createGain();\n\t        this.output = userContext.createGain();\n\t        this.delayLeft = userContext.createDelay();\n\t        this.delayRight = userContext.createDelay();\n\t\n\t        this.activateNode = userContext.createGain();\n\t        this.splitter = userContext.createChannelSplitter(2);\n\t        this.merger = userContext.createChannelMerger(2);\n\t\n\t        this.activateNode.connect(this.splitter);\n\t        this.splitter.connect(this.stereoToMonoMix, 0, 0);\n\t        this.splitter.connect(this.stereoToMonoMix, 1, 0);\n\t        this.stereoToMonoMix.gain.value = .5;\n\t        this.stereoToMonoMix.connect(this.wetLevel);\n\t        this.wetLevel.connect(this.delayLeft);\n\t        this.feedbackLevel.connect(this.delayLeft);\n\t        this.delayLeft.connect(this.delayRight);\n\t        this.delayRight.connect(this.feedbackLevel);\n\t        this.delayLeft.connect(this.merger, 0, 0);\n\t        this.delayRight.connect(this.merger, 0, 1);\n\t        this.merger.connect(this.output);\n\t        this.activateNode.connect(this.output);\n\t\n\t        this.delayTimeLeft = properties.delayTimeLeft !== undefined ? properties.delayTimeLeft : this.defaults.delayTimeLeft.value;\n\t        this.delayTimeRight = properties.delayTimeRight !== undefined ? properties.delayTimeRight : this.defaults.delayTimeRight.value;\n\t        this.feedbackLevel.gain.value = properties.feedback !== undefined ? properties.feedback : this.defaults.feedback.value;\n\t        this.wetLevel.gain.value = properties.wetLevel !== undefined ? properties.wetLevel : this.defaults.wetLevel.value;\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.PingPongDelay.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"PingPongDelay\"\n\t        },\n\t        delayTimeLeft: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._delayTimeLeft;\n\t            },\n\t            set: function(value) {\n\t                this._delayTimeLeft = value;\n\t                this.delayLeft.delayTime.value = value / 1000;\n\t            }\n\t        },\n\t        delayTimeRight: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._delayTimeRight;\n\t            },\n\t            set: function(value) {\n\t                this._delayTimeRight = value;\n\t                this.delayRight.delayTime.value = value / 1000;\n\t            }\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                delayTimeLeft: {\n\t                    value: 200,\n\t                    min: 1,\n\t                    max: 10000,\n\t                    automatable: false,\n\t                    type: INT\n\t                },\n\t                delayTimeRight: {\n\t                    value: 400,\n\t                    min: 1,\n\t                    max: 10000,\n\t                    automatable: false,\n\t                    type: INT\n\t                },\n\t                feedback: {\n\t                    value: 0.3,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                wetLevel: {\n\t                    value: 0.5,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                }\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.Tremolo = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.splitter = this.activateNode = userContext.createChannelSplitter(\n\t                2),\n\t            this.amplitudeL = userContext.createGain(), this.amplitudeR =\n\t            userContext.createGain(), this.merger = userContext.createChannelMerger(\n\t                2), this.output = userContext.createGain();\n\t        this.lfoL = new userInstance.LFO({\n\t            target: this.amplitudeL.gain,\n\t            callback: pipe\n\t        });\n\t        this.lfoR = new userInstance.LFO({\n\t            target: this.amplitudeR.gain,\n\t            callback: pipe\n\t        });\n\t\n\t        this.input.connect(this.splitter);\n\t        this.splitter.connect(this.amplitudeL, 0);\n\t        this.splitter.connect(this.amplitudeR, 1);\n\t        this.amplitudeL.connect(this.merger, 0, 0);\n\t        this.amplitudeR.connect(this.merger, 0, 1);\n\t        this.merger.connect(this.output);\n\t\n\t        this.rate = properties.rate || this.defaults.rate.value;\n\t        this.intensity = initValue(properties.intensity, this.defaults.intensity\n\t            .value);\n\t        this.stereoPhase = initValue(properties.stereoPhase, this.defaults\n\t            .stereoPhase\n\t            .value);\n\t\n\t        this.lfoL.offset = 1 - (this.intensity / 2);\n\t        this.lfoR.offset = 1 - (this.intensity / 2);\n\t        this.lfoL.phase = this.stereoPhase * Math.PI / 180;\n\t\n\t        this.lfoL.activate(true);\n\t        this.lfoR.activate(true);\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.Tremolo.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"Tremolo\"\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                intensity: {\n\t                    value: 0.3,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                stereoPhase: {\n\t                    value: 0,\n\t                    min: 0,\n\t                    max: 180,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                rate: {\n\t                    value: 5,\n\t                    min: 0.1,\n\t                    max: 11,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                }\n\t            }\n\t        },\n\t        intensity: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._intensity;\n\t            },\n\t            set: function(value) {\n\t                this._intensity = value;\n\t                this.lfoL.offset = 1 - this._intensity / 2;\n\t                this.lfoR.offset = 1 - this._intensity / 2;\n\t                this.lfoL.oscillation = this._intensity;\n\t                this.lfoR.oscillation = this._intensity;\n\t            }\n\t        },\n\t        rate: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._rate;\n\t            },\n\t            set: function(value) {\n\t                this._rate = value;\n\t                this.lfoL.frequency = this._rate;\n\t                this.lfoR.frequency = this._rate;\n\t            }\n\t        },\n\t        stereoPhase: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._rate;\n\t            },\n\t            set: function(value) {\n\t                this._stereoPhase = value;\n\t                var newPhase = this.lfoL._phase + this._stereoPhase *\n\t                    Math.PI /\n\t                    180;\n\t                newPhase = fmod(newPhase, 2 * Math.PI);\n\t                this.lfoR.phase = newPhase;\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.WahWah = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.activateNode = userContext.createGain();\n\t        this.envelopeFollower = new userInstance.EnvelopeFollower({\n\t            target: this,\n\t            callback: function(context, value) {\n\t                context.sweep = value;\n\t            }\n\t        });\n\t        this.filterBp = userContext.createBiquadFilter();\n\t        this.filterPeaking = userContext.createBiquadFilter();\n\t        this.output = userContext.createGain();\n\t\n\t        //Connect AudioNodes\n\t        this.activateNode.connect(this.filterBp);\n\t        this.filterBp.connect(this.filterPeaking);\n\t        this.filterPeaking.connect(this.output);\n\t\n\t        //Set Properties\n\t        this.init();\n\t        this.automode = initValue(properties.enableAutoMode, this.defaults\n\t            .automode\n\t            .value);\n\t        this.resonance = properties.resonance || this.defaults.resonance\n\t            .value;\n\t        this.sensitivity = initValue(properties.sensitivity, this.defaults\n\t            .sensitivity\n\t            .value);\n\t        this.baseFrequency = initValue(properties.baseFrequency, this.defaults\n\t            .baseFrequency\n\t            .value);\n\t        this.excursionOctaves = properties.excursionOctaves || this.defaults\n\t            .excursionOctaves\n\t            .value;\n\t        this.sweep = initValue(properties.sweep, this.defaults.sweep.value);\n\t\n\t        this.activateNode.gain.value = 2;\n\t        this.envelopeFollower.activate(true);\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.WahWah.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"WahWah\"\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                automode: {\n\t                    value: true,\n\t                    automatable: false,\n\t                    type: BOOLEAN\n\t                },\n\t                baseFrequency: {\n\t                    value: 0.5,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                excursionOctaves: {\n\t                    value: 2,\n\t                    min: 1,\n\t                    max: 6,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                sweep: {\n\t                    value: 0.2,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                resonance: {\n\t                    value: 10,\n\t                    min: 1,\n\t                    max: 100,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                sensitivity: {\n\t                    value: 0.5,\n\t                    min: -1,\n\t                    max: 1,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                }\n\t            }\n\t        },\n\t        activateCallback: {\n\t            value: function(value) {\n\t                this.automode = value;\n\t            }\n\t        },\n\t        automode: {\n\t            get: function() {\n\t                return this._automode;\n\t            },\n\t            set: function(value) {\n\t                this._automode = value;\n\t                if (value) {\n\t                    this.activateNode.connect(this.envelopeFollower.input);\n\t                    this.envelopeFollower.activate(true);\n\t                } else {\n\t                    this.envelopeFollower.activate(false);\n\t                    this.activateNode.disconnect();\n\t                    this.activateNode.connect(this.filterBp);\n\t                }\n\t            }\n\t        },\n\t        filterFreqTimeout: {\n\t            value: 0\n\t        },\n\t        setFilterFreq: {\n\t            value: function() {\n\t                try {\n\t                    this.filterBp.frequency.value = this._baseFrequency + this._excursionFrequency * this._sweep;\n\t                    this.filterPeaking.frequency.value = this._baseFrequency + this._excursionFrequency * this._sweep;\n\t                } catch (e) {\n\t                    clearTimeout(this.filterFreqTimeout);\n\t                    //put on the next cycle to let all init properties be set\n\t                    this.filterFreqTimeout = setTimeout(function() {\n\t                        this.setFilterFreq();\n\t                    }.bind(this), 0);\n\t                }\n\t            }\n\t        },\n\t        sweep: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._sweep.value;\n\t            },\n\t            set: function(value) {\n\t                this._sweep = Math.pow(value > 1 ? 1 : value <\n\t                    0 ? 0 :\n\t                    value,\n\t                    this._sensitivity);\n\t                this.setFilterFreq();\n\t            }\n\t        },\n\t        baseFrequency: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._baseFrequency;\n\t            },\n\t            set: function(value) {\n\t                this._baseFrequency = 50 * Math.pow(10, value *\n\t                    2);\n\t                this._excursionFrequency = Math.min(userContext\n\t                    .sampleRate /\n\t                    2,\n\t                    this.baseFrequency * Math.pow(2, this._excursionOctaves)\n\t                );\n\t                this.setFilterFreq();\n\t            }\n\t        },\n\t        excursionOctaves: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._excursionOctaves;\n\t            },\n\t            set: function(value) {\n\t                this._excursionOctaves = value;\n\t                this._excursionFrequency = Math.min(userContext\n\t                    .sampleRate /\n\t                    2,\n\t                    this.baseFrequency * Math.pow(2, this._excursionOctaves)\n\t                );\n\t                this.setFilterFreq();\n\t            }\n\t        },\n\t        sensitivity: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._sensitivity;\n\t            },\n\t            set: function(value) {\n\t                this._sensitivity = Math.pow(10, value);\n\t            }\n\t        },\n\t        resonance: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._resonance;\n\t            },\n\t            set: function(value) {\n\t                this._resonance = value;\n\t                this.filterPeaking.Q = this._resonance;\n\t            }\n\t        },\n\t        init: {\n\t            value: function() {\n\t                this.output.gain.value = 1;\n\t                this.filterPeaking.type = \"peaking\";\n\t                this.filterBp.type = \"bandpass\";\n\t                this.filterPeaking.frequency.value = 100;\n\t                this.filterPeaking.gain.value = 20;\n\t                this.filterPeaking.Q.value = 5;\n\t                this.filterBp.frequency.value = 100;\n\t                this.filterBp.Q.value = 1;\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.EnvelopeFollower = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.jsNode = this.output = userContext.createScriptProcessor(\n\t            this.buffersize,\n\t            1, 1);\n\t\n\t        this.input.connect(this.output);\n\t\n\t        this.attackTime = initValue(properties.attackTime, this.defaults\n\t            .attackTime\n\t            .value);\n\t        this.releaseTime = initValue(properties.releaseTime, this.defaults\n\t            .releaseTime\n\t            .value);\n\t        this._envelope = 0;\n\t        this.target = properties.target || {};\n\t        this.callback = properties.callback || function() {};\n\t    };\n\t    Tuna.prototype.EnvelopeFollower.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"EnvelopeFollower\"\n\t        },\n\t        defaults: {\n\t            value: {\n\t                attackTime: {\n\t                    value: 0.003,\n\t                    min: 0,\n\t                    max: 0.5,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                releaseTime: {\n\t                    value: 0.5,\n\t                    min: 0,\n\t                    max: 0.5,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                }\n\t            }\n\t        },\n\t        buffersize: {\n\t            value: 256\n\t        },\n\t        envelope: {\n\t            value: 0\n\t        },\n\t        sampleRate: {\n\t            value: 44100\n\t        },\n\t        attackTime: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._attackTime;\n\t            },\n\t            set: function(value) {\n\t                this._attackTime = value;\n\t                this._attackC = Math.exp(-1 / this._attackTime *\n\t                    this.sampleRate /\n\t                    this.buffersize);\n\t            }\n\t        },\n\t        releaseTime: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._releaseTime;\n\t            },\n\t            set: function(value) {\n\t                this._releaseTime = value;\n\t                this._releaseC = Math.exp(-1 / this._releaseTime *\n\t                    this.sampleRate /\n\t                    this.buffersize);\n\t            }\n\t        },\n\t        callback: {\n\t            get: function() {\n\t                return this._callback;\n\t            },\n\t            set: function(value) {\n\t                if (typeof value === \"function\") {\n\t                    this._callback = value;\n\t                } else {\n\t                    console.error(\"tuna.js: \" + this.name +\n\t                        \": Callback must be a function!\");\n\t                }\n\t            }\n\t        },\n\t        target: {\n\t            get: function() {\n\t                return this._target;\n\t            },\n\t            set: function(value) {\n\t                this._target = value;\n\t            }\n\t        },\n\t        activate: {\n\t            value: function(doActivate) {\n\t                this.activated = doActivate;\n\t                if (doActivate) {\n\t                    this.jsNode.connect(userContext.destination);\n\t                    this.jsNode.onaudioprocess = this.returnCompute(\n\t                        this);\n\t                } else {\n\t                    this.jsNode.disconnect();\n\t                    this.jsNode.onaudioprocess = null;\n\t                }\n\t            }\n\t        },\n\t        returnCompute: {\n\t            value: function(instance) {\n\t                return function(event) {\n\t                    instance.compute(event);\n\t                };\n\t            }\n\t        },\n\t        compute: {\n\t            value: function(event) {\n\t                var count = event.inputBuffer.getChannelData(0)\n\t                    .length,\n\t                    channels = event.inputBuffer.numberOfChannels,\n\t                    current, chan, rms, i;\n\t                chan = rms = i = 0;\n\t                if (channels > 1) { //need to mixdown\n\t                    for (i = 0; i < count; ++i) {\n\t                        for (; chan < channels; ++chan) {\n\t                            current = event.inputBuffer.getChannelData(chan)[i];\n\t                            rms += (current * current) / channels;\n\t                        }\n\t                    }\n\t                } else {\n\t                    for (i = 0; i < count; ++i) {\n\t                        current = event.inputBuffer.getChannelData(0)[i];\n\t                        rms += (current * current);\n\t                    }\n\t                }\n\t                rms = Math.sqrt(rms);\n\t\n\t                if (this._envelope < rms) {\n\t                    this._envelope *= this._attackC;\n\t                    this._envelope += (1 - this._attackC) * rms;\n\t                } else {\n\t                    this._envelope *= this._releaseC;\n\t                    this._envelope += (1 - this._releaseC) *\n\t                        rms;\n\t                }\n\t                this._callback(this._target, this._envelope);\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.LFO = function(properties) {\n\t        //Instantiate AudioNode\n\t        this.output = userContext.createScriptProcessor(256, 1, 1);\n\t        this.activateNode = userContext.destination;\n\t\n\t        //Set Properties\n\t        this.frequency = initValue(properties.frequency, this.defaults.frequency\n\t            .value);\n\t        this.offset = initValue(properties.offset, this.defaults.offset.value);\n\t        this.oscillation = initValue(properties.oscillation, this.defaults\n\t            .oscillation\n\t            .value);\n\t        this.phase = initValue(properties.phase, this.defaults.phase.value);\n\t        this.target = properties.target || {};\n\t        this.output.onaudioprocess = this.callback(properties.callback ||\n\t            function() {});\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.LFO.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"LFO\"\n\t        },\n\t        bufferSize: {\n\t            value: 256\n\t        },\n\t        sampleRate: {\n\t            value: 44100\n\t        },\n\t        defaults: {\n\t            value: {\n\t                frequency: {\n\t                    value: 1,\n\t                    min: 0,\n\t                    max: 20,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                offset: {\n\t                    value: 0.85,\n\t                    min: 0,\n\t                    max: 22049,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                oscillation: {\n\t                    value: 0.3,\n\t                    min: -22050,\n\t                    max: 22050,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                phase: {\n\t                    value: 0,\n\t                    min: 0,\n\t                    max: 2 * Math.PI,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                }\n\t            }\n\t        },\n\t        frequency: {\n\t            get: function() {\n\t                return this._frequency;\n\t            },\n\t            set: function(value) {\n\t                this._frequency = value;\n\t                this._phaseInc = 2 * Math.PI * this._frequency *\n\t                    this.bufferSize /\n\t                    this.sampleRate;\n\t            }\n\t        },\n\t        offset: {\n\t            get: function() {\n\t                return this._offset;\n\t            },\n\t            set: function(value) {\n\t                this._offset = value;\n\t            }\n\t        },\n\t        oscillation: {\n\t            get: function() {\n\t                return this._oscillation;\n\t            },\n\t            set: function(value) {\n\t                this._oscillation = value;\n\t            }\n\t        },\n\t        phase: {\n\t            get: function() {\n\t                return this._phase;\n\t            },\n\t            set: function(value) {\n\t                this._phase = value;\n\t            }\n\t        },\n\t        target: {\n\t            get: function() {\n\t                return this._target;\n\t            },\n\t            set: function(value) {\n\t                this._target = value;\n\t            }\n\t        },\n\t        activate: {\n\t            value: function(doActivate) {\n\t                if (!doActivate) {\n\t                    this.output.disconnect(userContext.destination);\n\t                } else {\n\t                    this.output.connect(userContext.destination);\n\t                }\n\t            }\n\t        },\n\t        callback: {\n\t            value: function(callback) {\n\t                var that = this;\n\t                return function() {\n\t                    that._phase += that._phaseInc;\n\t                    if (that._phase > 2 * Math.PI) {\n\t                        that._phase = 0;\n\t                    }\n\t                    callback(that._target, that._offset +\n\t                        that._oscillation *\n\t                        Math.sin(that._phase));\n\t                };\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.toString = Tuna.prototype.toString = function() {\n\t        return \"Please visit https://github.com/Theodeus/tuna/wiki for instructions on how to use Tuna.js\";\n\t    };\n\t})(this);\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** web-synth.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap be85d4cf9e68fee7afc2\n **/","import Synth from './WebSynth'\n\nconst win = window || {};\n\nwin.WebSynth = Synth;\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","let AudioCtx = window.AudioContext || window.webkitAudioContext,\n    ctx = new AudioCtx(),\n    deprecatedFn = {\n        createGainNode: 'createGain',\n        createDelayNode: 'createDelay'\n    };\n\nfor (let f in deprecatedFn) {\n    if (typeof ctx[f] === 'function') {\n        ctx[deprecatedFn[f]] = ctx[f];\n    }\n}\n\nexport default ctx;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/lib/AudioContext.js\n **/","export const TYPES = {\n    MASTER: 'Master',\n    OSCILLATOR: 'Oscillator',\n    MODULATOR: 'Modulator',\n    FILTER: 'Filter',\n    NOISE: 'Noise',\n    REVERB: 'Reverb',\n    CHORUS: 'Chorus',\n    DELAY: 'Delay',\n    ENVELOPE: 'Envelope'\n};\n\nexport const CONST = {\n    MASTER: 'master',\n    ADSR: 'adsr',\n\n    NOISE_WHITE: 'white',\n    NOISE_PINK:  'pink',\n    NOISE_BROWN: 'brown',\n\n    WAVE_SINE:   'sine',\n    WAVE_SQUARE: 'square',\n    WAVE_SAWTOOTH: 'sawtooth',\n    WAVE_TRIANLGE: 'triangle',\n    WAVE_CUSTOM: 'custom',\n\n    FILTER_LOWPASS: 'lowpass',\n    FILTER_HIGHPASS: 'highpass',\n    FILTER_BANDPASS: 'bandpass',\n    FILTER_LOWSHELF: 'lowshelf',\n    FILTER_HIGHSHELF: 'highshelf',\n    FILTER_PEAKING: 'peaking',\n    FILTER_NOTCH: 'notch',\n    FILTER_ALLPASS: 'allpass'\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/lib/core/Constants.js\n **/","import AudioContext from '../AudioContext'\n\nclass Module {\n\n    constructor (props) {\n        this.gain = null;\n        this.main = null;\n        this.link = props.link || null;\n        this.level = +props.level;\n\n        this.createGain(this.level);\n    }\n\n    createGain (level) {\n        let l = (level >= 0) ?  level % 101 : 100;\n        this.gain = AudioContext.createGain();\n        this.gain.gain.value = l / 100;\n    }\n\n    disconnect () {\n        this.gain.disconnect();\n    }\n\n    getLineIn () {\n        return this.main;\n    }\n\n    getLineOut () {\n        return this.gain;\n    }\n\n    getEnvelopeTarget (target) {\n        let ret = null;\n\n        if (this.main && this.main[target]) {\n            ret = this.main[target];\n        } else if (target === 'gain' && this.gain) {\n            ret = this.gain.gain;\n        }\n\n        return ret;\n    }\n}\n\nexport default Module;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/lib/core/Module.js\n **/","import AudioContext from '../AudioContext'\nimport Module from '../core/Module'\n\nclass SoundSource extends Module {\n\n    constructor (props) {\n        super(props);\n    }\n\n    noteOn () {\n        this.main.start(0);\n    }\n\n    noteOff (release) {\n        this.main.stop(release);\n    }\n}\n\nexport default SoundSource;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/lib/core/SoundSource.js\n **/","export {default as Oscillator} from './Oscillator'\nexport {default as Modulator} from './Modulator'\nexport {default as Noise} from './Noise'\nexport {default as Filter} from './Filter'\nexport {default as Envelope} from './Envelope'\nexport {default as Master} from './Master'\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/lib/modules/index.js\n **/","import * as Modules from './lib/modules'\nimport { CONST } from './lib/core/Constants'\nimport Synth from './lib/Synth'\n\nclass WebSynth {\n    constructor () {\n        let synth = new Synth(),\n            methods = Object.keys(Modules),\n            fx;\n\n        this.VARS = CONST;\n\n        //Synth Module Creators\n        for (let type of methods) {\n            fx = type.toLowerCase();\n            this[fx] = (label, props) => {\n                synth.module(type, label, props);\n                return this;\n            }\n        }\n\n        this.play = (note) => synth.play(note);\n        this.stop = (note) => synth.stop(note);\n    }\n}\n\nexport default WebSynth;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/WebSynth.js\n **/","import AudioContext from './AudioContext'\nimport { CONST } from './core/Constants'\nimport Voice from './core/Voice'\n\nclass Synth {\n\n    constructor () {\n        this.modulesConfig = {};\n        this.voices = {};\n\n        this.module('Master', CONST.MASTER, {\n            level: 100\n        });\n\n        this.module('Envelope', CONST.ADSR, {\n            link:    CONST.MASTER,\n            target:  'gain',\n            level:   100,\n            attack:  null,\n            decay:   0.1,\n            sustain: 100,\n            release: 5\n        });\n\n    }\n\n    module (type, label, props) {\n        if (!type || type.constructor !== String) {\n            throw new Error('Synth Module :: missing type');\n        }\n\n        if (!label || label.constructor !== String) {\n            throw new Error('Synth Module :: missing label');\n        }\n\n        if (!props || props.constructor !== Object) {\n            throw new Error('Synth Module :: missing properties');\n        }\n\n        if (!this.modulesConfig[label]) {\n            this.addModule(type, label, props);\n        }\n    }\n\n    addModule (type, label, props) {\n        this.modulesConfig[label] = {\n            type,\n            props\n        };\n    }\n\n    play (note) {\n        if (!this.voices[note]) {\n            this.voices[note] = new Voice(note, this.modulesConfig);\n            this.voices[note].noteOn();\n        }\n    }\n\n    stop (note) {\n        if (this.voices[note]) {\n            this.voices[note].noteOff();\n            this.voices[note] = undefined;\n        }\n    }\n}\n\nexport default Synth;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/lib/Synth.js\n **/","import AudioContext from '../AudioContext'\nimport Tuna from 'tunajs'\n\nlet manager = new Tuna(AudioContext);\n\nexport default manager;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/lib/core/EffectManager.js\n **/","import AudioContext from '../AudioContext'\nimport * as Modules from '../modules'\nimport SoundSource from './SoundSource'\nimport { CONST, TYPES } from './Constants'\n\nclass Voice {\n\n    constructor (note, modulesConfig) {\n        this.note = note;\n        this.modulesConfig = modulesConfig;\n        this.modules = {};\n        this.soundSources = [];\n        this.master = null;\n\n        this.setupModules();\n        this.linkModules();\n    }\n\n    setupModules () {\n        let modConf,\n            m;\n\n        Object.keys(this.modulesConfig).forEach((mod) => {\n            modConf = this.modulesConfig[mod];\n            if (modConf.type && modConf.props) {\n                m = new Modules[modConf.type](modConf.props);\n                this.modules[mod] = {\n                    type: modConf.type,\n                    instance: m\n                };\n\n                if (m.instance instanceof SoundSource) {\n                    this.soundSources.push(m);\n                } else if (modConf.type === TYPES.MASTER) {\n                    this.master = m;\n                }\n            }\n        });\n    }\n\n    linkModules () {\n        Object.keys(this.modules).forEach((mod) => {\n            let currentModule = this.modules[mod].instance,\n                currentModuleType = this.modules[mod].type,\n                destinationModule,\n                source,\n                dest;\n\n            if (currentModule.link) {\n                destinationModule = this.modules[currentModule.link];\n                if (destinationModule && destinationModule.instance) {\n                    source = currentModule.getLineOut();\n                    dest = destinationModule.instance.getLineIn(currentModuleType);\n                    //console.log(mod, source, currentModule.link, dest);\n                    if (source && dest) {\n                        source.connect(dest);\n                    }\n                }\n            }\n        });\n\n        this.master.lineOut();\n    }\n\n    noteOn () {\n        let m,\n            dest;\n\n        Object.keys(this.modules).forEach((e) => {\n            m = this.modules[e].instance;\n\n            if (typeof m.setEnvelope === 'function') {\n                dest = (this.modules[m.link]) ? this.modules[m.link].instance : null;\n                m.setEnvelope(dest);\n            }\n            if (typeof m.setNote === 'function') {\n                m.setNote(+this.note);\n            }\n        });\n        Object.keys(this.modules).forEach((e) => {\n            m = this.modules[e].instance;\n            if (typeof m.noteOn === 'function') {\n                m.noteOn();\n            }\n        });\n    }\n\n    noteOff () {\n        let release = 0,\n            adsr = this.modules.adsr.instance,\n            m,\n            dest;\n\n        release = adsr.getReleaseTime();\n\n        Object.keys(this.modules).forEach((e) => {\n            m = this.modules[e].instance;\n            if (typeof m.resetEnvelope === 'function') {\n                dest = (this.modules[m.link]) ? this.modules[m.link].instance : null;\n                m.resetEnvelope(dest);\n            }\n        });\n        Object.keys(this.modules).forEach((e) => {\n            m = this.modules[e].instance;\n            if (typeof m.noteOff === 'function') {\n                m.noteOff(release);\n            }\n        });\n    }\n\n}\n\nexport default Voice;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/lib/core/Voice.js\n **/","import { CONST, TYPES } from '../core/Constants'\nimport AudioContext from '../AudioContext'\nimport Module from '../core/Module'\n\nclass Envelope extends Module {\n\n    constructor (props) {\n        super(props);\n\n        this.target = props.target || null;\n\n        this.attack = props.attack;\n        this.decay = props.decay;\n        this.sustain = props.sustain;\n        this.release = props.release;\n    }\n\n    createGain () {\n        return false;\n    }\n\n    getReleaseTime () {\n        let now = AudioContext.currentTime,\n            release;\n\n        if (this.release) {\n            release = now + (this.release / 10.0);\n        } else {\n            release = now + 0.2;\n        }\n\n        return release;\n    }\n\n    setEnvelope (dest) {\n        let now = AudioContext.currentTime,\n            envelope = this.level % 101,\n            attackLevel,\n            sustainLevel,\n            attackEnd = (this.attack / 20.0),\n            t;\n\n        if (this.target === 'gain') {\n            attackLevel = envelope / 100;\n            sustainLevel = this.sustain / 100.0;\n        } else {\n            attackLevel = envelope * 72;  // Range: 0-7200: 6-octave range\n            sustainLevel = attackLevel * this.sustain / 100.0; // range: 0-7200\n        }\n\n        if (!attackEnd) {\n            attackEnd = 0.05; // tweak to get target decay to work properly\n        }\n\n        if (dest && typeof dest.getEnvelopeTarget === 'function') {\n            t = dest.getEnvelopeTarget(this.target);\n\n            if (t) {\n                t.setValueAtTime(0, now);\n                t.linearRampToValueAtTime(attackLevel, now + attackEnd);\n                t.setTargetAtTime(sustainLevel, now + attackEnd, (this.decay / 100.0));\n            }\n        }\n\n    }\n\n    resetEnvelope (dest) {\n        let now = AudioContext.currentTime,\n            t;\n\n        if (dest && typeof dest.getEnvelopeTarget === 'function') {\n            t = dest.getEnvelopeTarget(this.target);\n\n            if (t) {\n                t.cancelScheduledValues(now);\n                if (this.target === 'gain') {\n                    t.setValueAtTime(t.value, now);\n                }\n                t.setTargetAtTime(0, now, (this.release / 100.0));\n            }\n        }\n    }\n\n    getLineOut () {\n        return false;\n    }\n}\n\nexport default Envelope;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/lib/modules/Envelope.js\n **/","import { CONST, TYPES } from '../core/Constants'\nimport AudioContext from '../AudioContext'\nimport Module from '../core/Module'\nimport EffectManager from '../core/EffectManager'\n\nclass Filter extends Module {\n\n    constructor (props) {\n        super(props);\n\n        this.freq = +props.freq || 11000;\n        this.q = +props.q || 10;\n        this.bypass = +props.bypass || 0;\n        this.filterGain = this.level || 0;\n\n        //TODO think about a Effect super class....to cancel gain creation\n        this.main = new EffectManager.Filter({\n            frequency: this.freq, //20 to 22050\n            Q: this.q, //0.001 to 100\n            gain: this.filterGain, //-40 to 40\n            filterType: props.type || CONST.FILTER_LOWPASS,\n            bypass: this.bypass\n        });\n    }\n\n    createGain () {\n        return false;\n    }\n\n    getLineIn (source) {\n        if (source === TYPES.MODULATOR) {\n            //TODO let main parameter detune | frequency... configurable\n            return this.main.filter.detune;\n        } else {\n            return this.main.input;\n        }\n    }\n\n    getLineOut () {\n        return this.main.output;\n    }\n\n    getEnvelopeTarget (target) {\n        let ret = null;\n\n        if (target === 'gain') {\n            ret = this.main.output.gain;\n        } else if (this.main && this.main.filter && this.main.filter[target]) {\n            ret = this.main.filter[target]\n        }\n\n        return ret;\n    }\n}\n\nexport default Filter;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/lib/modules/Filter.js\n **/","import { CONST } from '../core/Constants'\nimport AudioContext from '../AudioContext'\nimport Module from '../core/Module'\n\nclass Master extends Module {\n\n    constructor (props) {\n        super(props);\n\n        this.main = AudioContext.createGain();\n        this.env = props.envelope || null;\n        this.link = null;\n    }\n\n    //setEnvelope () {\n    //    let now = AudioContext.currentTime,\n    //        envAttackEnd;\n    //\n    //    this.envelope.gain.value = 0.0;\n    //\n    //    if (this.env) {\n    //        envAttackEnd = now + (this.env.attack / 20.0);\n    //        this.envelope.gain.setValueAtTime(0.0, now);\n    //        this.envelope.gain.linearRampToValueAtTime(1.0, envAttackEnd);\n    //        this.envelope.gain.setTargetAtTime(\n    //            (this.env.sustain / 100.0),\n    //            envAttackEnd,\n    //            (this.env.decay / 100.0) + 0.001\n    //        );\n    //    } else {\n    //        this.envelope.gain.setValueAtTime(0.0, now);\n    //        this.envelope.gain.linearRampToValueAtTime(1.0, now + 0.02);\n    //        this.envelope.gain.setTargetAtTime(1, now + 0.02, 0 + 0.001);\n    //        this.envelope.gain.value = 1;\n    //    }\n    //}\n    //\n    //resetEnvelope () {\n    //    let now = AudioContext.currentTime;\n    //\n    //    if (this.env) {\n    //        this.envelope.gain.cancelScheduledValues(now);\n    //        this.envelope.gain.setValueAtTime(this.envelope.gain.value, now);\n    //        this.envelope.gain.setTargetAtTime(0.0, now, (this.env.release / 100));\n    //    } else {\n    //        this.envelope.gain.cancelScheduledValues(now);\n    //        this.envelope.gain.setValueAtTime(this.envelope.gain.value, now);\n    //        this.envelope.gain.setTargetAtTime(0.0, now, 0.05);\n    //    }\n    //}\n\n    getLineIn () {\n        return this.main;\n    }\n\n    lineOut () {\n        this.main.connect(this.gain);\n        this.gain.connect(AudioContext.destination);\n    }\n}\n\nexport default Master;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/lib/modules/Master.js\n **/","import { CONST } from '../core/Constants'\nimport AudioContext from '../AudioContext'\nimport SoundSource from '../core/SoundSource'\n\nclass Modulator extends SoundSource {\n\n    constructor (props) {\n        super(props);\n\n        this.freq = +props.freq || 440;\n\n        this.main = AudioContext.createOscillator();\n        this.main.type = props.type || CONST.WAVE_SINE;\n        this.main.connect(this.gain);\n    }\n\n    setNote () {\n        let f =  this.freq % 11;\n        this.main.frequency.value = f;\n    }\n\n    getLineIn () {\n        return this.main.frequency;\n    }\n}\n\nexport default Modulator;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/lib/modules/Modulator.js\n **/","import { CONST } from '../core/Constants'\nimport AudioContext from '../AudioContext'\nimport SoundSource from '../core/SoundSource'\n\nclass Noise extends SoundSource {\n\n    constructor (props) {\n        super(props);\n\n        this.main = AudioContext.createBufferSource();\n        this.main.connect(this.gain);\n\n        this.color = props.color || 'white';\n        this.setColor();\n    }\n\n    setColor () {\n        switch (this.color) {\n            case 'white' :\n                this.main.buffer = this.white();\n                break;\n            case 'pink' :\n                this.main.buffer = this.pink();\n                break;\n            case 'brown' :\n                this.main.buffer = this.brown();\n                break;\n            default :\n                throw new Error('Invalid Noise color: ' + this.color);\n        }\n    }\n\n    white () {\n        let noiseBuffer = this.getNoiseBuffer(),\n            bufferSize = this.getBufferSize(),\n            output = noiseBuffer.getChannelData(0);\n\n        for (let i = 0; i < bufferSize; i++) {\n            output[i] = Math.random() * 2 - 1;\n        }\n\n        return noiseBuffer;\n    }\n\n    pink () {\n        let b0, b1, b2, b3, b4, b5, b6,\n            noiseBuffer = this.getNoiseBuffer(),\n            bufferSize = this.getBufferSize(),\n            output = noiseBuffer.getChannelData(0),\n            white;\n\n        b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\n        for (let i = 0; i < bufferSize; i++) {\n            white = Math.random() * 2 - 1;\n\n            b0 = 0.99886 * b0 + white * 0.0555179;\n            b1 = 0.99332 * b1 + white * 0.0750759;\n            b2 = 0.96900 * b2 + white * 0.1538520;\n            b3 = 0.86650 * b3 + white * 0.3104856;\n            b4 = 0.55000 * b4 + white * 0.5329522;\n            b5 = -0.7616 * b5 - white * 0.0168980;\n\n            output[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n            output[i] *= 0.11;\n            b6 = white * 0.115926;\n        }\n\n        return noiseBuffer;\n    }\n\n    brown () {\n        let noiseBuffer = this.getNoiseBuffer(),\n            bufferSize = this.getBufferSize(),\n            output = noiseBuffer.getChannelData(0),\n            lastOut = 0.0,\n            white;\n\n        for (let i = 0; i < bufferSize; i++) {\n            white = white = Math.random() * 2 - 1;\n\n            output[i] = (lastOut + (0.02 * white)) / 1.02;\n            lastOut = output[i];\n            output[i] *= 3.5;\n        }\n\n        return noiseBuffer;\n    }\n\n    getBufferSize () {\n        return 2 * AudioContext.sampleRate;\n    }\n\n    getNoiseBuffer () {\n        let bufferSize = this.getBufferSize(),\n            noiseBuffer = AudioContext.createBuffer(1, bufferSize, AudioContext.sampleRate);\n        return noiseBuffer;\n    }\n\n    setNote () {\n        this.main.loop = true;\n    }\n}\n\nexport default Noise;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/lib/modules/Noise.js\n **/","import { CONST } from '../core/Constants'\nimport AudioContext from '../AudioContext'\nimport SoundSource from '../core/SoundSource'\n\nclass Oscillator extends SoundSource {\n\n    constructor (props) {\n        super(props);\n\n        this.detune = +props.detune || 0;\n\n        this.main = AudioContext.createOscillator();\n        this.main.type = props.type || CONST.WAVE_SINE;\n        this.main.connect(this.gain);\n\n        this.setDetune();\n    }\n\n    setDetune () {\n        if (this.detune > 1200) {\n            this.detune = 1200;\n        } else if (this.detune < -1200) {\n            this.detune = -1200;\n        }\n\n        this.main.detune.value = this.detune;\n    }\n\n    setNote (note) {\n        this.main.frequency.value = note;\n    }\n\n    getLineIn () {\n        return this.main.frequency;\n    }\n}\n\nexport default Oscillator;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/lib/modules/Oscillator.js\n **/","/*\n    Copyright (c) 2012 DinahMoe AB & Oskar Eriksson\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy,\n    modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software\n    is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n(function(window) {\n    var userContext,\n        userInstance,\n        pipe = function(param, val) {\n            param.value = val;\n        },\n        Super = Object.create(null, {\n            activate: {\n                writable: true,\n                value: function(doActivate) {\n                    if (doActivate) {\n                        this.input.disconnect();\n                        this.input.connect(this.activateNode);\n                        if (this.activateCallback) {\n                            this.activateCallback(doActivate);\n                        }\n                    } else {\n                        this.input.disconnect();\n                        this.input.connect(this.output);\n                    }\n                }\n            },\n            bypass: {\n                get: function() {\n                    return this._bypass;\n                },\n                set: function(value) {\n                    if (this._lastBypassValue === value) {\n                        return;\n                    }\n                    this._bypass = value;\n                    this.activate(!value);\n                    this._lastBypassValue = value;\n                }\n            },\n            connect: {\n                value: function(target) {\n                    this.output.connect(target);\n                }\n            },\n            disconnect: {\n                value: function(target) {\n                    this.output.disconnect(target);\n                }\n            },\n            connectInOrder: {\n                value: function(nodeArray) {\n                    var i = nodeArray.length - 1;\n                    while (i--) {\n                        if (!nodeArray[i].connect) {\n                            return console.error(\"AudioNode.connectInOrder: TypeError: Not an AudioNode.\", nodeArray[i]);\n                        }\n                        if (nodeArray[i + 1].input) {\n                            nodeArray[i].connect(nodeArray[i + 1].input);\n                        } else {\n                            nodeArray[i].connect(nodeArray[i + 1]);\n                        }\n                    }\n                }\n            },\n            getDefaults: {\n                value: function() {\n                    var result = {};\n                    for (var key in this.defaults) {\n                        result[key] = this.defaults[key].value;\n                    }\n                    return result;\n                }\n            },\n            automate: {\n                value: function(property, value, duration, startTime) {\n                    var start = startTime ? ~~(startTime / 1000) : userContext.currentTime,\n                        dur = duration ? ~~(duration / 1000) : 0,\n                        _is = this.defaults[property],\n                        param = this[property],\n                        method;\n\n                    if (param) {\n                        if (_is.automatable) {\n                            if (!duration) {\n                                method = \"setValueAtTime\";\n                            } else {\n                                method = \"linearRampToValueAtTime\";\n                                param.cancelScheduledValues(start);\n                                param.setValueAtTime(param.value, start);\n                            }\n                            param[method](value, dur + start);\n                        } else {\n                            param = value;\n                        }\n                    } else {\n                        console.error(\"Invalid Property for \" + this.name);\n                    }\n                }\n            }\n        }),\n        FLOAT = \"float\",\n        BOOLEAN = \"boolean\",\n        STRING = \"string\",\n        INT = \"int\";\n\n    if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = Tuna;\n    } else if (typeof define === \"function\") {\n        window.define(\"Tuna\", definition);\n    } else {\n        window.Tuna = Tuna;\n    }\n\n    function definition() {\n        return Tuna;\n    }\n\n    function Tuna(context) {\n        if (!(this instanceof Tuna)) {\n            return new Tuna(context);\n        }\n        if (!window.AudioContext) {\n            window.AudioContext = window.webkitAudioContext;\n        }\n        if (!context) {\n            console.log(\"tuna.js: Missing audio context! Creating a new context for you.\");\n            context = window.AudioContext && (new window.AudioContext());\n        }\n        if (!context) {\n            throw new Error(\"Tuna cannot initialize because this environment does not support web audio.\");\n        }\n        connectify(context);\n        userContext = context;\n        userInstance = this;\n    }\n\n    function connectify(context) {\n        if (context.__connectified__ === true) return;\n\n        var gain = context.createGain(),\n            proto = Object.getPrototypeOf(Object.getPrototypeOf(gain)),\n            oconnect = proto.connect;\n\n        proto.connect = shimConnect;\n        context.__connectified__ = true; // Prevent overriding connect more than once\n\n        function shimConnect() {\n            var node = Array.prototype.shift.apply(arguments);\n            node = Super.isPrototypeOf ? (Super.isPrototypeOf(node) ? node.input : node) : (node.input || node);\n            arguments = Array.prototype.slice.call(arguments);\n            arguments.unshift(node);\n            oconnect.apply(this, arguments);\n            return node;\n        }\n    }\n\n    function dbToWAVolume(db) {\n        return Math.max(0, Math.round(100 * Math.pow(2, db / 6)) / 100);\n    }\n\n    function fmod(x, y) {\n        // http://kevin.vanzonneveld.net\n        // *     example 1: fmod(5.7, 1.3);\n        // *     returns 1: 0.5\n        var tmp, tmp2, p = 0,\n            pY = 0,\n            l = 0.0,\n            l2 = 0.0;\n\n        tmp = x.toExponential().match(/^.\\.?(.*)e(.+)$/);\n        p = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\n        tmp = y.toExponential().match(/^.\\.?(.*)e(.+)$/);\n        pY = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\n\n        if (pY > p) {\n            p = pY;\n        }\n\n        tmp2 = (x % y);\n\n        if (p < -100 || p > 20) {\n            // toFixed will give an out of bound error so we fix it like this:\n            l = Math.round(Math.log(tmp2) / Math.log(10));\n            l2 = Math.pow(10, l);\n\n            return (tmp2 / l2).toFixed(l - p) * l2;\n        } else {\n            return parseFloat(tmp2.toFixed(-p));\n        }\n    }\n\n    function sign(x) {\n        if (x === 0) {\n            return 1;\n        } else {\n            return Math.abs(x) / x;\n        }\n    }\n\n    function tanh(n) {\n        return (Math.exp(n) - Math.exp(-n)) / (Math.exp(n) + Math.exp(-n));\n    }\n\n    function initValue(userVal, defaultVal) {\n        return userVal === undefined ? defaultVal : userVal;\n    }\n\n    Tuna.prototype.Bitcrusher = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.bufferSize = properties.bufferSize || this.defaults.bufferSize.value;\n\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.processor = userContext.createScriptProcessor(this.bufferSize, 1, 1);\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.processor);\n        this.processor.connect(this.output);\n\n        var phaser = 0,\n            last = 0,\n            input, output, step, i, length;\n        this.processor.onaudioprocess = function(e) {\n            input = e.inputBuffer.getChannelData(0),\n            output = e.outputBuffer.getChannelData(0),\n            step = Math.pow(1 / 2, this.bits);\n            length = input.length;\n            for (i = 0; i < length; i++) {\n                phaser += this.normfreq;\n                if (phaser >= 1.0) {\n                    phaser -= 1.0;\n                    last = step * Math.floor(input[i] / step + 0.5);\n                }\n                output[i] = last;\n            }\n        };\n\n        this.bits = properties.bits || this.defaults.bits.value;\n        this.normfreq = initValue(properties.normfreq, this.defaults.normfreq.value);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Bitcrusher.prototype = Object.create(Super, {\n        name: {\n            value: \"Bitcrusher\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                bits: {\n                    value: 4,\n                    min: 1,\n                    max: 16,\n                    automatable: false,\n                    type: INT\n                },\n                bufferSize: {\n                    value: 4096,\n                    min: 256,\n                    max: 16384,\n                    automatable: false,\n                    type: INT\n                },\n                bypass: {\n                    value: true,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                normfreq: {\n                    value: 0.1,\n                    min: 0.0001,\n                    max: 1.0,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        bits: {\n            enumerable: true,\n            get: function() {\n                return this.processor.bits;\n            },\n            set: function(value) {\n                this.processor.bits = value;\n            }\n        },\n        normfreq: {\n            enumerable: true,\n            get: function() {\n                return this.processor.normfreq;\n            },\n            set: function(value) {\n                this.processor.normfreq = value;\n            }\n        }\n    });\n\n    Tuna.prototype.Cabinet = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.convolver = this.newConvolver(properties.impulsePath ||\n            \"../impulses/impulse_guitar.wav\");\n        this.makeupNode = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.convolver.input);\n        this.convolver.output.connect(this.makeupNode);\n        this.makeupNode.connect(this.output);\n\n        this.makeupGain = initValue(properties.makeupGain, this.defaults\n            .makeupGain);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Cabinet.prototype = Object.create(Super, {\n        name: {\n            value: \"Cabinet\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                makeupGain: {\n                    value: 1,\n                    min: 0,\n                    max: 20,\n                    automatable: true,\n                    type: FLOAT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        },\n        makeupGain: {\n            enumerable: true,\n            get: function() {\n                return this.makeupNode.gain;\n            },\n            set: function(value) {\n                this.makeupNode.gain.value = value;\n            }\n        },\n        newConvolver: {\n            value: function(impulsePath) {\n                return new userInstance.Convolver({\n                    impulse: impulsePath,\n                    dryLevel: 0,\n                    wetLevel: 1\n                });\n            }\n        }\n    });\n\n    Tuna.prototype.Chorus = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.attenuator = this.activateNode = userContext.createGain();\n        this.splitter = userContext.createChannelSplitter(2);\n        this.delayL = userContext.createDelay();\n        this.delayR = userContext.createDelay();\n        this.feedbackGainNodeLR = userContext.createGain();\n        this.feedbackGainNodeRL = userContext.createGain();\n        this.merger = userContext.createChannelMerger(2);\n        this.output = userContext.createGain();\n\n        this.lfoL = new userInstance.LFO({\n            target: this.delayL.delayTime,\n            callback: pipe\n        });\n        this.lfoR = new userInstance.LFO({\n            target: this.delayR.delayTime,\n            callback: pipe\n        });\n\n        this.input.connect(this.attenuator);\n        this.attenuator.connect(this.output);\n        this.attenuator.connect(this.splitter);\n        this.splitter.connect(this.delayL, 0);\n        this.splitter.connect(this.delayR, 1);\n        this.delayL.connect(this.feedbackGainNodeLR);\n        this.delayR.connect(this.feedbackGainNodeRL);\n        this.feedbackGainNodeLR.connect(this.delayR);\n        this.feedbackGainNodeRL.connect(this.delayL);\n        this.delayL.connect(this.merger, 0, 0);\n        this.delayR.connect(this.merger, 0, 1);\n        this.merger.connect(this.output);\n\n        this.feedback = initValue(properties.feedback, this.defaults.feedback\n            .value);\n        this.rate = initValue(properties.rate, this.defaults.rate.value);\n        this.delay = initValue(properties.delay, this.defaults.delay.value);\n        this.depth = initValue(properties.depth, this.defaults.depth.value);\n        this.lfoR.phase = Math.PI / 2;\n        this.attenuator.gain.value = 0.6934; // 1 / (10 ^ (((20 * log10(3)) / 3) / 20))\n        this.lfoL.activate(true);\n        this.lfoR.activate(true);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Chorus.prototype = Object.create(Super, {\n        name: {\n            value: \"Chorus\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                feedback: {\n                    value: 0.4,\n                    min: 0,\n                    max: 0.95,\n                    automatable: false,\n                    type: FLOAT\n                },\n                delay: {\n                    value: 0.0045,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                depth: {\n                    value: 0.7,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                rate: {\n                    value: 1.5,\n                    min: 0,\n                    max: 8,\n                    automatable: false,\n                    type: FLOAT\n                },\n                bypass: {\n                    value: true,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        },\n        delay: {\n            enumerable: true,\n            get: function() {\n                return this._delay;\n            },\n            set: function(value) {\n                this._delay = 0.0002 * (Math.pow(10, value) * 2);\n                this.lfoL.offset = this._delay;\n                this.lfoR.offset = this._delay;\n                this._depth = this._depth;\n            }\n        },\n        depth: {\n            enumerable: true,\n            get: function() {\n                return this._depth;\n            },\n            set: function(value) {\n                this._depth = value;\n                this.lfoL.oscillation = this._depth * this._delay;\n                this.lfoR.oscillation = this._depth * this._delay;\n            }\n        },\n        feedback: {\n            enumerable: true,\n            get: function() {\n                return this._feedback;\n            },\n            set: function(value) {\n                this._feedback = value;\n                this.feedbackGainNodeLR.gain.value = this._feedback;\n                this.feedbackGainNodeRL.gain.value = this._feedback;\n            }\n        },\n        rate: {\n            enumerable: true,\n            get: function() {\n                return this._rate;\n            },\n            set: function(value) {\n                this._rate = value;\n                this.lfoL.frequency = this._rate;\n                this.lfoR.frequency = this._rate;\n            }\n        }\n    });\n\n    Tuna.prototype.Compressor = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.compNode = this.activateNode = userContext.createDynamicsCompressor();\n        this.makeupNode = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.compNode.connect(this.makeupNode);\n        this.makeupNode.connect(this.output);\n\n        this.automakeup = initValue(properties.automakeup, this.defaults\n            .automakeup\n            .value);\n        this.makeupGain = properties.makeupGain || this.defaults.makeupGain\n            .value;\n        this.threshold = initValue(properties.threshold, this.defaults.threshold\n            .value);\n        this.release = properties.release || this.defaults.release.value;\n        this.attack = initValue(properties.attack, this.defaults.attack\n            .value);\n        this.ratio = properties.ratio || this.defaults.ratio.value;\n        this.knee = initValue(properties.knee, this.defaults.knee.value);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Compressor.prototype = Object.create(Super, {\n        name: {\n            value: \"Compressor\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                threshold: {\n                    value: -20,\n                    min: -60,\n                    max: 0,\n                    automatable: true,\n                    type: FLOAT\n                },\n                release: {\n                    value: 250,\n                    min: 10,\n                    max: 2000,\n                    automatable: true,\n                    type: FLOAT\n                },\n                makeupGain: {\n                    value: 1,\n                    min: 1,\n                    max: 100,\n                    automatable: true,\n                    type: FLOAT\n                },\n                attack: {\n                    value: 1,\n                    min: 0,\n                    max: 1000,\n                    automatable: true,\n                    type: FLOAT\n                },\n                ratio: {\n                    value: 4,\n                    min: 1,\n                    max: 50,\n                    automatable: true,\n                    type: FLOAT\n                },\n                knee: {\n                    value: 5,\n                    min: 0,\n                    max: 40,\n                    automatable: true,\n                    type: FLOAT\n                },\n                automakeup: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                bypass: {\n                    value: true,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        },\n        computeMakeup: {\n            value: function() {\n                var magicCoefficient = 4,\n                    // raise me if the output is too hot\n                    c = this.compNode;\n                return -(c.threshold.value - c.threshold.value /\n                        c.ratio.value) /\n                    magicCoefficient;\n            }\n        },\n        automakeup: {\n            enumerable: true,\n            get: function() {\n                return this._automakeup;\n            },\n            set: function(value) {\n                this._automakeup = value;\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\n            }\n        },\n        threshold: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.threshold;\n            },\n            set: function(value) {\n                this.compNode.threshold.value = value;\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\n            }\n        },\n        ratio: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.ratio;\n            },\n            set: function(value) {\n                this.compNode.ratio.value = value;\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\n            }\n        },\n        knee: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.knee;\n            },\n            set: function(value) {\n                this.compNode.knee.value = value;\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\n            }\n        },\n        attack: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.attack;\n            },\n            set: function(value) {\n                this.compNode.attack.value = value / 1000;\n            }\n        },\n        release: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.release;\n            },\n            set: function(value) {\n                this.compNode.release = value / 1000;\n            }\n        },\n        makeupGain: {\n            enumerable: true,\n            get: function() {\n                return this.makeupNode.gain;\n            },\n            set: function(value) {\n                this.makeupNode.gain.value = dbToWAVolume(value);\n            }\n        }\n    });\n\n    Tuna.prototype.Convolver = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.convolver = userContext.createConvolver();\n        this.dry = userContext.createGain();\n        this.filterLow = userContext.createBiquadFilter();\n        this.filterHigh = userContext.createBiquadFilter();\n        this.wet = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.filterLow);\n        this.activateNode.connect(this.dry);\n        this.filterLow.connect(this.filterHigh);\n        this.filterHigh.connect(this.convolver);\n        this.convolver.connect(this.wet);\n        this.wet.connect(this.output);\n        this.dry.connect(this.output);\n\n        this.dryLevel = initValue(properties.dryLevel, this.defaults.dryLevel\n            .value);\n        this.wetLevel = initValue(properties.wetLevel, this.defaults.wetLevel\n            .value);\n        this.highCut = properties.highCut || this.defaults.highCut.value;\n        this.buffer = properties.impulse ||\n            \"../impulses/ir_rev_short.wav\";\n        this.lowCut = properties.lowCut || this.defaults.lowCut.value;\n        this.level = initValue(properties.level, this.defaults.level.value);\n        this.filterHigh.type = \"lowpass\";\n        this.filterLow.type = \"highpass\";\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Convolver.prototype = Object.create(Super, {\n        name: {\n            value: \"Convolver\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                highCut: {\n                    value: 22050,\n                    min: 20,\n                    max: 22050,\n                    automatable: true,\n                    type: FLOAT\n                },\n                lowCut: {\n                    value: 20,\n                    min: 20,\n                    max: 22050,\n                    automatable: true,\n                    type: FLOAT\n                },\n                dryLevel: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                },\n                wetLevel: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                },\n                level: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                }\n            }\n        },\n        lowCut: {\n            get: function() {\n                return this.filterLow.frequency;\n            },\n            set: function(value) {\n                this.filterLow.frequency.value = value;\n            }\n        },\n        highCut: {\n            get: function() {\n                return this.filterHigh.frequency;\n            },\n            set: function(value) {\n                this.filterHigh.frequency.value = value;\n            }\n        },\n        level: {\n            get: function() {\n                return this.output.gain;\n            },\n            set: function(value) {\n                this.output.gain.value = value;\n            }\n        },\n        dryLevel: {\n            get: function() {\n                return this.dry.gain\n            },\n            set: function(value) {\n                this.dry.gain.value = value;\n            }\n        },\n        wetLevel: {\n            get: function() {\n                return this.wet.gain;\n            },\n            set: function(value) {\n                this.wet.gain.value = value;\n            }\n        },\n        buffer: {\n            enumerable: false,\n            get: function() {\n                return this.convolver.buffer;\n            },\n            set: function(impulse) {\n                var convolver = this.convolver,\n                    xhr = new XMLHttpRequest();\n                if (!impulse) {\n                    console.log(\"Tuna.Convolver.setBuffer: Missing impulse path!\");\n                    return;\n                }\n                xhr.open(\"GET\", impulse, true);\n                xhr.responseType = \"arraybuffer\";\n                xhr.onreadystatechange = function() {\n                    if (xhr.readyState === 4) {\n                        if (xhr.status < 300 && xhr.status > 199 || xhr.status === 302) {\n                            userContext.decodeAudioData(xhr.response, function(buffer) {\n                                convolver.buffer = buffer;\n                            }, function(e) {\n                                if (e) console.log(\"Tuna.Convolver.setBuffer: Error decoding data\" + e);\n                            });\n                        }\n                    }\n                };\n                xhr.send(null);\n            }\n        }\n    });\n\n    Tuna.prototype.Delay = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.dry = userContext.createGain();\n        this.wet = userContext.createGain();\n        this.filter = userContext.createBiquadFilter();\n        this.delay = userContext.createDelay();\n        this.feedbackNode = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.delay);\n        this.activateNode.connect(this.dry);\n        this.delay.connect(this.filter);\n        this.filter.connect(this.feedbackNode);\n        this.feedbackNode.connect(this.delay);\n        this.feedbackNode.connect(this.wet);\n        this.wet.connect(this.output);\n        this.dry.connect(this.output);\n\n        this.delayTime = properties.delayTime || this.defaults.delayTime.value;\n        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\n        this.wetLevel = initValue(properties.wetLevel, this.defaults.wetLevel.value);\n        this.dryLevel = initValue(properties.dryLevel, this.defaults.dryLevel.value);\n        this.cutoff = properties.cutoff || this.defaults.cutoff.value;\n        this.filter.type = \"lowpass\";\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Delay.prototype = Object.create(Super, {\n        name: {\n            value: \"Delay\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                delayTime: {\n                    value: 100,\n                    min: 20,\n                    max: 1000,\n                    automatable: false,\n                    type: FLOAT\n                },\n                feedback: {\n                    value: 0.45,\n                    min: 0,\n                    max: 0.9,\n                    automatable: true,\n                    type: FLOAT\n                },\n                cutoff: {\n                    value: 20000,\n                    min: 20,\n                    max: 20000,\n                    automatable: true,\n                    type: FLOAT\n                },\n                wetLevel: {\n                    value: 0.5,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                },\n                dryLevel: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                }\n            }\n        },\n        delayTime: {\n            enumerable: true,\n            get: function() {\n                return this.delay.delayTime;\n            },\n            set: function(value) {\n                this.delay.delayTime.value = value / 1000;\n            }\n        },\n        wetLevel: {\n            enumerable: true,\n            get: function() {\n                return this.wet.gain;\n            },\n            set: function(value) {\n                this.wet.gain.value = value;\n            }\n        },\n        dryLevel: {\n            enumerable: true,\n            get: function() {\n                return this.dry.gain;\n            },\n            set: function(value) {\n                this.dry.gain.value = value;\n            }\n        },\n        feedback: {\n            enumerable: true,\n            get: function() {\n                return this.feedbackNode.gain;\n            },\n            set: function(value) {\n                this.feedbackNode.gain.value = value;\n            }\n        },\n        cutoff: {\n            enumerable: true,\n            get: function() {\n                return this.filter.frequency;\n            },\n            set: function(value) {\n                this.filter.frequency.value = value;\n            }\n        }\n    });\n\n    Tuna.prototype.Filter = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.filter = userContext.createBiquadFilter();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.filter);\n        this.filter.connect(this.output);\n\n        this.frequency = properties.frequency || this.defaults.frequency\n            .value;\n        this.Q = properties.resonance || this.defaults.Q.value;\n        this.filterType = initValue(properties.filterType, this.defaults\n            .filterType\n            .value);\n        this.gain = initValue(properties.gain, this.defaults.gain.value);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Filter.prototype = Object.create(Super, {\n        name: {\n            value: \"Filter\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                frequency: {\n                    value: 800,\n                    min: 20,\n                    max: 22050,\n                    automatable: true,\n                    type: FLOAT\n                },\n                Q: {\n                    value: 1,\n                    min: 0.001,\n                    max: 100,\n                    automatable: true,\n                    type: FLOAT\n                },\n                gain: {\n                    value: 0,\n                    min: -40,\n                    max: 40,\n                    automatable: true,\n                    type: FLOAT\n                },\n                bypass: {\n                    value: true,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                filterType: {\n                    value: \"lowpass\",\n                    automatable: false,\n                    type: STRING\n                }\n            }\n        },\n        filterType: {\n            enumerable: true,\n            get: function() {\n                return this.filter.type;\n            },\n            set: function(value) {\n                this.filter.type = value;\n            }\n        },\n        Q: {\n            enumerable: true,\n            get: function() {\n                return this.filter.Q;\n            },\n            set: function(value) {\n                this.filter.Q.value = value;\n            }\n        },\n        gain: {\n            enumerable: true,\n            get: function() {\n                return this.filter.gain;\n            },\n            set: function(value) {\n                this.filter.gain.value = value;\n            }\n        },\n        frequency: {\n            enumerable: true,\n            get: function() {\n                return this.filter.frequency;\n            },\n            set: function(value) {\n                this.filter.frequency.value = value;\n            }\n        }\n    });\n\n    Tuna.prototype.MoogFilter = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.bufferSize = properties.bufferSize || this.defaults.bufferSize\n            .value;\n\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.processor = userContext.createScriptProcessor(this.bufferSize,\n            1,\n            1);\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.processor);\n        this.processor.connect(this.output);\n\n        var in1, in2, in3, in4, out1, out2, out3, out4;\n        in1 = in2 = in3 = in4 = out1 = out2 = out3 = out4 = 0.0;\n        var input, output, f, fb, i, length;\n        this.processor.onaudioprocess = function(e) {\n            input = e.inputBuffer.getChannelData(0),\n                output = e.outputBuffer.getChannelData(0),\n                f = this.cutoff * 1.16,\n                inputFactor = 0.35013 * (f * f) * (f * f);\n            fb = this.resonance * (1.0 - 0.15 * f * f);\n            length = input.length;\n            for (i = 0; i < length; i++) {\n                input[i] -= out4 * fb;\n                input[i] *= inputFactor;\n                out1 = input[i] + 0.3 * in1 + (1 - f) * out1; // Pole 1\n                in1 = input[i];\n                out2 = out1 + 0.3 * in2 + (1 - f) * out2; // Pole 2\n                in2 = out1;\n                out3 = out2 + 0.3 * in3 + (1 - f) * out3; // Pole 3\n                in3 = out2;\n                out4 = out3 + 0.3 * in4 + (1 - f) * out4; // Pole 4\n                in4 = out3;\n                output[i] = out4;\n            }\n        };\n\n        this.cutoff = initValue(properties.cutoff, this.defaults.cutoff\n            .value);\n        this.resonance = initValue(properties.resonance, this.defaults.resonance\n            .value);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.MoogFilter.prototype = Object.create(Super, {\n        name: {\n            value: \"MoogFilter\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                bufferSize: {\n                    value: 4096,\n                    min: 256,\n                    max: 16384,\n                    automatable: false,\n                    type: INT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                cutoff: {\n                    value: 0.065,\n                    min: 0.0001,\n                    max: 1.0,\n                    automatable: false,\n                    type: FLOAT\n                },\n                resonance: {\n                    value: 3.5,\n                    min: 0.0,\n                    max: 4.0,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        cutoff: {\n            enumerable: true,\n            get: function() {\n                return this.processor.cutoff;\n            },\n            set: function(value) {\n                this.processor.cutoff = value;\n            }\n        },\n        resonance: {\n            enumerable: true,\n            get: function() {\n                return this.processor.resonance;\n            },\n            set: function(value) {\n                this.processor.resonance = value;\n            }\n        }\n    });\n\n    Tuna.prototype.Overdrive = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.inputDrive = userContext.createGain();\n        this.waveshaper = userContext.createWaveShaper();\n        this.outputDrive = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.inputDrive);\n        this.inputDrive.connect(this.waveshaper);\n        this.waveshaper.connect(this.outputDrive);\n        this.outputDrive.connect(this.output);\n\n        this.ws_table = new Float32Array(this.k_nSamples);\n        this.drive = initValue(properties.drive, this.defaults.drive.value);\n        this.outputGain = initValue(properties.outputGain, this.defaults\n            .outputGain\n            .value);\n        this.curveAmount = initValue(properties.curveAmount, this.defaults\n            .curveAmount\n            .value);\n        this.algorithmIndex = initValue(properties.algorithmIndex, this\n            .defaults\n            .algorithmIndex.value);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Overdrive.prototype = Object.create(Super, {\n        name: {\n            value: \"Overdrive\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                drive: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT,\n                    scaled: true\n                },\n                outputGain: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT,\n                    scaled: true\n                },\n                curveAmount: {\n                    value: 0.725,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                algorithmIndex: {\n                    value: 0,\n                    min: 0,\n                    max: 5,\n                    automatable: false,\n                    type: INT\n                }\n            }\n        },\n        k_nSamples: {\n            value: 8192\n        },\n        drive: {\n            get: function() {\n                return this.inputDrive.gain;\n            },\n            set: function(value) {\n                this._drive = value;\n            }\n        },\n        curveAmount: {\n            get: function() {\n                return this._curveAmount;\n            },\n            set: function(value) {\n                this._curveAmount = value;\n                if (this._algorithmIndex === undefined) {\n                    this._algorithmIndex = 0;\n                }\n                this.waveshaperAlgorithms[this._algorithmIndex]\n                    (this._curveAmount,\n                        this.k_nSamples, this.ws_table);\n                this.waveshaper.curve = this.ws_table;\n            }\n        },\n        outputGain: {\n            get: function() {\n                return this.outputDrive.gain;\n            },\n            set: function(value) {\n                this._outputGain = dbToWAVolume(value);\n            }\n        },\n        algorithmIndex: {\n            get: function() {\n                return this._algorithmIndex;\n            },\n            set: function(value) {\n                this._algorithmIndex = value;\n                this.curveAmount = this._curveAmount;\n            }\n        },\n        waveshaperAlgorithms: {\n            value: [\n                function(amount, n_samples, ws_table) {\n                    amount = Math.min(amount, 0.9999);\n                    var k = 2 * amount / (1 - amount),\n                        i, x;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        ws_table[i] = (1 + k) * x / (1 + k * Math.abs(x));\n                    }\n                },\n                function(amount, n_samples, ws_table) {\n                    var i, x, y;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        y = ((0.5 * Math.pow((x + 1.4), 2)) - 1) * y >= 0 ? 5.8 : 1.2;\n                        ws_table[i] = tanh(y);\n                    }\n                },\n                function(amount, n_samples, ws_table) {\n                    var i, x, y, a = 1 - amount;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        y = x < 0 ? -Math.pow(Math.abs(x), a + 0.04) : Math.pow(x, a);\n                        ws_table[i] = tanh(y * 2);\n                    }\n                },\n                function(amount, n_samples, ws_table) {\n                    var i, x, y, abx, a = 1 - amount > 0.99 ? 0.99 : 1 - amount;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        abx = Math.abs(x);\n                        if (abx < a) y = abx;\n                        else if (abx > a) y = a + (abx - a) / (1 + Math.pow((abx - a) / (1 - a), 2));\n                        else if (abx > 1) y = abx;\n                        ws_table[i] = sign(x) * y * (1 / ((a + 1) / 2));\n                    }\n                },\n                function(amount, n_samples, ws_table) { // fixed curve, amount doesn't do anything, the distortion is just from the drive\n                    var i, x;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        if (x < -0.08905) {\n                            ws_table[i] = (-3 / 4) * (1 - (Math.pow((1 - (Math.abs(x) - 0.032857)), 12)) + (1 / 3) * (Math.abs(x) -\n                                0.032847)) + 0.01;\n                        } else if (x >= -0.08905 && x < 0.320018) {\n                            ws_table[i] = (-6.153 * (x * x)) + 3.9375 * x;\n                        } else {\n                            ws_table[i] = 0.630035;\n                        }\n                    }\n                },\n                function(amount, n_samples, ws_table) {\n                    var a = 2 + Math.round(amount * 14),\n                        // we go from 2 to 16 bits, keep in mind for the UI\n                        bits = Math.round(Math.pow(2, a - 1)),\n                        // real number of quantization steps divided by 2\n                        i, x;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        ws_table[i] = Math.round(x * bits) / bits;\n                    }\n                }\n            ]\n        }\n    });\n\n    Tuna.prototype.Phaser = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.splitter = this.activateNode = userContext.createChannelSplitter(2);\n        this.filtersL = [];\n        this.filtersR = [];\n        this.feedbackGainNodeL = userContext.createGain();\n        this.feedbackGainNodeR = userContext.createGain();\n        this.merger = userContext.createChannelMerger(2);\n        this.filteredSignal = userContext.createGain();\n        this.output = userContext.createGain();\n        this.lfoL = new userInstance.LFO({\n            target: this.filtersL,\n            callback: this.callback\n        });\n        this.lfoR = new userInstance.LFO({\n            target: this.filtersR,\n            callback: this.callback\n        });\n\n        var i = this.stage;\n        while (i--) {\n            this.filtersL[i] = userContext.createBiquadFilter();\n            this.filtersR[i] = userContext.createBiquadFilter();\n            this.filtersL[i].type = \"allpass\";\n            this.filtersR[i].type = \"allpass\";\n        }\n        this.input.connect(this.splitter);\n        this.input.connect(this.output);\n        this.splitter.connect(this.filtersL[0], 0, 0);\n        this.splitter.connect(this.filtersR[0], 1, 0);\n        this.connectInOrder(this.filtersL);\n        this.connectInOrder(this.filtersR);\n        this.filtersL[this.stage - 1].connect(this.feedbackGainNodeL);\n        this.filtersL[this.stage - 1].connect(this.merger, 0, 0);\n        this.filtersR[this.stage - 1].connect(this.feedbackGainNodeR);\n        this.filtersR[this.stage - 1].connect(this.merger, 0, 1);\n        this.feedbackGainNodeL.connect(this.filtersL[0]);\n        this.feedbackGainNodeR.connect(this.filtersR[0]);\n        this.merger.connect(this.output);\n\n        this.rate = initValue(properties.rate, this.defaults.rate.value);\n        this.baseModulationFrequency = properties.baseModulationFrequency || this.defaults.baseModulationFrequency.value;\n        this.depth = initValue(properties.depth, this.defaults.depth.value);\n        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\n        this.stereoPhase = initValue(properties.stereoPhase, this.defaults.stereoPhase.value);\n\n        this.lfoL.activate(true);\n        this.lfoR.activate(true);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Phaser.prototype = Object.create(Super, {\n        name: {\n            value: \"Phaser\"\n        },\n        stage: {\n            value: 4\n        },\n        defaults: {\n            writable: true,\n            value: {\n                rate: {\n                    value: 0.1,\n                    min: 0,\n                    max: 8,\n                    automatable: false,\n                    type: FLOAT\n                },\n                depth: {\n                    value: 0.6,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                feedback: {\n                    value: 0.7,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                stereoPhase: {\n                    value: 40,\n                    min: 0,\n                    max: 180,\n                    automatable: false,\n                    type: FLOAT\n                },\n                baseModulationFrequency: {\n                    value: 700,\n                    min: 500,\n                    max: 1500,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        callback: {\n            value: function(filters, value) {\n                for (var stage = 0; stage < 4; stage++) {\n                    filters[stage].frequency.value = value;\n                }\n            }\n        },\n        depth: {\n            get: function() {\n                return this._depth;\n            },\n            set: function(value) {\n                this._depth = value;\n                this.lfoL.oscillation = this._baseModulationFrequency * this._depth;\n                this.lfoR.oscillation = this._baseModulationFrequency * this._depth;\n            }\n        },\n        rate: {\n            get: function() {\n                return this._rate;\n            },\n            set: function(value) {\n                this._rate = value;\n                this.lfoL.frequency = this._rate;\n                this.lfoR.frequency = this._rate;\n            }\n        },\n        baseModulationFrequency: {\n            enumerable: true,\n            get: function() {\n                return this._baseModulationFrequency;\n            },\n            set: function(value) {\n                this._baseModulationFrequency = value;\n                this.lfoL.offset = this._baseModulationFrequency;\n                this.lfoR.offset = this._baseModulationFrequency;\n                this._depth = this._depth;\n            }\n        },\n        feedback: {\n            get: function() {\n                return this._feedback;\n            },\n            set: function(value) {\n                this._feedback = value;\n                this.feedbackGainNodeL.gain.value = this._feedback;\n                this.feedbackGainNodeR.gain.value = this._feedback;\n            }\n        },\n        stereoPhase: {\n            get: function() {\n                return this._stereoPhase;\n            },\n            set: function(value) {\n                this._stereoPhase = value;\n                var newPhase = this.lfoL._phase + this._stereoPhase *\n                    Math.PI /\n                    180;\n                newPhase = fmod(newPhase, 2 * Math.PI);\n                this.lfoR._phase = newPhase;\n            }\n        }\n    });\n\n    Tuna.prototype.PingPongDelay = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.wetLevel = userContext.createGain();\n        this.stereoToMonoMix = userContext.createGain();\n        this.feedbackLevel = userContext.createGain();\n        this.output = userContext.createGain();\n        this.delayLeft = userContext.createDelay();\n        this.delayRight = userContext.createDelay();\n\n        this.activateNode = userContext.createGain();\n        this.splitter = userContext.createChannelSplitter(2);\n        this.merger = userContext.createChannelMerger(2);\n\n        this.activateNode.connect(this.splitter);\n        this.splitter.connect(this.stereoToMonoMix, 0, 0);\n        this.splitter.connect(this.stereoToMonoMix, 1, 0);\n        this.stereoToMonoMix.gain.value = .5;\n        this.stereoToMonoMix.connect(this.wetLevel);\n        this.wetLevel.connect(this.delayLeft);\n        this.feedbackLevel.connect(this.delayLeft);\n        this.delayLeft.connect(this.delayRight);\n        this.delayRight.connect(this.feedbackLevel);\n        this.delayLeft.connect(this.merger, 0, 0);\n        this.delayRight.connect(this.merger, 0, 1);\n        this.merger.connect(this.output);\n        this.activateNode.connect(this.output);\n\n        this.delayTimeLeft = properties.delayTimeLeft !== undefined ? properties.delayTimeLeft : this.defaults.delayTimeLeft.value;\n        this.delayTimeRight = properties.delayTimeRight !== undefined ? properties.delayTimeRight : this.defaults.delayTimeRight.value;\n        this.feedbackLevel.gain.value = properties.feedback !== undefined ? properties.feedback : this.defaults.feedback.value;\n        this.wetLevel.gain.value = properties.wetLevel !== undefined ? properties.wetLevel : this.defaults.wetLevel.value;\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.PingPongDelay.prototype = Object.create(Super, {\n        name: {\n            value: \"PingPongDelay\"\n        },\n        delayTimeLeft: {\n            enumerable: true,\n            get: function() {\n                return this._delayTimeLeft;\n            },\n            set: function(value) {\n                this._delayTimeLeft = value;\n                this.delayLeft.delayTime.value = value / 1000;\n            }\n        },\n        delayTimeRight: {\n            enumerable: true,\n            get: function() {\n                return this._delayTimeRight;\n            },\n            set: function(value) {\n                this._delayTimeRight = value;\n                this.delayRight.delayTime.value = value / 1000;\n            }\n        },\n        defaults: {\n            writable: true,\n            value: {\n                delayTimeLeft: {\n                    value: 200,\n                    min: 1,\n                    max: 10000,\n                    automatable: false,\n                    type: INT\n                },\n                delayTimeRight: {\n                    value: 400,\n                    min: 1,\n                    max: 10000,\n                    automatable: false,\n                    type: INT\n                },\n                feedback: {\n                    value: 0.3,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                wetLevel: {\n                    value: 0.5,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        }\n    });\n\n    Tuna.prototype.Tremolo = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.splitter = this.activateNode = userContext.createChannelSplitter(\n                2),\n            this.amplitudeL = userContext.createGain(), this.amplitudeR =\n            userContext.createGain(), this.merger = userContext.createChannelMerger(\n                2), this.output = userContext.createGain();\n        this.lfoL = new userInstance.LFO({\n            target: this.amplitudeL.gain,\n            callback: pipe\n        });\n        this.lfoR = new userInstance.LFO({\n            target: this.amplitudeR.gain,\n            callback: pipe\n        });\n\n        this.input.connect(this.splitter);\n        this.splitter.connect(this.amplitudeL, 0);\n        this.splitter.connect(this.amplitudeR, 1);\n        this.amplitudeL.connect(this.merger, 0, 0);\n        this.amplitudeR.connect(this.merger, 0, 1);\n        this.merger.connect(this.output);\n\n        this.rate = properties.rate || this.defaults.rate.value;\n        this.intensity = initValue(properties.intensity, this.defaults.intensity\n            .value);\n        this.stereoPhase = initValue(properties.stereoPhase, this.defaults\n            .stereoPhase\n            .value);\n\n        this.lfoL.offset = 1 - (this.intensity / 2);\n        this.lfoR.offset = 1 - (this.intensity / 2);\n        this.lfoL.phase = this.stereoPhase * Math.PI / 180;\n\n        this.lfoL.activate(true);\n        this.lfoR.activate(true);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Tremolo.prototype = Object.create(Super, {\n        name: {\n            value: \"Tremolo\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                intensity: {\n                    value: 0.3,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                stereoPhase: {\n                    value: 0,\n                    min: 0,\n                    max: 180,\n                    automatable: false,\n                    type: FLOAT\n                },\n                rate: {\n                    value: 5,\n                    min: 0.1,\n                    max: 11,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        intensity: {\n            enumerable: true,\n            get: function() {\n                return this._intensity;\n            },\n            set: function(value) {\n                this._intensity = value;\n                this.lfoL.offset = 1 - this._intensity / 2;\n                this.lfoR.offset = 1 - this._intensity / 2;\n                this.lfoL.oscillation = this._intensity;\n                this.lfoR.oscillation = this._intensity;\n            }\n        },\n        rate: {\n            enumerable: true,\n            get: function() {\n                return this._rate;\n            },\n            set: function(value) {\n                this._rate = value;\n                this.lfoL.frequency = this._rate;\n                this.lfoR.frequency = this._rate;\n            }\n        },\n        stereoPhase: {\n            enumerable: true,\n            get: function() {\n                return this._rate;\n            },\n            set: function(value) {\n                this._stereoPhase = value;\n                var newPhase = this.lfoL._phase + this._stereoPhase *\n                    Math.PI /\n                    180;\n                newPhase = fmod(newPhase, 2 * Math.PI);\n                this.lfoR.phase = newPhase;\n            }\n        }\n    });\n\n    Tuna.prototype.WahWah = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.envelopeFollower = new userInstance.EnvelopeFollower({\n            target: this,\n            callback: function(context, value) {\n                context.sweep = value;\n            }\n        });\n        this.filterBp = userContext.createBiquadFilter();\n        this.filterPeaking = userContext.createBiquadFilter();\n        this.output = userContext.createGain();\n\n        //Connect AudioNodes\n        this.activateNode.connect(this.filterBp);\n        this.filterBp.connect(this.filterPeaking);\n        this.filterPeaking.connect(this.output);\n\n        //Set Properties\n        this.init();\n        this.automode = initValue(properties.enableAutoMode, this.defaults\n            .automode\n            .value);\n        this.resonance = properties.resonance || this.defaults.resonance\n            .value;\n        this.sensitivity = initValue(properties.sensitivity, this.defaults\n            .sensitivity\n            .value);\n        this.baseFrequency = initValue(properties.baseFrequency, this.defaults\n            .baseFrequency\n            .value);\n        this.excursionOctaves = properties.excursionOctaves || this.defaults\n            .excursionOctaves\n            .value;\n        this.sweep = initValue(properties.sweep, this.defaults.sweep.value);\n\n        this.activateNode.gain.value = 2;\n        this.envelopeFollower.activate(true);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.WahWah.prototype = Object.create(Super, {\n        name: {\n            value: \"WahWah\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                automode: {\n                    value: true,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                baseFrequency: {\n                    value: 0.5,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                excursionOctaves: {\n                    value: 2,\n                    min: 1,\n                    max: 6,\n                    automatable: false,\n                    type: FLOAT\n                },\n                sweep: {\n                    value: 0.2,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                resonance: {\n                    value: 10,\n                    min: 1,\n                    max: 100,\n                    automatable: false,\n                    type: FLOAT\n                },\n                sensitivity: {\n                    value: 0.5,\n                    min: -1,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        activateCallback: {\n            value: function(value) {\n                this.automode = value;\n            }\n        },\n        automode: {\n            get: function() {\n                return this._automode;\n            },\n            set: function(value) {\n                this._automode = value;\n                if (value) {\n                    this.activateNode.connect(this.envelopeFollower.input);\n                    this.envelopeFollower.activate(true);\n                } else {\n                    this.envelopeFollower.activate(false);\n                    this.activateNode.disconnect();\n                    this.activateNode.connect(this.filterBp);\n                }\n            }\n        },\n        filterFreqTimeout: {\n            value: 0\n        },\n        setFilterFreq: {\n            value: function() {\n                try {\n                    this.filterBp.frequency.value = this._baseFrequency + this._excursionFrequency * this._sweep;\n                    this.filterPeaking.frequency.value = this._baseFrequency + this._excursionFrequency * this._sweep;\n                } catch (e) {\n                    clearTimeout(this.filterFreqTimeout);\n                    //put on the next cycle to let all init properties be set\n                    this.filterFreqTimeout = setTimeout(function() {\n                        this.setFilterFreq();\n                    }.bind(this), 0);\n                }\n            }\n        },\n        sweep: {\n            enumerable: true,\n            get: function() {\n                return this._sweep.value;\n            },\n            set: function(value) {\n                this._sweep = Math.pow(value > 1 ? 1 : value <\n                    0 ? 0 :\n                    value,\n                    this._sensitivity);\n                this.setFilterFreq();\n            }\n        },\n        baseFrequency: {\n            enumerable: true,\n            get: function() {\n                return this._baseFrequency;\n            },\n            set: function(value) {\n                this._baseFrequency = 50 * Math.pow(10, value *\n                    2);\n                this._excursionFrequency = Math.min(userContext\n                    .sampleRate /\n                    2,\n                    this.baseFrequency * Math.pow(2, this._excursionOctaves)\n                );\n                this.setFilterFreq();\n            }\n        },\n        excursionOctaves: {\n            enumerable: true,\n            get: function() {\n                return this._excursionOctaves;\n            },\n            set: function(value) {\n                this._excursionOctaves = value;\n                this._excursionFrequency = Math.min(userContext\n                    .sampleRate /\n                    2,\n                    this.baseFrequency * Math.pow(2, this._excursionOctaves)\n                );\n                this.setFilterFreq();\n            }\n        },\n        sensitivity: {\n            enumerable: true,\n            get: function() {\n                return this._sensitivity;\n            },\n            set: function(value) {\n                this._sensitivity = Math.pow(10, value);\n            }\n        },\n        resonance: {\n            enumerable: true,\n            get: function() {\n                return this._resonance;\n            },\n            set: function(value) {\n                this._resonance = value;\n                this.filterPeaking.Q = this._resonance;\n            }\n        },\n        init: {\n            value: function() {\n                this.output.gain.value = 1;\n                this.filterPeaking.type = \"peaking\";\n                this.filterBp.type = \"bandpass\";\n                this.filterPeaking.frequency.value = 100;\n                this.filterPeaking.gain.value = 20;\n                this.filterPeaking.Q.value = 5;\n                this.filterBp.frequency.value = 100;\n                this.filterBp.Q.value = 1;\n            }\n        }\n    });\n\n    Tuna.prototype.EnvelopeFollower = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.jsNode = this.output = userContext.createScriptProcessor(\n            this.buffersize,\n            1, 1);\n\n        this.input.connect(this.output);\n\n        this.attackTime = initValue(properties.attackTime, this.defaults\n            .attackTime\n            .value);\n        this.releaseTime = initValue(properties.releaseTime, this.defaults\n            .releaseTime\n            .value);\n        this._envelope = 0;\n        this.target = properties.target || {};\n        this.callback = properties.callback || function() {};\n    };\n    Tuna.prototype.EnvelopeFollower.prototype = Object.create(Super, {\n        name: {\n            value: \"EnvelopeFollower\"\n        },\n        defaults: {\n            value: {\n                attackTime: {\n                    value: 0.003,\n                    min: 0,\n                    max: 0.5,\n                    automatable: false,\n                    type: FLOAT\n                },\n                releaseTime: {\n                    value: 0.5,\n                    min: 0,\n                    max: 0.5,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        buffersize: {\n            value: 256\n        },\n        envelope: {\n            value: 0\n        },\n        sampleRate: {\n            value: 44100\n        },\n        attackTime: {\n            enumerable: true,\n            get: function() {\n                return this._attackTime;\n            },\n            set: function(value) {\n                this._attackTime = value;\n                this._attackC = Math.exp(-1 / this._attackTime *\n                    this.sampleRate /\n                    this.buffersize);\n            }\n        },\n        releaseTime: {\n            enumerable: true,\n            get: function() {\n                return this._releaseTime;\n            },\n            set: function(value) {\n                this._releaseTime = value;\n                this._releaseC = Math.exp(-1 / this._releaseTime *\n                    this.sampleRate /\n                    this.buffersize);\n            }\n        },\n        callback: {\n            get: function() {\n                return this._callback;\n            },\n            set: function(value) {\n                if (typeof value === \"function\") {\n                    this._callback = value;\n                } else {\n                    console.error(\"tuna.js: \" + this.name +\n                        \": Callback must be a function!\");\n                }\n            }\n        },\n        target: {\n            get: function() {\n                return this._target;\n            },\n            set: function(value) {\n                this._target = value;\n            }\n        },\n        activate: {\n            value: function(doActivate) {\n                this.activated = doActivate;\n                if (doActivate) {\n                    this.jsNode.connect(userContext.destination);\n                    this.jsNode.onaudioprocess = this.returnCompute(\n                        this);\n                } else {\n                    this.jsNode.disconnect();\n                    this.jsNode.onaudioprocess = null;\n                }\n            }\n        },\n        returnCompute: {\n            value: function(instance) {\n                return function(event) {\n                    instance.compute(event);\n                };\n            }\n        },\n        compute: {\n            value: function(event) {\n                var count = event.inputBuffer.getChannelData(0)\n                    .length,\n                    channels = event.inputBuffer.numberOfChannels,\n                    current, chan, rms, i;\n                chan = rms = i = 0;\n                if (channels > 1) { //need to mixdown\n                    for (i = 0; i < count; ++i) {\n                        for (; chan < channels; ++chan) {\n                            current = event.inputBuffer.getChannelData(chan)[i];\n                            rms += (current * current) / channels;\n                        }\n                    }\n                } else {\n                    for (i = 0; i < count; ++i) {\n                        current = event.inputBuffer.getChannelData(0)[i];\n                        rms += (current * current);\n                    }\n                }\n                rms = Math.sqrt(rms);\n\n                if (this._envelope < rms) {\n                    this._envelope *= this._attackC;\n                    this._envelope += (1 - this._attackC) * rms;\n                } else {\n                    this._envelope *= this._releaseC;\n                    this._envelope += (1 - this._releaseC) *\n                        rms;\n                }\n                this._callback(this._target, this._envelope);\n            }\n        }\n    });\n\n    Tuna.prototype.LFO = function(properties) {\n        //Instantiate AudioNode\n        this.output = userContext.createScriptProcessor(256, 1, 1);\n        this.activateNode = userContext.destination;\n\n        //Set Properties\n        this.frequency = initValue(properties.frequency, this.defaults.frequency\n            .value);\n        this.offset = initValue(properties.offset, this.defaults.offset.value);\n        this.oscillation = initValue(properties.oscillation, this.defaults\n            .oscillation\n            .value);\n        this.phase = initValue(properties.phase, this.defaults.phase.value);\n        this.target = properties.target || {};\n        this.output.onaudioprocess = this.callback(properties.callback ||\n            function() {});\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.LFO.prototype = Object.create(Super, {\n        name: {\n            value: \"LFO\"\n        },\n        bufferSize: {\n            value: 256\n        },\n        sampleRate: {\n            value: 44100\n        },\n        defaults: {\n            value: {\n                frequency: {\n                    value: 1,\n                    min: 0,\n                    max: 20,\n                    automatable: false,\n                    type: FLOAT\n                },\n                offset: {\n                    value: 0.85,\n                    min: 0,\n                    max: 22049,\n                    automatable: false,\n                    type: FLOAT\n                },\n                oscillation: {\n                    value: 0.3,\n                    min: -22050,\n                    max: 22050,\n                    automatable: false,\n                    type: FLOAT\n                },\n                phase: {\n                    value: 0,\n                    min: 0,\n                    max: 2 * Math.PI,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        frequency: {\n            get: function() {\n                return this._frequency;\n            },\n            set: function(value) {\n                this._frequency = value;\n                this._phaseInc = 2 * Math.PI * this._frequency *\n                    this.bufferSize /\n                    this.sampleRate;\n            }\n        },\n        offset: {\n            get: function() {\n                return this._offset;\n            },\n            set: function(value) {\n                this._offset = value;\n            }\n        },\n        oscillation: {\n            get: function() {\n                return this._oscillation;\n            },\n            set: function(value) {\n                this._oscillation = value;\n            }\n        },\n        phase: {\n            get: function() {\n                return this._phase;\n            },\n            set: function(value) {\n                this._phase = value;\n            }\n        },\n        target: {\n            get: function() {\n                return this._target;\n            },\n            set: function(value) {\n                this._target = value;\n            }\n        },\n        activate: {\n            value: function(doActivate) {\n                if (!doActivate) {\n                    this.output.disconnect(userContext.destination);\n                } else {\n                    this.output.connect(userContext.destination);\n                }\n            }\n        },\n        callback: {\n            value: function(callback) {\n                var that = this;\n                return function() {\n                    that._phase += that._phaseInc;\n                    if (that._phase > 2 * Math.PI) {\n                        that._phase = 0;\n                    }\n                    callback(that._target, that._offset +\n                        that._oscillation *\n                        Math.sin(that._phase));\n                };\n            }\n        }\n    });\n\n    Tuna.toString = Tuna.prototype.toString = function() {\n        return \"Please visit https://github.com/Theodeus/tuna/wiki for instructions on how to use Tuna.js\";\n    };\n})(this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/tunajs/tuna.js\n ** module id = 16\n ** module chunks = 0\n **/"],"sourceRoot":""}