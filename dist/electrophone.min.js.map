{"version":3,"sources":["webpack:///electrophone.min.js","webpack:///webpack/bootstrap 4913d1e1f994efdfc3bd?5e8b","webpack:///./lib/index.js?bdd8","webpack:///./lib/src/core/Constants.js?1533","webpack:///./lib/src/core/Effect.js?9029","webpack:///./lib/src/core/Module.js?8477","webpack:///./lib/src/core/SoundSource.js?a286","webpack:///./lib/src/modules/index.js?d1de","webpack:///./lib/src/properties/index.js?66cc","webpack:///./lib/ElectroPhone.js?6a73","webpack:///./lib/src/Synth.js?1df5","webpack:///./lib/src/core/EffectManager.js?6bc5","webpack:///./lib/src/core/Voice.js?0f55","webpack:///./lib/src/modules/Effects/Bitcrusher.js?679a","webpack:///./lib/src/modules/Effects/Delay.js?c062","webpack:///./lib/src/modules/Effects/Filter.js?92e5","webpack:///./lib/src/modules/Effects/MoogFilter.js?0e04","webpack:///./lib/src/modules/Effects/Overdrive.js?d8c0","webpack:///./lib/src/modules/Effects/PingPongDelay.js?c009","webpack:///./lib/src/modules/Effects/Tremolo.js?6a20","webpack:///./lib/src/modules/Envelope.js?bc07","webpack:///./lib/src/modules/Master.js?4b43","webpack:///./lib/src/modules/Pan.js?598d","webpack:///./lib/src/modules/SoundSources/Modulator.js?1778","webpack:///./lib/src/modules/SoundSources/Noise.js?51b1","webpack:///./lib/src/modules/SoundSources/Oscillator.js?7607","webpack:///./lib/src/properties/BitcrusherProps.js?46a4","webpack:///./lib/src/properties/DefaultProps.js?1c7f","webpack:///./lib/src/properties/DelayProps.js?4e60","webpack:///./lib/src/properties/EnvelopeProps.js?e389","webpack:///./lib/src/properties/FilterProps.js?2b44","webpack:///./lib/src/properties/ModulatorProps.js?a20a","webpack:///./lib/src/properties/MoogFilterProps.js?c238","webpack:///./lib/src/properties/NoiseProps.js?df91","webpack:///./lib/src/properties/OscillatorProps.js?d125","webpack:///./lib/src/properties/OverdriveProps.js?18f0","webpack:///./lib/src/properties/PanProps.js?98fe","webpack:///./lib/src/properties/PingPongDelayProps.js?4dd0","webpack:///./lib/src/properties/TremoloProps.js?693e","webpack:///./~/stereo-panner-node/lib/curve.js?fccc","webpack:///./~/stereo-panner-node/lib/stereo-panner-impl.js?a0c0","webpack:///./~/stereo-panner-node/lib/stereo-panner-node.js?036d","webpack:///./~/stereo-panner-shim/lib/stereo-panner-shim.js?5dc8","webpack:///./~/tunajs/tuna.js?3b7b"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_ElectroPhone","_ElectroPhone2","win","window","EP","TYPES","MASTER","OSCILLATOR","NOISE","MODULATOR","ENVELOPE","PAN","FILTER","DELAY","PINGPONGDELAY","TREMOLO","OVERDRIVE","BITCRUSHER","MOOGFILTER","CONST","ADSR","NOISE_WHITE","NOISE_PINK","NOISE_BROWN","WAVE_SINE","WAVE_SQUARE","WAVE_SAWTOOTH","WAVE_TRIANLGE","WAVE_CUSTOM","FILTER_LOWPASS","FILTER_HIGHPASS","FILTER_BANDPASS","FILTER_LOWSHELF","FILTER_HIGHSHELF","FILTER_PEAKING","FILTER_NOTCH","FILTER_ALLPASS","MODULATOR_TARGET_FREQ","MODULATOR_TARGET_DETUNE","ENVELOPE_TARGET_GAIN","ENVELOPE_TARGET_FREQ","ENVELOPE_TARGET_DETUNE","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_Constants","_Module2","_Module3","_EffectManager","_EffectManager2","Effect","_Module","audioContext","props","name","this","_this","main","mainEffect","setMainEffect","type","effectManager","setMainProperties","_this2","keys","forEach","e","createGain","getLineIn","sourceType","source","target","input","getLineOut","output","getEnvelopeTarget","ret","gain","filter","_interopRequireWildcard","newObj","key","hasOwnProperty","_typeof","Symbol","iterator","_extends","assign","i","arguments","length","_properties","Props","Module","envelope","setupProperties","level","toString","properties","propsHandler","specificProps","moduleProperties","DefaultProps","setProperty","getRealProperties","propName","updateProperties","realProp","l","undefined","propKey","propVal","propConfig","defaultValue","connect","disconnect","SoundSource","defaultLineInProperty","setDetune","detune","noteOn","start","noteOff","release","stop","_Master","defineProperty","get","_Envelope","_Pan","_Oscillator","_Modulator","_Noise","_Filter","_Delay","_PingPongDelay","_Tremolo","_Overdrive","_Bitcrusher","_MoogFilter","_DefaultProps","_ModulatorProps","_EnvelopeProps","_PanProps","_OscillatorProps","_NoiseProps","_FilterProps","_DelayProps","_PingPongDelayProps","_TremoloProps","_OverdriveProps","_BitcrusherProps","_MoogFilterProps","_modules","Modules","_Synth","_Synth2","notes","methods","synth","ElectroPhone","isPlaying","getModules","modulesConfig","currentModule","Error","update","master","adsr","destroy","destroyModule","play","frequency","link","getModuleProperties","moduleType","moduleProps","concat","map","prop","describeModules","reduce","result","getFrequency","note","octave","octaveD","parseInt","noteD","indexOf","delta","exp","freq","Math","pow","parseFloat","toFixed","getNotes","_Voice","_Voice2","Synth","voices","spectrum","updateSpectrum","resetSpectrum","analyser","javascriptNode","createGainNode","createDelayNode","createDelay","createSpectrum","attack","decay","sustain","SMOOTHING","FFT_SIZE","createScriptProcessor","destination","createAnalyser","smoothingTimeConstant","fftSize","minDecibels","maxDecibels","label","String","updateModule","addModule","removeModule","_this3","frequencyData","freqBufferLength","frequencyBinCount","Uint8Array","onaudioprocess","getByteFrequencyData","_tunajs","_tunajs2","EffectManager","_SoundSource","_SoundSource2","Voice","soundSources","setupModules","linkModules","modConf","mod","push","currentModuleType","destinationModule","dest","lineOut","setEnvelope","setNote","_this4","getReleaseTime","resetEnvelope","_Effect2","_Effect3","Bitcrusher","_Effect","bits","normfreq","bufferSize","Delay","dryLevel","dry","wetLevel","wet","feedback","cutoff","delayTime","bypass","Filter","Q","q","filterGain","filterType","MoogFilter","resonance","Overdrive","outputGain","drive","curveAmount","algorithmIndex","PingPongDelay","delayTimeLeft","delayTimeRight","Tremolo","intensity","rate","stereoPhase","Envelope","now","currentTime","attackLevel","sustainLevel","attackEnd","t","setValueAtTime","linearRampToValueAtTime","setTargetAtTime","cancelScheduledValues","Master","Pan","createStereoPanner","pan","_SoundSource3","Modulator","createOscillator","wave","f","Noise","createBufferSource","setColor","color","buffer","white","pink","brown","noiseBuffer","getNoiseBuffer","getBufferSize","getChannelData","random","b0","b1","b2","b3","b4","b5","b6","lastOut","sampleRate","createBuffer","loop","Oscillator","BitcrusherProps","bounds","step","DelayProps","EnvelopeProps","FilterProps","ModulatorProps","MoogFilterProps","NoiseProps","OscillatorProps","OverdriveProps","PanProps","PingPongDelayProps","TremoloProps","WS_CURVE_SIZE","curveL","Float32Array","curveR","cos","PI","sin","L","R","global","StereoPannerImpl","inlet","createChannelSplitter","_pan","_wsL","createWaveShaper","_wsR","_L","_R","outlet","createChannelMerger","channelCount","channelCountMode","curve","_isConnected","_dc1buffer","_dc1","set","AudioNode","StereoPanner","impl","defineProperties","node","AudioContext","webkitAudioContext","StereoPannerNode","definition","Tuna","context","console","log","connectify","userContext","userInstance","shimConnect","Array","shift","apply","Super","isPrototypeOf","slice","unshift","oconnect","__connectified__","proto","getPrototypeOf","dbToWAVolume","db","max","round","fmod","x","y","tmp","tmp2","pY","l2","toExponential","match","sign","abs","tanh","n","initValue","userVal","defaultVal","pipe","param","val","activate","doActivate","activateNode","activateCallback","_bypass","_lastBypassValue","connectInOrder","nodeArray","error","getDefaults","defaults","automate","property","duration","startTime","method","dur","_is","automatable","FLOAT","BOOLEAN","STRING","INT","define","processor","phaser","last","inputBuffer","outputBuffer","floor","min","Cabinet","convolver","newConvolver","impulsePath","makeupNode","makeupGain","Convolver","impulse","Chorus","attenuator","splitter","delayL","delayR","feedbackGainNodeLR","feedbackGainNodeRL","merger","lfoL","LFO","callback","lfoR","delay","depth","phase","_delay","offset","_depth","oscillation","_feedback","_rate","Compressor","compNode","createDynamicsCompressor","automakeup","threshold","ratio","knee","computeMakeup","magicCoefficient","_automakeup","createConvolver","filterLow","createBiquadFilter","filterHigh","highCut","lowCut","xhr","XMLHttpRequest","open","responseType","onreadystatechange","readyState","status","decodeAudioData","response","send","feedbackNode","in1","in2","in3","in4","out1","out2","out3","out4","fb","inputFactor","inputDrive","waveshaper","outputDrive","ws_table","k_nSamples","scaled","_drive","_curveAmount","_algorithmIndex","waveshaperAlgorithms","_outputGain","amount","n_samples","k","a","abx","Phaser","filtersL","filtersR","feedbackGainNodeL","feedbackGainNodeR","filteredSignal","stage","baseModulationFrequency","filters","_baseModulationFrequency","_stereoPhase","newPhase","_phase","stereoToMonoMix","feedbackLevel","delayLeft","delayRight","_delayTimeLeft","_delayTimeRight","amplitudeL","amplitudeR","_intensity","WahWah","envelopeFollower","EnvelopeFollower","sweep","filterBp","filterPeaking","init","automode","enableAutoMode","sensitivity","baseFrequency","excursionOctaves","_automode","filterFreqTimeout","setFilterFreq","_baseFrequency","_excursionFrequency","_sweep","clearTimeout","setTimeout","bind","_sensitivity","_excursionOctaves","_resonance","jsNode","buffersize","attackTime","releaseTime","_envelope","_attackTime","_attackC","_releaseTime","_releaseC","_callback","_target","activated","returnCompute","event","compute","current","chan","rms","count","channels","numberOfChannels","sqrt","_frequency","_phaseInc","_offset","_oscillation","that"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAE,WACAE,GAAAJ,EACAK,QAAA,EAUA,OANAP,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,QAAA,EAGAF,EAAAD,QAvBA,GAAAD,KAqCA,OATAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,GAGAV,EAAA,KDMM,SAASI,EAAQD,EAASH,GAE/B,YAUA,SAASW,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GARvFT,EAAQU,YAAa,EEhDtBb,EAAA,GACA,IAAAe,GAAAf,EAAA,GFqDKgB,EAAiBL,EAAuBI,GEnDvCE,EAAMC,UACZD,GAAIE,GAAJH,aFyDCb,aAAkBa,cAIb,SAASZ,EAAQD,GGjEvB,YHqECA,GAAQU,YAAa,CGnEtB,IAAMO,IACEC,OAAQ,SACRC,WAAY,aACZC,MAAO,QACPC,UAAW,YACXC,SAAU,WACVC,IAAK,MACLC,OAAQ,SACRC,MAAO,QACPC,cAAe,gBACfC,QAAS,UACTC,UAAW,YACXC,WAAY,aACZC,WAAY,cAEhBC,GACIb,OAAQ,SACRc,KAAM,OAENC,YAAa,QACbC,WAAY,OACZC,YAAa,QAEbC,UAAW,OACXC,YAAa,SACbC,cAAe,WACfC,cAAe,WACfC,YAAa,SAEbC,eAAgB,UAChBC,gBAAiB,WACjBC,gBAAiB,WACjBC,gBAAiB,WACjBC,iBAAkB,YAClBC,eAAgB,UAChBC,aAAc,QACdC,eAAgB,UAEhBC,sBAAuB,YACvBC,wBAAyB,SAEzBC,qBAAsB,OACtBC,qBAAsB,YACtBC,uBAAwB,SHuE/BrD,GGpEQiB,QHqERjB,EGrEe+B,SHyEV,SAAS9B,EAAQD,EAASH,GAE/B,YAcA,SAASW,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAEvF,QAAS6C,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAMvD,GAAQ,IAAKuD,EAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOxD,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BuD,EAAPvD,EAElO,QAASyD,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIN,WAAU,iEAAoEM,GAAeD,GAASE,UAAYC,OAAOC,OAAOH,GAAcA,EAAWC,WAAaG,aAAeC,MAAON,EAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,IAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,EAAUC,GAAcD,EAASW,UAAYV,GAlBje/D,EAAQU,YAAa,CI7HtB,IAAAgE,GAAA7E,EAAA,GACA8E,EAAA9E,EAAA,GJkIK+E,EAAWpE,EAAuBmE,GIjIvCE,EAAAhF,EAAA,GJqIKiF,EAAkBtE,EAAuBqE,GInIxCE,EJ6IQ,SAAUC,GI3IpB,QAAAD,GAAaE,EAAcC,EAAOC,GAAM7B,EAAA8B,KAAAL,EAAA,IAAAM,GAAA3B,EAAA0B,KACpCJ,EAAA5E,KAAAgF,KAAMH,EAAcC,EAAOC,GADS,OAEpCE,GAAKC,KAAO,KACZD,EAAKE,WAAa,KAHkBF,EJoMvC,MAxDAxB,GAAUkB,EAAQC,GAYlBD,EAAOf,UIlJRwB,cJkJkC,SIlJnBC,EAAMF,EAAYL,GAC7B,GAAMQ,GAAgBZ,aAAcM,KAAKH,aACzCG,MAAKE,KAAO,GAAII,GAAcD,GAAMP,GACpCE,KAAKG,WAAaH,KAAKE,KAAKC,IJqJ/BR,EAAOf,UIlJR2B,kBJkJsC,SIlJnBT,GAAO,GAAAU,GAAAR,IACtBnB,QAAO4B,KAAKX,GAAOY,QAAQ,SAACC,GACpBH,EAAKN,KAAKS,KACVH,EAAKN,KAAKS,GAAKb,EAAMa,OJyJhChB,EAAOf,UIpJRgC,WJoJ+B,WInJ3B,OAAO,GJuJVjB,EAAOf,UIpJRiC,UJoJ8B,SIpJnBC,EAAYC,GACnB,MAAID,KAAexB,EAAAzD,MAAMI,UACd+D,KAAKG,WAAWY,EAAOC,QAEvBhB,KAAKE,KAAKe,OJwJxBtB,EAAOf,UIpJRsC,WJoJ+B,WInJ3B,MAAOlB,MAAKE,KAAKiB,QJuJpBxB,EAAOf,UIpJRwC,kBJoJsC,SIpJnBJ,GACf,GAAIK,GAAM,IAQV,OANe,SAAXL,EACAK,EAAMrB,KAAKE,KAAKiB,OAAOG,KAChBtB,KAAKE,MAAQF,KAAKG,YAAcH,KAAKG,WAAWa,KACvDK,EAAMrB,KAAKE,KAAKqB,OAAOP,IAGpBK,GJuJH1B,GACTH,aAEF5E,cIrJc+E,GJyJT,SAAS9E,EAAQD,EAASH,GAE/B,YAYA,SAAS+G,GAAwBnG,GAAO,GAAIA,GAAOA,EAAIC,WAAc,MAAOD,EAAc,IAAIoG,KAAa,IAAW,MAAPpG,EAAe,IAAK,GAAIqG,KAAOrG,GAAWwD,OAAOD,UAAU+C,eAAe3G,KAAKK,EAAKqG,KAAMD,EAAOC,GAAOrG,EAAIqG,GAAgC,OAAtBD,cAAiBpG,EAAYoG,EAElQ,QAASvD,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAZhHzD,EAAQU,YAAa,CAErB,IAAIsG,GAA4B,kBAAXC,SAAoD,gBAApBA,QAAOC,SAAwB,SAAUzG,GAAO,aAAcA,IAAS,SAAUA,GAAO,MAAOA,IAAyB,kBAAXwG,SAAyBxG,EAAI0D,cAAgB8C,QAAUxG,IAAQwG,OAAOjD,UAAY,eAAkBvD,IAElQ0G,EAAWlD,OAAOmD,QAAU,SAAUhB,GAAU,IAAK,GAAIiB,GAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,GAAIlB,GAASmB,UAAUD,EAAI,KAAK,GAAIP,KAAOX,GAAclC,OAAOD,UAAU+C,eAAe3G,KAAK+F,EAAQW,KAAQV,EAAOU,GAAOX,EAAOW,IAAY,MAAOV,IKzNxPoB,EAAA3H,EAAA,GAAY4H,EL6NCb,EAAwBY,GK3N/BE,ELiOQ,WK/NV,QAAAA,GAAazC,EAAcC,EAAOC,GAAM7B,EAAA8B,KAAAsC,GACpCtC,KAAKD,KAAOA,EACZC,KAAKH,aAAeA,EACpBG,KAAKsB,KAAO,KACZtB,KAAKuC,SAAW,KAChBvC,KAAKE,KAAO,KAEZF,KAAKwC,gBAAgB1C,GAErBE,KAAKY,WAAWZ,KAAKyC,OLqUxB,MAhGAH,GAAO1D,UKlOR8D,SLkO6B,WKjOzB,MAAO1C,MAAKD,MLqOfuC,EAAO1D,UKlOR4D,gBLkOoC,SKlOnB1C,GAAO,GAAAG,GAAAD,KAChB2C,EAAa7C,MACb8C,EAAe5C,KAAK0C,WAAa,QACjCG,EAAgBR,EAAMO,GACtBE,QAEJA,QAAwBT,EAAMU,aAAiBF,GAC/ChE,OAAO4B,KAAKqC,GAAkBpC,QAAQ,SAACC,GACnCV,EAAK+C,YAAYrC,EAAGgC,EAAWhC,GAAImC,EAAiBnC,OLwO3D2B,EAAO1D,UKpORqE,kBLoOsC,SKpOnBC,GACf,OAAQA,GACJ,IAAK,QAAU,MAAO,MACtB,KAAK,OAAS,MAAO,WACrB,KAAK,OAAS,MAAO,MACrB,KAAK,IAAM,MAAO,GAClB,KAAK,OAAS,MAAO,KACrB,SAAU,MAAOA,KL8OxBZ,EAAO1D,UK1ORuE,iBL0OqC,SK1OnBrD,GAAO,GAAAU,GAAAR,IACrBnB,QAAO4B,KAAKX,GAAOY,QAAQ,SAAAvF,GACvB,GAAIiI,GAAW5C,EAAKyC,kBAAkB9H,EAEtC,IAAIqF,EAAKN,MAAQkD,GAAY5C,EAAKrF,KAAO2E,EAAM3E,GAC3C,GAAiB,SAAbiI,GAAuB5C,EAAKc,MAAQd,EAAKc,KAAKA,KAAM,CACpD,GAAI+B,GAAKvD,EAAM3E,IAAM,EAAK2E,EAAM3E,GAAK,IAAM,GAC3CqF,GAAKc,KAAKA,KAAKtC,MAAQqE,EAAI,QACIC,UAAxB9C,EAAKN,KAAKkD,IAAyDE,SAA9B9C,EAAKN,KAAKkD,GAAUpE,MAChEwB,EAAKN,KAAKkD,GAAUpE,MAAQc,EAAM3E,GACHmI,SAAxB9C,EAAKN,KAAKkD,KACjB5C,EAAKN,KAAKkD,GAAYtD,EAAM3E,OLkP3CmH,EAAO1D,UK5ORoE,YL4OgC,SK5OnBO,EAASC,EAASC,GAC3BzD,KAAKuD,GAAW,KACZE,EAAWpD,OAAQ,mBAAOmD,GAAP,YAAA5B,EAAO4B,MAAYC,EAAWpD,KACjDL,KAAKuD,GAAWC,EACmBF,SAA5BG,EAAWC,eAClB1D,KAAKuD,GAAWE,EAAWC,eLgPlCpB,EAAO1D,UK5ORgC,WL4O+B,SK5OnB6B,GACR,GAAIY,GAAKZ,GAAS,EAAMA,EAAQ,IAAM,GACtCzC,MAAKsB,KAAOtB,KAAKH,aAAae,aAC9BZ,KAAKuC,SAAWvC,KAAKH,aAAae,aAClCZ,KAAKsB,KAAKA,KAAKtC,MAAQqE,EAAI,IAC3BrD,KAAKuC,SAASjB,KAAKtC,MAAQ,EAE3BgB,KAAKuC,SAASoB,QAAQ3D,KAAKsB,OL+O9BgB,EAAO1D,UK5ORgF,WL4O+B,WK3O3B5D,KAAKsB,KAAKsC,cL+ObtB,EAAO1D,UK5ORiC,UL4O8B,WK3O1B,MAAOb,MAAKE,ML+OfoC,EAAO1D,UK5ORsC,WL4O+B,WK3O3B,MAAOlB,MAAKsB,ML+OfgB,EAAO1D,UK5ORwC,kBL4OsC,SK5OnBJ,GACf,GAAIK,GAAM,IAOV,OALIrB,MAAKE,MAAQF,KAAKE,KAAKc,GACvBK,EAAMrB,KAAKE,KAAKc,GACE,SAAXA,GAAqBhB,KAAKsB,OACjCD,EAAMrB,KAAKuC,SAASjB,MAEjBD,GL+OHiB,IAGX1H,cK9Oc0H,GLkPT,SAASzH,EAAQD,EAASH,GMzVhC,YNqWC,SAASW,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAEvF,QAAS6C,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAMvD,GAAQ,IAAKuD,EAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOxD,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BuD,EAAPvD,EAElO,QAASyD,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIN,WAAU,iEAAoEM,GAAeD,GAASE,UAAYC,OAAOC,OAAOH,GAAcA,EAAWC,WAAaG,aAAeC,MAAON,EAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,IAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,EAAUC,GAAcD,EAASW,UAAYV,GAdje/D,EAAQU,YAAa,CM3VtB,IAAAgE,GAAA7E,EAAA,GACA8E,EAAA9E,EAAA,GNgWK+E,EAAWpE,EAAuBmE,GM9VjCsE,ENwWa,SAAUjE,GMtWzB,QAAAiE,GAAahE,EAAcC,EAAOC,GAAM7B,EAAA8B,KAAA6D,EAAA,IAAA5D,GAAA3B,EAAA0B,KACpCJ,EAAA5E,KAAAgF,KAAMH,EAAcC,EAAOC,GADS,OAGpCE,GAAK6D,sBAAwB,YAHO7D,ENwYvC,MAjCAxB,GAAUoF,EAAajE,GAWvBiE,EAAYjF,UM5WbmF,UN4WmC,WM3W3B/D,KAAKE,MAAQF,KAAKE,KAAK8D,SACvBhE,KAAKE,KAAK8D,OAAOhF,MAAQgB,KAAKgE,SNgXrCH,EAAYjF,UM5WbqF,ON4WgC,WM3W5BjE,KAAKE,KAAKgE,MAAM,IN+WnBL,EAAYjF,UM5WbuF,QN4WiC,SM5WxBC,GACLpE,KAAKE,KAAKmE,KAAKD,IN+WlBP,EAAYjF,UM5WbiC,UN4WmC,SM5WxBC,EAAYC,GACnB,MAAID,KAAexB,EAAAzD,MAAMI,UACd+D,KAAKE,KAAKa,EAAOC,QAEjBhB,KAAKE,KAAKF,KAAK8D,wBNgXtBD,GACTrE,aAEF5E,cM9WciJ,GNkXT,SAAShJ,EAAQD,EAASH,GOtZhC,YPihBC,SAASW,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAvHvFT,EAAQU,YAAa,CAErB,IAAIgJ,GAAU7J,EAAoB,GAElCoE,QAAO0F,eAAe3J,EAAS,UAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuBkJ,GAAvBlJ,aAIX,IAAIqJ,GAAYhK,EAAoB,GAEpCoE,QAAO0F,eAAe3J,EAAS,YAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuBqJ,GAAvBrJ,aAIX,IAAIsJ,GAAOjK,EAAoB,GAE/BoE,QAAO0F,eAAe3J,EAAS,OAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuBsJ,GAAvBtJ,aAIX,IAAIuJ,GAAclK,EAAoB,GAEtCoE,QAAO0F,eAAe3J,EAAS,cAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuBuJ,GAAvBvJ,aAIX,IAAIwJ,GAAanK,EAAoB,GAErCoE,QAAO0F,eAAe3J,EAAS,aAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuBwJ,GAAvBxJ,aAIX,IAAIyJ,GAASpK,EAAoB,GAEjCoE,QAAO0F,eAAe3J,EAAS,SAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuByJ,GAAvBzJ,aAIX,IAAI0J,GAAUrK,EAAoB,GAElCoE,QAAO0F,eAAe3J,EAAS,UAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuB0J,GAAvB1J,aAIX,IAAI2J,GAAStK,EAAoB,GAEjCoE,QAAO0F,eAAe3J,EAAS,SAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuB2J,GAAvB3J,aAIX,IAAI4J,GAAiBvK,EAAoB,GAEzCoE,QAAO0F,eAAe3J,EAAS,iBAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuB4J,GAAvB5J,aAIX,IAAI6J,GAAWxK,EAAoB,GAEnCoE,QAAO0F,eAAe3J,EAAS,WAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuB6J,GAAvB7J,aAIX,IAAI8J,GAAazK,EAAoB,GAErCoE,QAAO0F,eAAe3J,EAAS,aAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuB8J,GAAvB9J,aAIX,IAAI+J,GAAc1K,EAAoB,GAEtCoE,QAAO0F,eAAe3J,EAAS,cAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuB+J,GAAvB/J,aAIX,IAAIgK,GAAc3K,EAAoB,GAEtCoE,QAAO0F,eAAe3J,EAAS,cAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuBgK,GAAvBhK,eAQN,SAASP,EAAQD,EAASH,GQrhBhC,YRgpBC,SAASW,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAvHvFT,EAAQU,YAAa,CAErB,IAAI+J,GAAgB5K,EAAoB,GAExCoE,QAAO0F,eAAe3J,EAAS,gBAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuBiK,GAAvBjK,aAIX,IAAIkK,GAAkB7K,EAAoB,GAE1CoE,QAAO0F,eAAe3J,EAAS,kBAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuBkK,GAAvBlK,aAIX,IAAImK,GAAiB9K,EAAoB,GAEzCoE,QAAO0F,eAAe3J,EAAS,iBAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuBmK,GAAvBnK,aAIX,IAAIoK,GAAY/K,EAAoB,GAEpCoE,QAAO0F,eAAe3J,EAAS,YAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuBoK,GAAvBpK,aAIX,IAAIqK,GAAmBhL,EAAoB,GAE3CoE,QAAO0F,eAAe3J,EAAS,mBAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuBqK,GAAvBrK,aAIX,IAAIsK,GAAcjL,EAAoB,GAEtCoE,QAAO0F,eAAe3J,EAAS,cAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuBsK,GAAvBtK,aAIX,IAAIuK,GAAelL,EAAoB,GAEvCoE,QAAO0F,eAAe3J,EAAS,eAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuBuK,GAAvBvK,aAIX,IAAIwK,GAAcnL,EAAoB,GAEtCoE,QAAO0F,eAAe3J,EAAS,cAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuBwK,GAAvBxK,aAIX,IAAIyK,GAAsBpL,EAAoB,GAE9CoE,QAAO0F,eAAe3J,EAAS,sBAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuByK,GAAvBzK,aAIX,IAAI0K,GAAgBrL,EAAoB,GAExCoE,QAAO0F,eAAe3J,EAAS,gBAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuB0K,GAAvB1K,aAIX,IAAI2K,GAAkBtL,EAAoB,GAE1CoE,QAAO0F,eAAe3J,EAAS,kBAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuB2K,GAAvB3K,aAIX,IAAI4K,GAAmBvL,EAAoB,GAE3CoE,QAAO0F,eAAe3J,EAAS,mBAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuB4K,GAAvB5K,aAIX,IAAI6K,GAAmBxL,EAAoB,GAE3CoE,QAAO0F,eAAe3J,EAAS,mBAC7BqE,YAAY,EACZuF,IAAK,WACH,MAAOpJ,GAAuB6K,GAAvB7K,eAQN,SAASP,EAAQD,EAASH,GAE/B,YAoBA,SAASW,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAEvF,QAASmG,GAAwBnG,GAAO,GAAIA,GAAOA,EAAIC,WAAc,MAAOD,EAAc,IAAIoG,KAAa,IAAW,MAAPpG,EAAe,IAAK,GAAIqG,KAAOrG,GAAWwD,OAAOD,UAAU+C,eAAe3G,KAAKK,EAAKqG,KAAMD,EAAOC,GAAOrG,EAAIqG,GAAgC,OAAtBD,cAAiBpG,EAAYoG,EAElQ,QAASvD,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAtBhHzD,EAAQU,YAAa,CAErB,IAAIyG,GAAWlD,OAAOmD,QAAU,SAAUhB,GAAU,IAAK,GAAIiB,GAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,GAAIlB,GAASmB,UAAUD,EAAI,KAAK,GAAIP,KAAOX,GAAclC,OAAOD,UAAU+C,eAAe3G,KAAK+F,EAAQW,KAAQV,EAAOU,GAAOX,EAAOW,IAAY,MAAOV,IS1pBxPkF,EAAAzL,EAAA,GAAY0L,ET8pBG3E,EAAwB0E,GS7pBvC9D,EAAA3H,EAAA,GAAY4H,ETiqBCb,EAAwBY,GShqBrC9C,EAAA7E,EAAA,GACA2L,EAAA3L,EAAA,GTqqBK4L,EAAUjL,EAAuBgL,GSlqBlCE,GAAS,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KACrEC,EAAU1H,OAAO4B,KAAK0F,GACtBK,SAQEC,ET2qBc,WSrqBhB,QAAAA,GAAa5G,EAAcC,GAAO5B,EAAA8B,KAAAyG,EAC9B,IAAM9D,GAAa7C,KACnB0G,GAAQ,GAAAH,cAAUxG,EAAc8C,GAChC3C,KAAK0G,WAAY,ETk4BpB,MAzMAD,GAAa7H,US/qBd+H,WT+qBqC,WS9qBjC,MAAA5E,MACOyE,EAAMI,gBT2rBhBH,EAAa7H,US/qBdE,OT+qBiC,SS/qBzBhE,EAAIuF,EAAMsC,GACd,GAAMkE,GAAgB7G,KAAK2G,aAAa7L,EACxC,IAAI+L,EACA,KAAM,IAAIC,OAAM,UAAYhM,EAAK,+CAGrC,OADA0L,GAAM3L,OAAOwF,EAAMvF,EAAI6H,GAChB3C,MT2rBVyG,EAAa7H,USjrBdmI,OTirBiC,SSjrBzBjM,EAAI6H,GACR,GAAMkE,GAAgB7G,KAAK2G,aAAa7L,EACxC,KAAK+L,EACD,KAAM,IAAIC,OAAM,UAAYhM,EAAK,yCAGrC,OADA0L,GAAM3L,OAAOgM,EAAcxG,KAAMvF,EAAI6H,GAC9B3C,MT2rBVyG,EAAa7H,USnrBdoI,OTmrBiC,SSnrBzBrE,GAEJ,MADA6D,GAAM3L,OAAOyE,EAAAzD,MAAMC,OAAQwD,EAAA3C,MAAMb,OAAQ6G,GAClC3C,MT6rBVyG,EAAa7H,USrrBdqI,KTqrB+B,SSrrBzBtE,GAEF,MADA6D,GAAM3L,OAAOyE,EAAAzD,MAAMK,SAAUoD,EAAA3C,MAAMC,KAAM+F,GAClC3C,MTgsBVyG,EAAa7H,USvrBdsI,QTurBkC,SSvrBzBpM,GACL,GAAM+L,GAAgB7G,KAAK2G,aAAa7L,EACxC,KAAK+L,EACD,KAAM,IAAIC,OAAM,UAAYhM,EAAK,cAGrC,OADA0L,GAAMW,cAAcrM,GACbkF,MTisBVyG,EAAa7H,USzrBdwI,KTyrB+B,SSzrBzBC,GAKF,OAJKA,GAAa,IACdb,EAAMY,KAAKC,GACXrH,KAAK0G,WAAY,GAEd1G,MTmsBVyG,EAAa7H,US3rBdyF,KT2rB+B,SS3rBzBgD,GAKF,OAJKA,GAAa,IACdb,EAAMnC,KAAKgD,GACXrH,KAAK0G,WAAY,GAEd1G,MTysBVyG,EAAa7H,US7rBd0I,KT6rB+B,SS7rBzBvG,EAAQC,GACV,GAAID,IAAWzB,EAAA3C,MAAMb,OACjB,KAAM,IAAIgL,OAAM,gDAEpB,KAAKN,EAAMI,cAAc7F,GACrB,KAAM,IAAI+F,OAAM,iBAAmB/F,EAAS,cAGhD,KAAKyF,EAAMI,cAAc5F,GACrB,KAAM,IAAI8F,OAAM,iBAAmB9F,EAAS,cAGhD,OADAwF,GAAMI,cAAc7F,GAAQjB,MAAMwH,KAAOtG,EAClChB,MTusBVyG,ES/rBMc,oBT+rB6B,WS/rBS,GAAjBC,GAAiBtF,UAAAC,OAAA,GAAAmB,SAAApB,UAAA,GAAAA,UAAA,GAAJ,GAC/BuF,EAAcpF,EAAMmF,EAAa,YAEvC,UAAAE,OACO7I,OAAO4B,KAAKgH,GAAaE,IAAI,SAAAC,GAAA,MAAA7F,MAAc0F,EAAYG,IAAO7H,KAAM6H,MACpE/I,OAAO4B,KAAK4B,EAAMU,cAAc4E,IAAI,SAAAC,GAAA,MAAA7F,MAAcM,EAAMU,aAAa6E,IAAO7H,KAAM6H,QT4sB5FnB,ESpsBMoB,gBTosByB,WSnsB5B,SAAOH,OAAInB,GACNhF,OAAO,SAAAZ,GAAA,MAAW,eAANA,IACZmH,OAAO,SAACC,EAAQpH,GACb,SAAA+G,OACOK,IAEC1H,KAAMM,EACNgC,WAAY8D,EAAac,oBAAoB5G,YT+sBhE8F,ESnsBMuB,aTmsBsB,SSnsBRC,EAAMC,GACvB,GACIC,GAAUC,SAASF,EAAQ,IAAM,EACjCG,EAAQ/B,EAAMgC,QAAQL,GAAQ3B,EAAMgC,QAAQ,KAC5CC,EAAQ,GAAKJ,EACbK,EAAOH,EAAQE,EACfE,EAAO,IAAMC,KAAKC,IAAI,SAAUH,EACpC,OAAOI,YAAWH,EAAKI,QAAQ,KAAO,GT2sBzCpC,ESpsBMqC,STosBkB,WSnsBrB,MAAOxC,ITusBHG,ISnsBZA,GAAa9J,MAAb2C,EAAA3C,MACA8J,EAAa5K,MAAbyD,EAAAzD,MTwsBCjB,aStsBc6L,GT0sBT,SAAS5L,EAAQD,EAASH,GAE/B,YAUA,SAASW,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAEvF,QAAS6C,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAVhHzD,EAAQU,YAAa,CUz6BtB,IAAAgE,GAAA7E,EAAA,GACAsO,EAAAtO,EAAA,IV86BKuO,EAAU5N,EAAuB2N,GUt6BhCE,EVk7BO,WU36BT,QAAAA,GAAapJ,EAAcC,GAAO5B,EAAA8B,KAAAiJ,EAC9B,IAAItG,GAAa7C,KAEjBE,MAAKH,aAAeA,EACpBG,KAAK4G,iBACL5G,KAAKkJ,UACLlJ,KAAKmJ,SAAWxG,EAAWwG,WAAY,EACvCnJ,KAAKoJ,eAAiBzG,EAAWyG,gBAAkB,KACnDpJ,KAAKqJ,cAAgB1G,EAAW0G,eAAiB,KAEjDrJ,KAAKsJ,SAAW,KAChBtJ,KAAKuJ,eAAiB,KAElBvJ,KAAKH,cAA4D,kBAArCG,MAAKH,aAAa2J,iBAC9CxJ,KAAKH,aAAae,WAAaZ,KAAKH,aAAa2J,gBAEjDxJ,KAAKH,cAA6D,kBAAtCG,MAAKH,aAAa4J,kBAC9CzJ,KAAKH,aAAa6J,YAAc1J,KAAKH,aAAa4J,iBAGlDzJ,KAAKmJ,YAAa,GAClBnJ,KAAK2J,iBAGT3J,KAAKnF,OAAO,SAAUyE,EAAA3C,MAAMb,QACxB2G,MAAO,MAGXzC,KAAKnF,OAAO,WAAYyE,EAAA3C,MAAMC,MAC1B0K,KAAMhI,EAAA3C,MAAMb,OACZkF,OAAQ,OACRyB,MAAO,IACPmH,OAAQ,KACRC,MAAO,GACPC,QAAS,IACT1F,QAAS,IV6lChB,MAhKA6E,GAAMrK,UUr7BP+K,eVq7BkC,WUp7B9B,GAAII,GAAY,GACZC,EAAW,IAEXhK,MAAKH,eACLG,KAAKuJ,eAAiBvJ,KAAKH,aAAaoK,sBAAsB,KAAM,EAAG,GACvEjK,KAAKuJ,eAAe5F,QAAQ3D,KAAKH,aAAaqK,aAE9ClK,KAAKsJ,SAAWtJ,KAAKH,aAAasK,iBAClCnK,KAAKsJ,SAASc,sBAAwBL,EACtC/J,KAAKsJ,SAASe,QAAUL,EACxBhK,KAAKsJ,SAASgB,YAAc,KAC5BtK,KAAKsJ,SAASiB,YAAc,EAE5BvK,KAAKsJ,SAAS3F,QAAQ3D,KAAKH,aAAaqK,eVi8B/CjB,EAAMrK,UUv7BP/D,OVu7B0B,SUv7BlBwF,EAAMmK,GAAmB,GAAZ1K,GAAYoC,UAAAC,OAAA,GAAAmB,SAAApB,UAAA,GAAAA,UAAA,KAC7B,KAAK7B,GAAQA,EAAKtB,cAAgB0L,OAC9B,KAAM,IAAI3D,OAAM,+BAGpB,KAAK0D,GAASA,EAAMzL,cAAgB0L,OAChC,KAAM,IAAI3D,OAAM,gCAGf9G,MAAK4G,cAAc4D,GAGpBxK,KAAK0K,aAAaF,EAAO1K,GAFzBE,KAAK2K,UAAUtK,EAAMmK,EAAO1K,IVw8BnCmJ,EAAMrK,UU37BP+L,UV27B6B,SU37BlBtK,EAAMmK,GAAmB,GAAZ1K,GAAYoC,UAAAC,OAAA,GAAAmB,SAAApB,UAAA,GAAAA,UAAA,KAChC,IAAIlC,KAAK4G,cAAc4D,GACnB,KAAM,IAAI1D,OAAM,UAAY0D,EAAQ,qDAExCxK,MAAK4G,cAAc4D,IACfnK,OACAP,UVy8BPmJ,EAAMrK,UU/7BP8L,aV+7BgC,SU/7BlBF,GAAmB,GAAAvK,GAAAD,KAAZF,EAAYoC,UAAAC,OAAA,GAAAmB,SAAApB,UAAA,GAAAA,UAAA,KAC7B,KAAKlC,KAAK4G,cAAc4D,GACpB,KAAM,IAAI1D,OAAM,UAAY0D,EAAQ,4CAExC3L,QAAO4B,KAAKX,GAAOY,QAAQ,SAACC,GACmB2C,SAAvCrD,EAAK2G,cAAc4D,GAAO1K,MAAMa,KAChCV,EAAK2G,cAAc4D,GAAO1K,MAAMa,GAAKb,EAAMa,MAInD9B,OAAO4B,KAAKT,KAAKkJ,QAAQxI,QAAQ,SAACC,GAC9BV,EAAKiJ,OAAOvI,GAAG+J,aAAaF,EAAO1K,MV88B1CmJ,EAAMrK,UUr8BPuI,cVq8BiC,SUr8BlBqD,GAAO,GAAAhK,GAAAR,IAClB,KAAKA,KAAK4G,cAAc4D,GACpB,KAAM,IAAI1D,OAAM,UAAY0D,EAAQ,qBAEjCxK,MAAK4G,cAAc4D,GAC1B3L,OAAO4B,KAAKT,KAAKkJ,QAAQxI,QAAQ,SAACC,GAC9BH,EAAK0I,OAAOvI,GAAGiK,aAAaJ,MVi9BnCvB,EAAMrK,UUz8BPwI,KVy8BwB,SUz8BlBa,GAAM,GAAA4C,GAAA7K,KACJ8K,SACAC,EAAoB/K,KAAKsJ,UAAYtJ,KAAKsJ,SAAS0B,kBAC/ChL,KAAKsJ,SAAS0B,kBAAoB,IAErChL,MAAKkJ,OAAOjB,KACbjI,KAAKkJ,OAAOjB,GAAQ,GAAAe,cAAUf,EAAMjI,KAAKH,aAAcG,KAAK4G,cAAe5G,KAAKsJ,UAChFtJ,KAAKkJ,OAAOjB,GAAMhE,UAElBjE,KAAKmJ,YAAa,GAAQnJ,KAAKuJ,iBAE/BuB,EAAgB,GAAIG,YAAWF,GAE/B/K,KAAKuJ,eAAe2B,eAAiB,WACjCL,EAAKvB,SAAS6B,qBAAqBL,GAC/BD,EAAKzB,gBAAiD,kBAAxByB,GAAKzB,gBACnCyB,EAAKzB,eAAe0B,MVs9BnC7B,EAAMrK,UU58BPyF,KV48BwB,SU58BlB4D,GACEjI,KAAKkJ,OAAOjB,KACZjI,KAAKkJ,OAAOjB,GAAM9D,UAClBnE,KAAKkJ,OAAOjB,GAAQ3E,aACbtD,MAAKkJ,OAAOjB,IAGiB,IAApCpJ,OAAO4B,KAAKT,KAAKkJ,QAAQ/G,QACzBnC,KAAKmJ,YAAa,GAClBnJ,KAAKuJ,iBAELvJ,KAAKuJ,eAAe2B,eAAiB,KAEjClL,KAAKqJ,eACyB,kBAAvBrJ,MAAKqJ,eAEZrJ,KAAKqJ,kBV08BTJ,IAGXrO,cUv8BcqO,GV28BT,SAASpO,EAAQD,EAASH,GWvpChC,YXiqCC,SAASW,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GANvFT,EAAQU,YAAa,CWzpCtB,IAAA8P,GAAA3Q,EAAA,IX6pCK4Q,EAAWjQ,EAAuBgQ,GW3pCjCE,EAAgB,SAACzL,GAAD,MAAkB,IAAAwL,cAASxL,GXmqChDjF,cWjqCc0Q,GXqqCT,SAASzQ,EAAQD,EAASH,GAE/B,YAcA,SAASW,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAEvF,QAASmG,GAAwBnG,GAAO,GAAIA,GAAOA,EAAIC,WAAc,MAAOD,EAAc,IAAIoG,KAAa,IAAW,MAAPpG,EAAe,IAAK,GAAIqG,KAAOrG,GAAWwD,OAAOD,UAAU+C,eAAe3G,KAAKK,EAAKqG,KAAMD,EAAOC,GAAOrG,EAAIqG,GAAgC,OAAtBD,cAAiBpG,EAAYoG,EAElQ,QAASvD,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAhBhHzD,EAAQU,YAAa,CY/qCtB,IAAA4K,GAAAzL,EAAA,GAAY0L,EZmrCG3E,EAAwB0E,GYlrCvCqF,EAAA9Q,EAAA,GZsrCK+Q,EAAgBpQ,EAAuBmQ,GYrrC5CjM,EAAA7E,EAAA,GAOMgR,EZ6rCO,WY3rCT,QAAAA,GAAaxD,EAAMpI,EAAc+G,EAAe0C,GAAUpL,EAAA8B,KAAAyL,GACtDzL,KAAKiI,KAAOA,EACZjI,KAAK4G,cAAgBA,EACrB5G,KAAKxF,WACLwF,KAAK0L,gBACL1L,KAAKgH,OAAS,KACdhH,KAAKsJ,SAAWA,GAAY,KAExBzJ,IACAG,KAAK2L,aAAa9L,GAClBG,KAAK4L,eZozCZ,MAlHAH,GAAM7M,UY9rCP+M,aZ8rCgC,SY9rClB9L,GAAc,GAAAI,GAAAD,KACpB6L,SACA5Q,QAEJ4D,QAAO4B,KAAKT,KAAK4G,eAAelG,QAAQ,SAACoL,GACrCD,EAAU5L,EAAK2G,cAAckF,GACzBD,EAAQxL,MAAQwL,EAAQ/L,QACxB7E,EAAI,GAAIkL,GAAQ0F,EAAQxL,MAAMR,EAAcgM,EAAQ/L,MAAO+L,EAAQxL,MACnEJ,EAAKzF,QAAQsR,IACTzL,KAAMwL,EAAQxL,KACdlC,SAAUlD,GAGVA,EAAEkD,mBAAFqN,cACAvL,EAAKyL,aAAaK,KAAK9Q,GAChB4Q,EAAQxL,OAASf,EAAAzD,MAAMC,SAC9BmE,EAAK+G,OAAS/L,OZssC7BwQ,EAAM7M,UYhsCP8L,aZgsCgC,SYhsClBhQ,EAAUoF,GAChBE,KAAKxF,QAAQE,IAAasF,KAAKxF,QAAQE,GAAUyD,UACjD6B,KAAKxF,QAAQE,GAAUyD,SAASgF,iBAAiBrD,IZosCxD2L,EAAM7M,UYhsCPgM,aZgsCgC,SYhsClBlQ,GACNsF,KAAKxF,QAAQE,IAAasF,KAAKxF,QAAQE,GAAUyD,UACjD6B,KAAKxF,QAAQE,GAAUyD,SAASyF,cZosCvC6H,EAAM7M,UYhsCPgN,YZgsC+B,WYhsChB,GAAApL,GAAAR,IACXnB,QAAO4B,KAAKT,KAAKxF,SAASkG,QAAQ,SAACoL,GAC/B,GAAIjF,GAAgBrG,EAAKhG,QAAQsR,GAAK3N,SAClC6N,EAAoBxL,EAAKhG,QAAQsR,GAAKzL,KACtC4L,SACAlL,SACAmL,QAEArF,GAAcS,OACd2E,EAAoBzL,EAAKhG,QAAQqM,EAAcS,MAC3C2E,GAAqBA,EAAkB9N,WACvC4C,EAAS8F,EAAc3F,aACvBgL,EAAOD,EAAkB9N,SAAS0C,UAAUmL,EAAmBnF,GAE3D9F,GAAUmL,GACVnL,EAAO4C,QAAQuI,OAM/BlM,KAAKgH,OAAOmF,QAAQnM,KAAKsJ,WZqsC5BmC,EAAM7M,UYlsCPqF,OZksC0B,WYlsChB,GAAA4G,GAAA7K,KACF/E,SACAiR,QAEJrN,QAAO4B,KAAKT,KAAKxF,SAASkG,QAAQ,SAACC,GAC/B1F,EAAI4P,EAAKrQ,QAAQmG,GAAGxC,SAES,kBAAlBlD,GAAEmR,cACTF,EAAQrB,EAAKrQ,QAAQS,EAAEqM,MAASuD,EAAKrQ,QAAQS,EAAEqM,MAAMnJ,SAAW,KAChElD,EAAEmR,YAAYF,IAEO,kBAAdjR,GAAEoR,SACTpR,EAAEoR,SAASxB,EAAK5C,QAGxBpJ,OAAO4B,KAAKT,KAAKxF,SAASkG,QAAQ,SAACC,GAC/B1F,EAAI4P,EAAKrQ,QAAQmG,GAAGxC,SAChBlD,GAAyB,kBAAbA,GAAEgJ,QACdhJ,EAAEgJ,YZysCbwH,EAAM7M,UYpsCPuF,QZosC2B,WYpsChB,GAAAmI,GAAAtM,KACHoE,EAAU,EACV6C,EAAQjH,KAAKxF,QAAQyM,KAAQjH,KAAKxF,QAAQyM,KAAK9I,SAAW,KAC1DlD,SACAiR,QAEAjF,KACA7C,EAAU6C,EAAKsF,kBAGnB1N,OAAO4B,KAAKT,KAAKxF,SAASkG,QAAQ,SAACC,GAC/B1F,EAAIqR,EAAK9R,QAAQmG,GAAGxC,SAChBlD,GAAgC,kBAApBA,GAAEuR,gBACdN,EAAQI,EAAK9R,QAAQS,EAAEqM,MAASgF,EAAK9R,QAAQS,EAAEqM,MAAMnJ,SAAW,KAChElD,EAAEuR,cAAcN,MAGxBrN,OAAO4B,KAAKT,KAAKxF,SAASkG,QAAQ,SAACC,GAC/B1F,EAAIqR,EAAK9R,QAAQmG,GAAGxC,SAChBlD,GAA0B,kBAAdA,GAAEkJ,SACdlJ,EAAEkJ,QAAQC,MZ2sCdqH,IAGX7Q,cYvsCc6Q,GZ2sCT,SAAS5Q,EAAQD,EAASH,Gah1ChC,Yb01CC,SAASW,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAEvF,QAAS6C,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAMvD,GAAQ,IAAKuD,EAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOxD,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BuD,EAAPvD,EAElO,QAASyD,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIN,WAAU,iEAAoEM,GAAeD,GAASE,UAAYC,OAAOC,OAAOH,GAAcA,EAAWC,WAAaG,aAAeC,MAAON,EAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,IAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,EAAUC,GAAcD,EAASW,UAAYV,GAZje/D,EAAQU,YAAa,Cal1CtB,IAAAmR,GAAAhS,EAAA,Gbs1CKiS,EAAWtR,EAAuBqR,Gap1CjCE,Eb81CY,SAAUC,Ga51CxB,QAAAD,GAAa9M,EAAcC,EAAOC,GAAM7B,EAAA8B,KAAA2M,EAAA,IAAA1M,GAAA3B,EAAA0B,KACpC4M,EAAA5R,KAAAgF,KAAMH,EAAcC,EAAOC,GADS,OAGpCE,GAAKG,cAAc,aAAc,UACjCH,EAAKM,mBACDsM,KAAM5M,EAAK4M,KACXC,SAAU7M,EAAK6M,SACfC,WAAY9M,EAAK8M,aAPe9M,Eb62CvC,MAhBAxB,GAAUkO,EAAYC,GAgBfD,GACTD,aAEF9R,can2Cc+R,Gbu2CT,SAAS9R,EAAQD,EAASH,Gc13ChC,Ydo4CC,SAASW,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAEvF,QAAS6C,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAMvD,GAAQ,IAAKuD,EAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOxD,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BuD,EAAPvD,EAElO,QAASyD,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIN,WAAU,iEAAoEM,GAAeD,GAASE,UAAYC,OAAOC,OAAOH,GAAcA,EAAWC,WAAaG,aAAeC,MAAON,EAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,IAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,EAAUC,GAAcD,EAASW,UAAYV,GAZje/D,EAAQU,YAAa,Cc53CtB,IAAAmR,GAAAhS,EAAA,Gdg4CKiS,EAAWtR,EAAuBqR,Gc93CjCO,Edw4CO,SAAUJ,Gct4CnB,QAAAI,GAAanN,EAAcC,EAAOC,GAAM7B,EAAA8B,KAAAgN,EAAA,IAAA/M,GAAA3B,EAAA0B,KACpC4M,EAAA5R,KAAAgF,KAAMH,EAAcC,EAAOC,GADS,OAGpCE,GAAKG,cAAc,QAAS,UAC5BH,EAAKM,mBACD0M,SAAUhN,EAAKiN,IACfC,SAAUlN,EAAKmN,IACfC,SAAUpN,EAAKoN,SACfC,OAAQrN,EAAKqN,OACbC,UAAWtN,EAAKsN,UAChBC,OAAQvN,EAAKuN,SAVmBvN,Ed05CvC,MAnBAxB,GAAUuO,EAAOJ,GAmBVI,GACTN,aAEF9R,cc94CcoS,Gdk5CT,SAASnS,EAAQD,EAASH,Gev6ChC,Yfi7CC,SAASW,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAEvF,QAAS6C,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAMvD,GAAQ,IAAKuD,EAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOxD,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BuD,EAAPvD,EAElO,QAASyD,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIN,WAAU,iEAAoEM,GAAeD,GAASE,UAAYC,OAAOC,OAAOH,GAAcA,EAAWC,WAAaG,aAAeC,MAAON,EAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,IAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,EAAUC,GAAcD,EAASW,UAAYV,GAZje/D,EAAQU,YAAa,Cez6CtB,IAAAmR,GAAAhS,EAAA,Gf66CKiS,EAAWtR,EAAuBqR,Ge36CjCgB,Efq7CQ,SAAUb,Gen7CpB,QAAAa,GAAa5N,EAAcC,EAAOC,GAAM7B,EAAA8B,KAAAyN,EAAA,IAAAxN,GAAA3B,EAAA0B,KACpC4M,EAAA5R,KAAAgF,KAAMH,EAAcC,EAAOC,GADS,OAGpCE,GAAKG,cAAc,SAAU,UAC7BH,EAAKM,mBACD8G,UAAWpH,EAAKwI,KAChBiF,EAAGzN,EAAK0N,EACRrM,KAAMrB,EAAK2N,WACXC,WAAY5N,EAAK4N,WACjBL,OAAQvN,EAAKuN,SATmBvN,Efs8CvC,MAlBAxB,GAAUgP,EAAQb,GAkBXa,GACTf,aAEF9R,ce37Cc6S,Gf+7CT,SAAS5S,EAAQD,EAASH,GgBn9ChC,YhB69CC,SAASW,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAEvF,QAAS6C,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAMvD,GAAQ,IAAKuD,EAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOxD,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BuD,EAAPvD,EAElO,QAASyD,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIN,WAAU,iEAAoEM,GAAeD,GAASE,UAAYC,OAAOC,OAAOH,GAAcA,EAAWC,WAAaG,aAAeC,MAAON,EAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,IAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,EAAUC,GAAcD,EAASW,UAAYV,GAZje/D,EAAQU,YAAa,CgBr9CtB,IAAAmR,GAAAhS,EAAA,GhBy9CKiS,EAAWtR,EAAuBqR,GgBv9CjCqB,EhBi+CY,SAAUlB,GgB/9CxB,QAAAkB,GAAajO,EAAcC,EAAOC,GAAM7B,EAAA8B,KAAA8N,EAAA,IAAA7N,GAAA3B,EAAA0B,KACpC4M,EAAA5R,KAAAgF,KAAMH,EAAcC,EAAOC,GADS,OAGpCE,GAAKG,cAAc,aAAc,UACjCH,EAAKM,mBACD+M,OAAQrN,EAAKqN,OACbS,UAAW9N,EAAK8N,UAChBhB,WAAY9M,EAAK8M,aAPe9M,EhBg/CvC,MAhBAxB,GAAUqP,EAAYlB,GAgBfkB,GACTpB,aAEF9R,cgBv+CckT,GhB2+CT,SAASjT,EAAQD,EAASH,GiB7/ChC,YjBugDC,SAASW,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAEvF,QAAS6C,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAMvD,GAAQ,IAAKuD,EAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOxD,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BuD,EAAPvD,EAElO,QAASyD,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIN,WAAU,iEAAoEM,GAAeD,GAASE,UAAYC,OAAOC,OAAOH,GAAcA,EAAWC,WAAaG,aAAeC,MAAON,EAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,IAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,EAAUC,GAAcD,EAASW,UAAYV,GAZje/D,EAAQU,YAAa,CiB//CtB,IAAAmR,GAAAhS,EAAA,GjBmgDKiS,EAAWtR,EAAuBqR,GiBjgDjCuB,EjB2gDW,SAAUpB,GiBzgDvB,QAAAoB,GAAanO,EAAcC,EAAOC,GAAM7B,EAAA8B,KAAAgO,EAAA,IAAA/N,GAAA3B,EAAA0B,KACpC4M,EAAA5R,KAAAgF,KAAMH,EAAcC,EAAOC,GADS,OAGpCE,GAAKG,cAAc,YAAa,UAChCH,EAAKM,mBACD0N,WAAYhO,EAAKgO,WACjBC,MAAOjO,EAAKiO,MACZC,YAAalO,EAAKkO,YAClBC,eAAgBnO,EAAKmO,eACrBZ,OAAQvN,EAAKuN,SATmBvN,EjB4hDvC,MAlBAxB,GAAUuP,EAAWpB,GAkBdoB,GACTtB,aAEF9R,ciBjhDcoT,GjBqhDT,SAASnT,EAAQD,EAASH,GkBziDhC,YlBmjDC,SAASW,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAEvF,QAAS6C,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAMvD,GAAQ,IAAKuD,EAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOxD,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BuD,EAAPvD,EAElO,QAASyD,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIN,WAAU,iEAAoEM,GAAeD,GAASE,UAAYC,OAAOC,OAAOH,GAAcA,EAAWC,WAAaG,aAAeC,MAAON,EAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,IAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,EAAUC,GAAcD,EAASW,UAAYV,GAZje/D,EAAQU,YAAa,CkB3iDtB,IAAAmR,GAAAhS,EAAA,GlB+iDKiS,EAAWtR,EAAuBqR,GkB7iDjC4B,ElBujDe,SAAUzB,GkBrjD3B,QAAAyB,GAAaxO,EAAcC,EAAOC,GAAM7B,EAAA8B,KAAAqO,EAAA,IAAApO,GAAA3B,EAAA0B,KACpC4M,EAAA5R,KAAAgF,KAAMH,EAAcC,EAAOC,GADS,OAGpCE,GAAKG,cAAc,gBAAiB,aACpCH,EAAKM,mBACD0M,SAAUhN,EAAKiN,IACfC,SAAUlN,EAAKmN,IACfC,SAAUpN,EAAKoN,SACfiB,cAAerO,EAAKqO,cACpBC,eAAgBtO,EAAKsO,eACrBf,OAAQvN,EAAKuN,SAVmBvN,ElBykDvC,MAnBAxB,GAAU4P,EAAezB,GAmBlByB,GACT3B,aAEF9R,ckB7jDcyT,GlBikDT,SAASxT,EAAQD,EAASH,GmBtlDhC,YnBgmDC,SAASW,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAEvF,QAAS6C,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAMvD,GAAQ,IAAKuD,EAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOxD,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BuD,EAAPvD,EAElO,QAASyD,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIN,WAAU,iEAAoEM,GAAeD,GAASE,UAAYC,OAAOC,OAAOH,GAAcA,EAAWC,WAAaG,aAAeC,MAAON,EAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,IAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,EAAUC,GAAcD,EAASW,UAAYV,GAZje/D,EAAQU,YAAa,CmBxlDtB,IAAAmR,GAAAhS,EAAA,GnB4lDKiS,EAAWtR,EAAuBqR,GmB1lDjC+B,EnBomDS,SAAU5B,GmBlmDrB,QAAA4B,GAAa3O,EAAcC,EAAOC,GAAM7B,EAAA8B,KAAAwO,EAAA,IAAAvO,GAAA3B,EAAA0B,KACpC4M,EAAA5R,KAAAgF,KAAMH,EAAcC,EAAOC,GADS,OAGpCE,GAAKG,cAAc,UAAW,UAC9BH,EAAKM,mBACDkO,UAAWxO,EAAKwO,UAChBC,KAAMzO,EAAKyO,KACXC,YAAa1O,EAAK0O,YAClBnB,OAAQvN,EAAKuN,SARmBvN,EnBonDvC,MAjBAxB,GAAU+P,EAAS5B,GAiBZ4B,GACT9B,aAEF9R,cmB1mDc4T,GnB8mDT,SAAS3T,EAAQD,EAASH,GAE/B,YAQA,SAASW,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAEvF,QAAS6C,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAMvD,GAAQ,IAAKuD,EAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOxD,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BuD,EAAPvD,EAElO,QAASyD,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIN,WAAU,iEAAoEM,GAAeD,GAASE,UAAYC,OAAOC,OAAOH,GAAcA,EAAWC,WAAaG,aAAeC,MAAON,EAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,IAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,EAAUC,GAAcD,EAASW,UAAYV,GAZje/D,EAAQU,YAAa,CoBroDtB,IAAAiE,GAAA9E,EAAA,GpByoDK+E,EAAWpE,EAAuBmE,GoBvoDjCqP,EpBipDU,SAAUhP,GoB/oDtB,QAAAgP,GAAa/O,EAAcC,EAAOC,GAAM,MAAA7B,GAAA8B,KAAA4O,GAAAtQ,EAAA0B,KACpCJ,EAAA5E,KAAAgF,KAAMH,EAAcC,EAAOC,IpB4tD9B,MA7EAtB,GAAUmQ,EAAUhP,GAQpBgP,EAAShQ,UoBppDVgC,WpBopDiC,WoBnpD7B,OAAO,GpBupDVgO,EAAShQ,UoBppDV2N,epBopDqC,WoBnpDjC,GAAIsC,GAAM7O,KAAKH,aAAaiP,YACxB1K,QAQJ,OALIA,GADApE,KAAKoE,QACKyK,EAAO7O,KAAKoE,QAAU,GAEtByK,EAAM,IpB0pDvBD,EAAShQ,UoBppDVwN,YpBopDkC,SoBppDrBF,GACT,GAAI2C,GAAM7O,KAAKH,aAAaiP,YACxBvM,EAAWvC,KAAKyC,MAAQ,IACxBsM,SACAC,SACAC,EAAajP,KAAK4J,OAAS,GAC3BsF,QAEgB,UAAhBlP,KAAKgB,QACL+N,EAAcxM,EAAW,IACzByM,EAAehP,KAAK8J,QAAU,MAE9BiF,EAAyB,GAAXxM,EACdyM,EAAeD,EAAc/O,KAAK8J,QAAU,KAG3CmF,IACDA,EAAY,KAGZ/C,GAA0C,kBAA3BA,GAAK9K,oBACpB8N,EAAIhD,EAAK9K,kBAAkBpB,KAAKgB,QAE5BkO,GAAKA,EAAEC,gBAAkBD,EAAEE,yBAA2BF,EAAEG,kBACxDH,EAAEC,eAAe,EAAGN,GACpBK,EAAEE,wBAAwBL,EAAaF,EAAMI,GAC7CC,EAAEG,gBAAgBL,EAAcH,EAAMI,EAAYjP,KAAK6J,MAAQ,QpBypD1E+E,EAAShQ,UoBnpDV4N,cpBmpDoC,SoBnpDrBN,GACX,GAAI2C,GAAM7O,KAAKH,aAAaiP,YACxBI,QAEAhD,IAA0C,kBAA3BA,GAAK9K,oBACpB8N,EAAIhD,EAAK9K,kBAAkBpB,KAAKgB,QAE5BkO,GAAKA,EAAEI,uBAAyBJ,EAAEC,gBAAkBD,EAAEG,kBACtDH,EAAEI,sBAAsBT,GACJ,SAAhB7O,KAAKgB,QACLkO,EAAEC,eAAeD,EAAElQ,MAAO6P,GAE9BK,EAAEG,gBAAgB,EAAGR,EAAM7O,KAAKoE,QAAU,QpBwpDrDwK,EAAShQ,UoBnpDVsC,WpBmpDiC,WoBlpD7B,OAAO,GpBspDH0N,GACTpP,aAEF5E,coBrpDcgU,GpBypDT,SAAS/T,EAAQD,EAASH,GAE/B,YAQA,SAASW,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAEvF,QAAS6C,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAMvD,GAAQ,IAAKuD,EAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOxD,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BuD,EAAPvD,EAElO,QAASyD,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIN,WAAU,iEAAoEM,GAAeD,GAASE,UAAYC,OAAOC,OAAOH,GAAcA,EAAWC,WAAaG,aAAeC,MAAON,EAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,IAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,EAAUC,GAAcD,EAASW,UAAYV,GAZje/D,EAAQU,YAAa,CqB5uDtB,IAAAiE,GAAA9E,EAAA,GrBgvDK+E,EAAWpE,EAAuBmE,GqB9uDjCgQ,ErBwvDQ,SAAU3P,GqBtvDpB,QAAA2P,GAAa1P,EAAcC,EAAOC,GAAM7B,EAAA8B,KAAAuP,EAAA,IAAAtP,GAAA3B,EAAA0B,KACpCJ,EAAA5E,KAAAgF,KAAMH,EAAcC,EAAOC,GADS,OAGpCE,GAAKC,KAAOD,EAAKJ,aAAae,aAC9BX,EAAKqH,KAAO,KAJwBrH,ErBgxDvC,MAzBAxB,GAAU8Q,EAAQ3P,GAYlB2P,EAAO3Q,UqB5vDRiC,UrB4vD8B,WqB3vD1B,MAAOb,MAAKE,MrB+vDfqP,EAAO3Q,UqB5vDRuN,QrB4vD4B,SqB5vDnB7C,GACLtJ,KAAKE,KAAKyD,QAAQ3D,KAAKuC,UACnB+G,EACAtJ,KAAKsB,KAAKqC,QAAQ2F,GAElBtJ,KAAKsB,KAAKqC,QAAQ3D,KAAKH,aAAaqK,crBgwDpCqF,GACT/P,aAEF5E,cqB9vDc2U,GrBkwDT,SAAS1U,EAAQD,EAASH,GAE/B,YAQA,SAASW,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAEvF,QAAS6C,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAMvD,GAAQ,IAAKuD,EAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOxD,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BuD,EAAPvD,EAElO,QAASyD,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIN,WAAU,iEAAoEM,GAAeD,GAASE,UAAYC,OAAOC,OAAOH,GAAcA,EAAWC,WAAaG,aAAeC,MAAON,EAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,IAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,EAAUC,GAAcD,EAASW,UAAYV,GAZje/D,EAAQU,YAAa,CsB/xDtB,IAAAiE,GAAA9E,EAAA,GtBmyDK+E,EAAWpE,EAAuBmE,GsBjyDjCiQ,EtB2yDK,SAAU5P,GsBzyDjB,QAAA4P,GAAa3P,EAAcC,EAAOC,GAAM7B,EAAA8B,KAAAwP,EAAA,IAAAvP,GAAA3B,EAAA0B,KACpCJ,EAAA5E,KAAAgF,KAAMH,EAAcC,EAAOC,GADS,OAGpCE,GAAKC,KAAOD,EAAKJ,aAAa4P,qBAC9BxP,EAAKC,KAAKwP,IAAI1Q,MAAQiB,EAAKyP,IAC3BzP,EAAKC,KAAKyD,QAAQ1D,EAAKsC,UALatC,EtBuzDvC,MAbAxB,GAAU+Q,EAAK5P,GAaR4P,GACThQ,aAEF5E,csBjzDc4U,GtBqzDT,SAAS3U,EAAQD,EAASH,GAE/B,YAQA,SAASW,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAEvF,QAAS6C,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAMvD,GAAQ,IAAKuD,EAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOxD,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BuD,EAAPvD,EAElO,QAASyD,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIN,WAAU,iEAAoEM,GAAeD,GAASE,UAAYC,OAAOC,OAAOH,GAAcA,EAAWC,WAAaG,aAAeC,MAAON,EAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,IAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,EAAUC,GAAcD,EAASW,UAAYV,GAZje/D,EAAQU,YAAa,CuBt0DtB,IAAAkQ,GAAA/Q,EAAA,GvB00DKkV,EAAgBvU,EAAuBoQ,GuBx0DtCoE,EvBk1DW,SAAUrE,GuBh1DvB,QAAAqE,GAAa/P,EAAcC,EAAOC,GAAM7B,EAAA8B,KAAA4P,EAAA,IAAA3P,GAAA3B,EAAA0B,KACpCuL,EAAAvQ,KAAAgF,KAAMH,EAAcC,EAAOC,GADS,OAEpCE,GAAKC,KAAOD,EAAKJ,aAAagQ,mBAC9B5P,EAAKC,KAAKG,KAAOJ,EAAK6P,KACtB7P,EAAKC,KAAKyD,QAAQ1D,EAAKsC,UAJatC,EvBm2DvC,MAlBAxB,GAAUmR,EAAWrE,GAarBqE,EAAUhR,UuBv1DXyN,QvBu1D+B,WuBt1D3B,GAAI0D,GAAK/P,KAAKyI,KAAO,EACrBzI,MAAKE,KAAKmH,UAAUrI,MAAQ+Q,GvB01DxBH,GACTD,aAEF/U,cuBz1DcgV,GvB61DT,SAAS/U,EAAQD,EAASH,GAE/B,YAUA,SAASW,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAEvF,QAAS6C,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAMvD,GAAQ,IAAKuD,EAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOxD,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BuD,EAAPvD,EAElO,QAASyD,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIN,WAAU,iEAAoEM,GAAeD,GAASE,UAAYC,OAAOC,OAAOH,GAAcA,EAAWC,WAAaG,aAAeC,MAAON,EAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,IAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,EAAUC,GAAcD,EAASW,UAAYV,GAdje/D,EAAQU,YAAa,CwBl3DtB,IAAAgE,GAAA7E,EAAA,GACA+Q,EAAA/Q,EAAA,GxBu3DKkV,EAAgBvU,EAAuBoQ,GwBr3DtCwE,ExB+3DO,SAAUzE,GwB73DnB,QAAAyE,GAAanQ,EAAcC,EAAOC,GAAM7B,EAAA8B,KAAAgQ,EAAA,IAAA/P,GAAA3B,EAAA0B,KACpCuL,EAAAvQ,KAAAgF,KAAMH,EAAcC,EAAOC,GADS,OAGpCE,GAAK6D,sBAAwB,SAC7B7D,EAAKC,KAAOD,EAAKJ,aAAaoQ,qBAC9BhQ,EAAKC,KAAKyD,QAAQ1D,EAAKsC,UAEvBtC,EAAK8D,YACL9D,EAAKiQ,WAR+BjQ,ExB2+DvC,MA7GAxB,GAAUuR,EAAOzE,GAgBjByE,EAAMpR,UwBn4DPsR,SxBm4D4B,WwBl4DxB,OAAQlQ,KAAKmQ,OACT,IAAK7Q,GAAA3C,MAAME,YACPmD,KAAKE,KAAKkQ,OAASpQ,KAAKqQ,OACxB,MACJ,KAAK/Q,GAAA3C,MAAMG,WACPkD,KAAKE,KAAKkQ,OAASpQ,KAAKsQ,MACxB,MACJ,KAAKhR,GAAA3C,MAAMI,YACPiD,KAAKE,KAAKkQ,OAASpQ,KAAKuQ,OACxB,MACJ,SACI,KAAM,IAAIzJ,OAAM,wBAA0B9G,KAAKmQ,SxBu4D1DH,EAAMpR,UwBn4DPyR,MxBm4DyB,WwB93DrB,IAAK,GAJDG,GAAcxQ,KAAKyQ,iBACnB1D,EAAa/M,KAAK0Q,gBAClBvP,EAASqP,EAAYG,eAAe,GAE/B1O,EAAI,EAAO8K,EAAJ9K,EAAgBA,IAC5Bd,EAAOc,GAAqB,EAAhByG,KAAKkI,SAAe,CAGpC,OAAOJ,IxBs4DVR,EAAMpR,UwBn4DP0R,KxBm4DwB,WwBl4DpB,GAAIO,UAAIC,SAAIC,SAAIC,SAAIC,SAAIC,SAAIC,SACxBX,EAAcxQ,KAAKyQ,iBACnB1D,EAAa/M,KAAK0Q,gBAClBvP,EAASqP,EAAYG,eAAe,GACpCN,QAEJQ,GAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAK,CAEnC,KAAK,GAAIlP,GAAI,EAAO8K,EAAJ9K,EAAgBA,IAC5BoO,EAAwB,EAAhB3H,KAAKkI,SAAe,EAE5BC,EAAK,OAAUA,EAAa,SAARR,EACpBS,EAAK,OAAUA,EAAa,SAART,EACpBU,EAAK,KAAUA,EAAa,QAARV,EACpBW,EAAK,MAAUA,EAAa,SAARX,EACpBY,EAAK,IAAUA,EAAa,SAARZ,EACpBa,GAAM,MAASA,EAAa,QAARb,EAEpBlP,EAAOc,GAAK4O,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAKC,EAAa,MAARd,EAC/ClP,EAAOc,IAAM,IACbkP,EAAa,QAARd,CAGT,OAAOG,IxB44DVR,EAAMpR,UwBz4DP2R,MxBy4DyB,WwBl4DrB,IAAK,GANDC,GAAcxQ,KAAKyQ,iBACnB1D,EAAa/M,KAAK0Q,gBAClBvP,EAASqP,EAAYG,eAAe,GACpCS,EAAU,EACVf,SAEKpO,EAAI,EAAO8K,EAAJ9K,EAAgBA,IAC5BoO,EAAQA,EAAwB,EAAhB3H,KAAKkI,SAAe,EAEpCzP,EAAOc,IAAMmP,EAAW,IAAOf,GAAU,KACzCe,EAAUjQ,EAAOc,GACjBd,EAAOc,IAAM,GAGjB,OAAOuO,IxB44DVR,EAAMpR,UwBz4DP8R,cxBy4DiC,WwBx4D7B,MAAO,GAAI1Q,KAAKH,aAAawR,YxB44DhCrB,EAAMpR,UwBz4DP6R,exBy4DkC,WwBx4D9B,GAAI1D,GAAa/M,KAAK0Q,gBAClBF,EAAcxQ,KAAKH,aAAayR,aAAa,EAAGvE,EAAY/M,KAAKH,aAAawR,WAClF,OAAOb,IxB44DVR,EAAMpR,UwBz4DPyN,QxBy4D2B,WwBx4DvBrM,KAAKE,KAAKqR,MAAO,GxB44DbvB,GACTL,aAEF/U,cwB34DcoV,GxB+4DT,SAASnV,EAAQD,EAASH,GAE/B,YAQA,SAASW,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GAEvF,QAAS6C,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAEhH,QAASC,GAA2BC,EAAMvD,GAAQ,IAAKuD,EAAQ,KAAM,IAAIC,gBAAe,4DAAgE,QAAOxD,GAAyB,gBAATA,IAAqC,kBAATA,GAA8BuD,EAAPvD;CAElO,QAASyD,GAAUC,EAAUC,GAAc,GAA0B,kBAAfA,IAA4C,OAAfA,EAAuB,KAAM,IAAIN,WAAU,iEAAoEM,GAAeD,GAASE,UAAYC,OAAOC,OAAOH,GAAcA,EAAWC,WAAaG,aAAeC,MAAON,EAAUO,YAAY,EAAOC,UAAU,EAAMC,cAAc,KAAeR,IAAYE,OAAOO,eAAiBP,OAAOO,eAAeV,EAAUC,GAAcD,EAASW,UAAYV,GAZje/D,EAAQU,YAAa,CyB3/DtB,IAAAkQ,GAAA/Q,EAAA,GzB+/DKkV,EAAgBvU,EAAuBoQ,GyB7/DtCgG,EzBugEY,SAAUjG,GyBrgExB,QAAAiG,GAAa3R,EAAcC,EAAOC,GAAM7B,EAAA8B,KAAAwR,EAAA,IAAAvR,GAAA3B,EAAA0B,KACpCuL,EAAAvQ,KAAAgF,KAAMH,EAAcC,EAAOC,GADS,OAGpCE,GAAKC,KAAOD,EAAKJ,aAAagQ,mBAC9B5P,EAAKC,KAAKG,KAAOJ,EAAK6P,KACtB7P,EAAKC,KAAKyD,QAAQ1D,EAAKsC,UAEvBtC,EAAK8D,YAP+B9D,EzByhEvC,MAnBAxB,GAAU+S,EAAYjG,GAetBiG,EAAW5S,UyB3gEZyN,QzB2gEgC,SyB3gEvBpE,GACLjI,KAAKE,KAAKmH,UAAUrI,MAAQiJ,GzB8gExBuJ,GACT7B,aAEF/U,cyB7gEc4W,GzBihET,SAAS3W,EAAQD,G0BpiEvB,Y1BwiECA,GAAQU,YAAa,C0BtiEtB,IAAMmW,IACF5E,MACIxM,KAAM,SACNqR,QAAS,EAAG,IACZhO,aAAc,GAElBoJ,UACIzM,KAAM,SACNqR,QAAS,EAAG,GACZC,KAAM,GACNjO,aAAc,IAElBqJ,YACI1M,KAAM,SACNqR,QAAS,IAAK,OACdhO,aAAc,MAElB8J,QACInN,KAAM,SACNqR,QAAS,EAAG,GACZhO,aAAc,G1B2iErB9I,c0BviEc6W,G1B2iET,SAAS5W,EAAQD,G2BrkEvB,Y3BykECA,GAAQU,YAAa,C2BvkEtB,IAAMyH,IACFuE,MACIjH,KAAM,SACNqD,aAAc,IAElBjB,OACIpC,KAAM,SACNqR,QAAS,EAAG,KACZhO,aAAc,K3B4kErB9I,c2BxkEcmI,G3B4kET,SAASlI,EAAQD,G4B1lEvB,Y5B8lECA,GAAQU,YAAa,C4B5lEtB,IAAMsW,IACF1E,KACI7M,KAAM,SACNqR,QAAS,EAAG,GACZC,KAAM,GACNjO,aAAc,GAElB0J,KACI/M,KAAM,SACNqR,QAAS,EAAG,GACZC,KAAM,GACNjO,aAAc,IAElB2J,UACIhN,KAAM,SACNqR,QAAS,EAAG,IACZC,KAAM,GACNjO,aAAc,IAElB4J,QACIjN,KAAM,SACNqR,QAAS,GAAI,KACbhO,aAAc,KAElB6J,WACIlN,KAAM,SACNqR,QAAS,GAAI,KACbhO,aAAc,KAElB8J,QACInN,KAAM,SACNqR,QAAS,EAAG,GACZhO,aAAc,G5BimErB9I,c4B7lEcgX,G5BimET,SAAS/W,EAAQD,EAASH,G6BvoEhC,Y7B2oECG,GAAQU,YAAa,C6BzoEtB,IAAAgE,GAAA7E,EAAA,GAEMoX,GACF7Q,QACIX,KAAM,SACNqR,QACIpS,EAAA3C,MAAMoB,qBACNuB,EAAA3C,MAAMqB,qBACNsB,EAAA3C,MAAMsB,wBAEVyF,aAAcpE,EAAA3C,MAAMoB,sBAExB6L,QACIvJ,KAAM,SACNqR,QAAS,EAAG,KACZhO,aAAc,GAElBmG,OACIxJ,KAAM,SACNqR,QAAS,EAAG,KACZhO,aAAc,GAElBoG,SACIzJ,KAAM,SACNqR,QAAS,EAAG,KACZhO,aAAc,KAElBU,SACI/D,KAAM,SACNqR,QAAS,EAAG,KACZhO,aAAc,G7B2oErB9I,c6BvoEciX,G7B2oET,SAAShX,EAAQD,EAASH,G8B/qEhC,Y9BmrECG,GAAQU,YAAa,C8BjrEtB,IAAAgE,GAAA7E,EAAA,GAEMqX,GACFrJ,MACIpI,KAAM,SACNqR,QAAS,GAAI,KACbhO,aAAc,KAElBiK,GACItN,KAAM,SACNqR,QAAS,EAAG,KACZhO,aAAc,IAElBkK,YACIvN,KAAM,SACNqR,QAAS,IAAK,IACdhO,aAAc,GAElBmK,YACIxN,KAAM,SACNqR,QACIpS,EAAA3C,MAAMiB,eACN0B,EAAA3C,MAAMY,gBACN+B,EAAA3C,MAAMW,gBACNgC,EAAA3C,MAAMc,iBACN6B,EAAA3C,MAAMU,eACNiC,EAAA3C,MAAMa,gBACN8B,EAAA3C,MAAMgB,aACN2B,EAAA3C,MAAMe,gBAEVgG,aAAcpE,EAAA3C,MAAMU,gBAExBmQ,QACInN,KAAM,SACNqR,QAAS,EAAG,GACZhO,aAAc,G9B8qErB9I,c8B1qEckX,G9B8qET,SAASjX,EAAQD,EAASH,G+BvtEhC,Y/B2tECG,GAAQU,YAAa,C+BztEtB,IAAAgE,GAAA7E,EAAA,GAEMsX,GACFtJ,MACIpI,KAAM,SACNqR,QAAS,EAAG,KACZhO,aAAc,GAElB1C,QACIX,KAAM,SACNqR,QACIpS,EAAA3C,MAAMkB,sBACNyB,EAAA3C,MAAMmB,yBAEV4F,aAAcpE,EAAA3C,MAAMkB,uBAExBiS,MACIzP,KAAM,SACNqR,QACIpS,EAAA3C,MAAMK,UACNsC,EAAA3C,MAAMM,YACNqC,EAAA3C,MAAMO,cACNoC,EAAA3C,MAAMQ,cACNmC,EAAA3C,MAAMS,aAEVsG,aAAcpE,EAAA3C,MAAMK,W/BstE3BpC,c+BltEcmX,G/BstET,SAASlX,EAAQD,GgCrvEvB,YhCyvECA,GAAQU,YAAa,CgCvvEtB,IAAM0W,IACF1E,QACIjN,KAAM,SACNqR,QAAS,EAAG,GACZC,KAAM,GACNjO,aAAc,IAElBqK,WACI1N,KAAM,SACNqR,QAAS,EAAG,GACZC,KAAM,GACNjO,aAAc,KAElBqJ,YACI1M,KAAM,SACNqR,QAAS,IAAK,OACdhO,aAAc,MAElB8J,QACInN,KAAM,SACNqR,QAAS,EAAG,GACZhO,aAAc,GhC4vErB9I,cgCxvEcoX,GhC4vET,SAASnX,EAAQD,EAASH,GiCvxEhC,YjC2xECG,GAAQU,YAAa,CiCzxEtB,IAAAgE,GAAA7E,EAAA,GAEMwX,GACF9B,OACI9P,KAAM,SACNqR,QACIpS,EAAA3C,MAAMI,YACNuC,EAAA3C,MAAMG,WACNwC,EAAA3C,MAAME,aAEV6G,aAAcpE,EAAA3C,MAAME,aAExBmH,QACI3D,KAAM,SACNqR,QAAS,MAAO,MAChBhO,aAAc,GjC2xErB9I,ciCvxEcqX,GjC2xET,SAASpX,EAAQD,EAASH,GkChzEhC,YlCozECG,GAAQU,YAAa,CkClzEtB,IAAAgE,GAAA7E,EAAA,GAEMyX,GACFlO,QACI3D,KAAM,SACNqR,QAAS,MAAO,MAChBhO,aAAc,GAElBoM,MACIzP,KAAM,SACNqR,QACIpS,EAAA3C,MAAMK,UACNsC,EAAA3C,MAAMM,YACNqC,EAAA3C,MAAMO,cACNoC,EAAA3C,MAAMQ,cACNmC,EAAA3C,MAAMS,aAEVsG,aAAcpE,EAAA3C,MAAMK,WlCkzE3BpC,ckC9yEcsX,GlCkzET,SAASrX,EAAQD,GmCz0EvB,YnC60ECA,GAAQU,YAAa,CmC30EtB,IAAM6W,IACFlE,YACI5N,KAAM,SACNqR,QAAS,EAAG,GACZC,KAAM,GACNjO,aAAc,GAElBwK,OACI7N,KAAM,SACNqR,QAAS,EAAG,GACZC,KAAM,GACNjO,aAAc,GAElByK,aACI9N,KAAM,SACNqR,QAAS,EAAG,GACZC,KAAM,GACNjO,aAAc,IAElB0K,gBACI/N,KAAM,SACNqR,QAAS,EAAG,GACZhO,aAAc,GAElB8J,QACInN,KAAM,SACNqR,QAAS,EAAG,GACZhO,aAAc,GnCg1ErB9I,cmC50EcuX,GnCg1ET,SAAStX,EAAQD,GoCj3EvB,YpCq3ECA,GAAQU,YAAa,CoCn3EtB,IAAM8W,IACF1C,KACIrP,KAAM,SACNqR,QAAS,GAAI,GACbC,KAAM,GACNjO,aAAc,GpCw3ErB9I,coCp3EcwX,GpCw3ET,SAASvX,EAAQD,GqCn4EvB,YrCu4ECA,GAAQU,YAAa,CqCr4EtB,IAAM+W,IACFjF,KACI/M,KAAM,SACNqR,QAAS,EAAG,GACZC,KAAM,GACNjO,aAAc,IAElB2J,UACIhN,KAAM,SACNqR,QAAS,EAAG,GACZC,KAAM,GACNjO,aAAc,IAElB4K,eACIjO,KAAM,SACNqR,QAAS,EAAG,KACZhO,aAAc,KAElB6K,gBACIlO,KAAM,SACNqR,QAAS,EAAG,KACZhO,aAAc,KAElB8J,QACInN,KAAM,SACNqR,QAAS,EAAG,GACZhO,aAAc,GrC04ErB9I,cqCt4EcyX,GrC04ET,SAASxX,EAAQD,GsC16EvB,YtC86ECA,GAAQU,YAAa,CsC56EtB,IAAMgX,IACF7D,WACIpO,KAAM,SACNqR,QAAS,EAAG,GACZC,KAAM,GACNjO,aAAc,IAElBgL,MACIrO,KAAM,SACNqR,QAAS,EAAG,IACZC,KAAM,GACNjO,aAAc,GAElBiL,aACItO,KAAM,SACNqR,QAAS,EAAG,KACZhO,aAAc,GAElB8J,QACInN,KAAM,SACNqR,QAAS,EAAG,GACZhO,aAAc,GtCi7ErB9I,csC76Ec0X,GtCi7ET,SAASzX,EAAQD,GuC58EvB,YAEA,IAAA2X,GAAA,KACAC,EAAA,GAAAC,cAAAF,GACAG,EAAA,GAAAD,cAAAF,IAEA,WACA,OAAAtQ,GAAA,EAAiBsQ,EAAAtQ,EAAmBA,IACpCuQ,EAAAvQ,GAAAyG,KAAAiK,IAAA1Q,EAAAsQ,EAAA7J,KAAAkK,GAAA,IACAF,EAAAzQ,GAAAyG,KAAAmK,IAAA5Q,EAAAsQ,EAAA7J,KAAAkK,GAAA,OAIA/X,EAAAD,SACAkY,EAAAN,EACAO,EAAAL,IvCo9EM,SAAS7X,EAAQD,EAASH,IwCn+EhC,SAAAuY,GAAA,YAmCA,SAAAC,GAAApT,GACAG,KAAAH,eACAG,KAAAkT,MAAArT,EAAAsT,sBAAA,GACAnT,KAAAoT,KAAAvT,EAAAe,aACAZ,KAAA0P,IAAA1P,KAAAoT,KAAA9R,KACAtB,KAAAqT,KAAAxT,EAAAyT,mBACAtT,KAAAuT,KAAA1T,EAAAyT,mBACAtT,KAAAwT,GAAA3T,EAAAe,aACAZ,KAAAyT,GAAA5T,EAAAe,aACAZ,KAAA0T,OAAA7T,EAAA8T,oBAAA,GAEA3T,KAAAkT,MAAAU,aAAA,EACA5T,KAAAkT,MAAAW,iBAAA,WACA7T,KAAAoT,KAAA9R,KAAAtC,MAAA,EACAgB,KAAAqT,KAAAS,QAAAhB,EACA9S,KAAAuT,KAAAO,QAAAf,EACA/S,KAAAwT,GAAAlS,KAAAtC,MAAA,EACAgB,KAAAyT,GAAAnS,KAAAtC,MAAA,EAEAgB,KAAAkT,MAAAvP,QAAA3D,KAAAwT,GAAA,GACAxT,KAAAkT,MAAAvP,QAAA3D,KAAAyT,GAAA,GACAzT,KAAAwT,GAAA7P,QAAA3D,KAAA0T,OAAA,KACA1T,KAAAyT,GAAA9P,QAAA3D,KAAA0T,OAAA,KACA1T,KAAAoT,KAAAzP,QAAA3D,KAAAqT,MACArT,KAAAoT,KAAAzP,QAAA3D,KAAAuT,MACAvT,KAAAqT,KAAA1P,QAAA3D,KAAAwT,GAAAlS,MACAtB,KAAAuT,KAAA5P,QAAA3D,KAAAyT,GAAAnS,MAEAtB,KAAA+T,cAAA,EACA/T,KAAAgU,WAAA,KACAhU,KAAAiU,KAAA,KA/DA,GAAAH,GAAArZ,EAAA,GAkEAwY,GAAArU,UAAA+E,QAAA,SAAAuG,GACA,GAAArK,GAAAG,KAAAH,YACAG,MAAA+T,eACA/T,KAAA+T,cAAA,EACA/T,KAAAgU,WAAAnU,EAAAyR,aAAA,IAAAzR,EAAAwR,YACArR,KAAAgU,WAAArD,eAAA,GAAAuD,KAAA,MAEAlU,KAAAiU,KAAApU,EAAAoQ,qBACAjQ,KAAAiU,KAAA7D,OAAApQ,KAAAgU,WACAhU,KAAAiU,KAAA1C,MAAA,EACAvR,KAAAiU,KAAA/P,MAAArE,EAAAiP,aACA9O,KAAAiU,KAAAtQ,QAAA3D,KAAAoT,OAEAJ,EAAAmB,UAAAvV,UAAA+E,QAAA3I,KAAAgF,KAAA0T,OAAAxJ,IAGA+I,EAAArU,UAAAgF,WAAA,WACA,GAAA/D,GAAAG,KAAAH,YACAG,MAAA+T,eACA/T,KAAA+T,cAAA,EACA/T,KAAAiU,KAAA5P,KAAAxE,EAAAiP,aACA9O,KAAAiU,KAAArQ,aACA5D,KAAAiU,KAAA,KACAjU,KAAAgU,WAAA,MAEAhB,EAAAmB,UAAAvV,UAAAgF,WAAA5I,KAAAgF,KAAA0T,SAGA7Y,EAAAD,QAAAqY,IxCu+E8BjY,KAAKJ,EAAU,WAAa,MAAOoF,WAI3D,SAASnF,EAAQD,EAASH,GyC3kFhC,YAIA,SAAA2Z,GAAAvU,GACA,GAAAwU,GAAA,GAAApB,GAAApT,EAmBA,OAjBAhB,QAAAyV,iBAAAD,EAAAnB,OACAxD,KACA1Q,MAAAqV,EAAA3E,IACAzQ,YAAA,GAEA0E,SACA3E,MAAA,SAAAuV,GACA,MAAAF,GAAA1Q,QAAA4Q,KAGA3Q,YACA5E,MAAA,WACA,MAAAqV,GAAAzQ,iBAKAyQ,EAAAnB,MAtBA,GAAAD,GAAAxY,EAAA,GAyBAI,GAAAD,QAAAwZ,GzCklFM,SAASvZ,EAAQD,EAASH,I0C7mFhC,SAAAuY,GAAA,YAEA,IAAAwB,GAAAxB,EAAAwB,cAAAxB,EAAAyB,mBACAC,EAAAja,EAAA,GAEA+Z,OAAA5V,UAAA6Q,qBACA+E,EAAA5V,UAAA6Q,mBAAA,WACA,UAAAiF,GAAA1U,U1CmnF8BhF,KAAKJ,EAAU,WAAa,MAAOoF,WAI3D,SAASnF,EAAQD,EAASH,I2C/mFhC,SAAAkB,GA6GA,QAAAgZ,KACA,MAAAC,GAGA,QAAAA,GAAAC,GACA,KAAA7U,eAAA4U,IACA,UAAAA,GAAAC,EASA,IAPAlZ,EAAA6Y,eACA7Y,EAAA6Y,aAAA7Y,EAAA8Y,oBAEAI,IACAC,QAAAC,IAAA,mEACAF,EAAAlZ,EAAA6Y,cAAA,GAAA7Y,GAAA6Y,eAEAK,EACA,SAAA/N,OAAA,8EAEAkO,GAAAH,GACAI,EAAAJ,EACAK,EAAAlV,KAGA,QAAAgV,GAAAH,GAUA,QAAAM,KACA,GAAAZ,GAAAa,MAAAxW,UAAAyW,MAAAC,MAAApT,UAKA,OAJAqS,GAAAgB,EAAAC,cAAAD,EAAAC,cAAAjB,KAAAtT,MAAAsT,IAAAtT,OAAAsT,EACArS,UAAAkT,MAAAxW,UAAA6W,MAAAza,KAAAkH,WACAA,UAAAwT,QAAAnB,GACAoB,EAAAL,MAAAtV,KAAAkC,WACAqS,EAfA,GAAAM,EAAAe,oBAAA,GAEA,GAAAtU,GAAAuT,EAAAjU,aACAiV,EAAAhX,OAAAiX,eAAAjX,OAAAiX,eAAAxU,IACAqU,EAAAE,EAAAlS,OAEAkS,GAAAlS,QAAAwR,EACAN,EAAAe,kBAAA,GAYA,QAAAG,GAAAC,GACA,MAAAtN,MAAAuN,IAAA,EAAAvN,KAAAwN,MAAA,IAAAxN,KAAAC,IAAA,EAAAqN,EAAA,SAGA,QAAAG,GAAAC,EAAAC,GAIA,GAAAC,GAAAC,EAAApb,EAAA,EACAqb,EAAA,EACAnT,EAAA,EACAoT,EAAA,CAaA,OAXAH,GAAAF,EAAAM,gBAAAC,MAAA,mBACAxb,EAAAiN,SAAAkO,EAAA,QAAAA,EAAA,OAAAnU,OACAmU,EAAAD,EAAAK,gBAAAC,MAAA,mBACAH,EAAApO,SAAAkO,EAAA,QAAAA,EAAA,OAAAnU,OAEAqU,EAAArb,IACAA,EAAAqb,GAGAD,EAAAH,EAAAC,EAEA,KAAAlb,KAAA,IAEAkI,EAAAqF,KAAAwN,MAAAxN,KAAAqM,IAAAwB,GAAA7N,KAAAqM,IAAA,KACA0B,EAAA/N,KAAAC,IAAA,GAAAtF,IAEAkT,EAAAE,GAAA5N,QAAAxF,EAAAlI,GAAAsb,GAEA7N,WAAA2N,EAAA1N,SAAA1N,IAIA,QAAAyb,GAAAR,GACA,WAAAA,EACA,EAEA1N,KAAAmO,IAAAT,KAIA,QAAAU,GAAAC,GACA,OAAArO,KAAAF,IAAAuO,GAAArO,KAAAF,KAAAuO,KAAArO,KAAAF,IAAAuO,GAAArO,KAAAF,KAAAuO,IAGA,QAAAC,GAAAC,EAAAC,GACA,MAAA5T,UAAA2T,EAAAC,EAAAD,EAvMA,GAAAhC,GACAC,EACAiC,EAAA,SAAAC,EAAAC,GACAD,EAAApY,MAAAqY,GAEA9B,EAAA1W,OAAAC,OAAA,MACAwY,UACApY,UAAA,EACAF,MAAA,SAAAuY,GACAA,GACAvX,KAAAiB,MAAA2C,aACA5D,KAAAiB,MAAA0C,QAAA3D,KAAAwX,cACAxX,KAAAyX,kBACAzX,KAAAyX,iBAAAF,KAGAvX,KAAAiB,MAAA2C,aACA5D,KAAAiB,MAAA0C,QAAA3D,KAAAmB,WAIAqM,QACAhJ,IAAA,WACA,MAAAxE,MAAA0X,SAEAxD,IAAA,SAAAlV,GACAgB,KAAA2X,mBAAA3Y,IAGAgB,KAAA0X,QAAA1Y,EACAgB,KAAAsX,UAAAtY,GACAgB,KAAA2X,iBAAA3Y,KAGA2E,SACA3E,MAAA,SAAAgC,GACAhB,KAAAmB,OAAAwC,QAAA3C,KAGA4C,YACA5E,MAAA,SAAAgC,GACAhB,KAAAmB,OAAAyC,WAAA5C,KAGA4W,gBACA5Y,MAAA,SAAA6Y,GAEA,IADA,GAAA5V,GAAA4V,EAAA1V,OAAA,EACAF,KAAA,CACA,IAAA4V,EAAA5V,GAAA0B,QACA,MAAAmR,SAAAgD,MAAA,yDAAAD,EAAA5V,GAEA4V,GAAA5V,EAAA,GAAAhB,MACA4W,EAAA5V,GAAA0B,QAAAkU,EAAA5V,EAAA,GAAAhB,OAEA4W,EAAA5V,GAAA0B,QAAAkU,EAAA5V,EAAA,OAKA8V,aACA/Y,MAAA,WACA,GAAA+I,KACA,QAAArG,KAAA1B,MAAAgY,SACAjQ,EAAArG,GAAA1B,KAAAgY,SAAAtW,GAAA1C,KAEA,OAAA+I,KAGAkQ,UACAjZ,MAAA,SAAAkZ,EAAAlZ,EAAAmZ,EAAAC,GACA,GAIAC,GAJAnU,EAAAkU,OAAA,KAAAnD,EAAAnG,YACAwJ,EAAAH,OAAA,OACAI,EAAAvY,KAAAgY,SAAAE,GACAd,EAAApX,KAAAkY,EAGAd,GACAmB,EAAAC,aACAL,GAGAE,EAAA,0BACAjB,EAAA9H,sBAAApL,GACAkT,EAAAjI,eAAAiI,EAAApY,MAAAkF,IAJAmU,EAAA,iBAMAjB,EAAAiB,GAAArZ,EAAAsZ,EAAApU,IAEAkT,EAAApY,EAGA8V,QAAAgD,MAAA,wBAAA9X,KAAAD,UAKA0Y,EAAA,QACAC,EAAA,UACAC,EAAA,SACAC,EAAA,KAEA,oBAAA/d,MAAAD,QACAC,EAAAD,QAAAga,EAEAjZ,EAAAkd,OAAA,OAAAlE,GAmGAC,EAAAhW,UAAA+N,WAAA,SAAAhK,GACAA,IACAA,EAAA3C,KAAA+X,eAEA/X,KAAA+M,WAAApK,EAAAoK,YAAA/M,KAAAgY,SAAAjL,WAAA/N,MAEAgB,KAAAiB,MAAAgU,EAAArU,aACAZ,KAAAwX,aAAAvC,EAAArU,aACAZ,KAAA8Y,UAAA7D,EAAAhL,sBAAAjK,KAAA+M,WAAA,KACA/M,KAAAmB,OAAA8T,EAAArU,aAEAZ,KAAAwX,aAAA7T,QAAA3D,KAAA8Y,WACA9Y,KAAA8Y,UAAAnV,QAAA3D,KAAAmB,OAEA,IAEAF,GAAAE,EAAAwQ,EAAA1P,EAAAE,EAFA4W,EAAA,EACAC,EAAA,CAEAhZ,MAAA8Y,UAAA5N,eAAA,SAAAvK,GAKA,IAJAM,EAAAN,EAAAsY,YAAAtI,eAAA,GACAxP,EAAAR,EAAAuY,aAAAvI,eAAA,GACAgB,EAAAjJ,KAAAC,IAAA,GAAA3I,KAAA6M,MACA1K,EAAAlB,EAAAkB,OACAF,EAAA,EAAuBE,EAAAF,EAAYA,IACnC8W,GAAA/Y,KAAA8M,SACAiM,GAAA,IACAA,GAAA,EACAC,EAAArH,EAAAjJ,KAAAyQ,MAAAlY,EAAAgB,GAAA0P,EAAA,KAEAxQ,EAAAc,GAAA+W,GAIAhZ,KAAA6M,KAAAlK,EAAAkK,MAAA7M,KAAAgY,SAAAnL,KAAA7N,MACAgB,KAAA8M,SAAAkK,EAAArU,EAAAmK,SAAA9M,KAAAgY,SAAAlL,SAAA9N,OACAgB,KAAAwN,OAAA7K,EAAA6K,SAAA,GAEAoH,EAAAhW,UAAA+N,WAAA/N,UAAAC,OAAAC,OAAAyW,GACAxV,MACAf,MAAA,cAEAgZ,UACA9Y,UAAA,EACAF,OACA6N,MACA7N,MAAA,EACAoa,IAAA,EACAnD,IAAA,GACAuC,aAAA,EACAnY,KAAAuY,GAEA7L,YACA/N,MAAA,KACAoa,IAAA,IACAnD,IAAA,MACAuC,aAAA,EACAnY,KAAAuY,GAEApL,QACAxO,OAAA,EACAwZ,aAAA,EACAnY,KAAAqY,GAEA5L,UACA9N,MAAA,GACAoa,IAAA,KACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,KAIA5L,MACA5N,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAA8Y,UAAAjM,MAEAqH,IAAA,SAAAlV,GACAgB,KAAA8Y,UAAAjM,KAAA7N,IAGA8N,UACA7N,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAA8Y,UAAAhM,UAEAoH,IAAA,SAAAlV,GACAgB,KAAA8Y,UAAAhM,SAAA9N,MAKA4V,EAAAhW,UAAAya,QAAA,SAAA1W,GACAA,IACAA,EAAA3C,KAAA+X,eAEA/X,KAAAiB,MAAAgU,EAAArU,aACAZ,KAAAwX,aAAAvC,EAAArU,aACAZ,KAAAsZ,UAAAtZ,KAAAuZ,aAAA5W,EAAA6W,aACA,kCACAxZ,KAAAyZ,WAAAxE,EAAArU,aACAZ,KAAAmB,OAAA8T,EAAArU,aAEAZ,KAAAwX,aAAA7T,QAAA3D,KAAAsZ,UAAArY,OACAjB,KAAAsZ,UAAAnY,OAAAwC,QAAA3D,KAAAyZ,YACAzZ,KAAAyZ,WAAA9V,QAAA3D,KAAAmB,QAEAnB,KAAA0Z,WAAA1C,EAAArU,EAAA+W,WAAA1Z,KAAAgY,SACA0B,YACA1Z,KAAAwN,OAAA7K,EAAA6K,SAAA,GAEAoH,EAAAhW,UAAAya,QAAAza,UAAAC,OAAAC,OAAAyW,GACAxV,MACAf,MAAA,WAEAgZ,UACA9Y,UAAA,EACAF,OACA0a,YACA1a,MAAA,EACAoa,IAAA,EACAnD,IAAA,GACAuC,aAAA,EACAnY,KAAAoY,GAEAjL,QACAxO,OAAA,EACAwZ,aAAA,EACAnY,KAAAqY,KAIAgB,YACAza,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAyZ,WAAAnY,MAEA4S,IAAA,SAAAlV,GACAgB,KAAAyZ,WAAAnY,KAAAtC,UAGAua,cACAva,MAAA,SAAAwa,GACA,UAAAtE,GAAAyE,WACAC,QAAAJ,EACAvM,SAAA,EACAE,SAAA,QAMAyH,EAAAhW,UAAAib,OAAA,SAAAlX,GACAA,IACAA,EAAA3C,KAAA+X,eAEA/X,KAAAiB,MAAAgU,EAAArU,aACAZ,KAAA8Z,WAAA9Z,KAAAwX,aAAAvC,EAAArU,aACAZ,KAAA+Z,SAAA9E,EAAA9B,sBAAA,GACAnT,KAAAga,OAAA/E,EAAAvL,cACA1J,KAAAia,OAAAhF,EAAAvL,cACA1J,KAAAka,mBAAAjF,EAAArU,aACAZ,KAAAma,mBAAAlF,EAAArU,aACAZ,KAAAoa,OAAAnF,EAAAtB,oBAAA,GACA3T,KAAAmB,OAAA8T,EAAArU,aAEAZ,KAAAqa,KAAA,GAAAnF,GAAAoF,KACAtZ,OAAAhB,KAAAga,OAAAzM,UACAgN,SAAApD,IAEAnX,KAAAwa,KAAA,GAAAtF,GAAAoF,KACAtZ,OAAAhB,KAAAia,OAAA1M,UACAgN,SAAApD,IAGAnX,KAAAiB,MAAA0C,QAAA3D,KAAA8Z,YACA9Z,KAAA8Z,WAAAnW,QAAA3D,KAAAmB,QACAnB,KAAA8Z,WAAAnW,QAAA3D,KAAA+Z,UACA/Z,KAAA+Z,SAAApW,QAAA3D,KAAAga,OAAA,GACAha,KAAA+Z,SAAApW,QAAA3D,KAAAia,OAAA,GACAja,KAAAga,OAAArW,QAAA3D,KAAAka,oBACAla,KAAAia,OAAAtW,QAAA3D,KAAAma,oBACAna,KAAAka,mBAAAvW,QAAA3D,KAAAia,QACAja,KAAAma,mBAAAxW,QAAA3D,KAAAga,QACAha,KAAAga,OAAArW,QAAA3D,KAAAoa,OAAA,KACApa,KAAAia,OAAAtW,QAAA3D,KAAAoa,OAAA,KACApa,KAAAoa,OAAAzW,QAAA3D,KAAAmB,QAEAnB,KAAAqN,SAAA2J,EAAArU,EAAA0K,SAAArN,KAAAgY,SAAA3K,SACArO,OACAgB,KAAA0O,KAAAsI,EAAArU,EAAA+L,KAAA1O,KAAAgY,SAAAtJ,KAAA1P,OACAgB,KAAAya,MAAAzD,EAAArU,EAAA8X,MAAAza,KAAAgY,SAAAyC,MAAAzb,OACAgB,KAAA0a,MAAA1D,EAAArU,EAAA+X,MAAA1a,KAAAgY,SAAA0C,MAAA1b,OACAgB,KAAAwa,KAAAG,MAAAjS,KAAAkK,GAAA,EACA5S,KAAA8Z,WAAAxY,KAAAtC,MAAA,MACAgB,KAAAqa,KAAA/C,UAAA,GACAtX,KAAAwa,KAAAlD,UAAA,GACAtX,KAAAwN,OAAA7K,EAAA6K,SAAA,GAEAoH,EAAAhW,UAAAib,OAAAjb,UAAAC,OAAAC,OAAAyW,GACAxV,MACAf,MAAA,UAEAgZ,UACA9Y,UAAA,EACAF,OACAqO,UACArO,MAAA,GACAoa,IAAA,EACAnD,IAAA,IACAuC,aAAA,EACAnY,KAAAoY,GAEAgC,OACAzb,MAAA,MACAoa,IAAA,EACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,GAEAiC,OACA1b,MAAA,GACAoa,IAAA,EACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,GAEA/J,MACA1P,MAAA,IACAoa,IAAA,EACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,GAEAjL,QACAxO,OAAA,EACAwZ,aAAA,EACAnY,KAAAqY,KAIA+B,OACAxb,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAA4a,QAEA1G,IAAA,SAAAlV,GACAgB,KAAA4a,OAAA,QAAAlS,KAAAC,IAAA,GAAA3J,IACAgB,KAAAqa,KAAAQ,OAAA7a,KAAA4a,OACA5a,KAAAwa,KAAAK,OAAA7a,KAAA4a,OACA5a,KAAA8a,OAAA9a,KAAA8a,SAGAJ,OACAzb,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAA8a,QAEA5G,IAAA,SAAAlV,GACAgB,KAAA8a,OAAA9b,EACAgB,KAAAqa,KAAAU,YAAA/a,KAAA8a,OAAA9a,KAAA4a,OACA5a,KAAAwa,KAAAO,YAAA/a,KAAA8a,OAAA9a,KAAA4a,SAGAvN,UACApO,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAgb,WAEA9G,IAAA,SAAAlV,GACAgB,KAAAgb,UAAAhc,EACAgB,KAAAka,mBAAA5Y,KAAAtC,MAAAgB,KAAAgb,UACAhb,KAAAma,mBAAA7Y,KAAAtC,MAAAgB,KAAAgb,YAGAtM,MACAzP,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAib,OAEA/G,IAAA,SAAAlV,GACAgB,KAAAib,MAAAjc,EACAgB,KAAAqa,KAAAhT,UAAArH,KAAAib,MACAjb,KAAAwa,KAAAnT,UAAArH,KAAAib,UAKArG,EAAAhW,UAAAsc,WAAA,SAAAvY,GACAA,IACAA,EAAA3C,KAAA+X,eAEA/X,KAAAiB,MAAAgU,EAAArU,aACAZ,KAAAmb,SAAAnb,KAAAwX,aAAAvC,EAAAmG,2BACApb,KAAAyZ,WAAAxE,EAAArU,aACAZ,KAAAmB,OAAA8T,EAAArU,aAEAZ,KAAAmb,SAAAxX,QAAA3D,KAAAyZ,YACAzZ,KAAAyZ,WAAA9V,QAAA3D,KAAAmB,QAEAnB,KAAAqb,WAAArE,EAAArU,EAAA0Y,WAAArb,KAAAgY,SACAqD,WACArc,OACAgB,KAAA0Z,WAAA/W,EAAA+W,YAAA1Z,KAAAgY,SAAA0B,WACA1a,MACAgB,KAAAsb,UAAAtE,EAAArU,EAAA2Y,UAAAtb,KAAAgY,SAAAsD,UACAtc,OACAgB,KAAAoE,QAAAzB,EAAAyB,SAAApE,KAAAgY,SAAA5T,QAAApF,MACAgB,KAAA4J,OAAAoN,EAAArU,EAAAiH,OAAA5J,KAAAgY,SAAApO,OACA5K,OACAgB,KAAAub,MAAA5Y,EAAA4Y,OAAAvb,KAAAgY,SAAAuD,MAAAvc,MACAgB,KAAAwb,KAAAxE,EAAArU,EAAA6Y,KAAAxb,KAAAgY,SAAAwD,KAAAxc,OACAgB,KAAAwN,OAAA7K,EAAA6K,SAAA,GAEAoH,EAAAhW,UAAAsc,WAAAtc,UAAAC,OAAAC,OAAAyW,GACAxV,MACAf,MAAA,cAEAgZ,UACA9Y,UAAA,EACAF,OACAsc,WACAtc,MAAA,IACAoa,IAAA,IACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,GAEArU,SACApF,MAAA,IACAoa,IAAA,GACAnD,IAAA,IACAuC,aAAA,EACAnY,KAAAoY,GAEAiB,YACA1a,MAAA,EACAoa,IAAA,EACAnD,IAAA,IACAuC,aAAA,EACAnY,KAAAoY,GAEA7O,QACA5K,MAAA,EACAoa,IAAA,EACAnD,IAAA,IACAuC,aAAA,EACAnY,KAAAoY,GAEA8C,OACAvc,MAAA,EACAoa,IAAA,EACAnD,IAAA,GACAuC,aAAA,EACAnY,KAAAoY,GAEA+C,MACAxc,MAAA,EACAoa,IAAA,EACAnD,IAAA,GACAuC,aAAA,EACAnY,KAAAoY,GAEA4C,YACArc,OAAA,EACAwZ,aAAA,EACAnY,KAAAqY,GAEAlL,QACAxO,OAAA,EACAwZ,aAAA,EACAnY,KAAAqY,KAIA+C,eACAzc,MAAA,WACA,GAAA0c,GAAA,EAEAxgB,EAAA8E,KAAAmb,QACA,SAAAjgB,EAAAogB,UAAAtc,MAAA9D,EAAAogB,UAAAtc,MACA9D,EAAAqgB,MAAAvc,OACA0c,IAGAL,YACApc,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAA2b,aAEAzH,IAAA,SAAAlV,GACAgB,KAAA2b,YAAA3c,EACAgB,KAAA2b,cAAA3b,KAAA0Z,WAAA1Z,KAAAyb,mBAGAH,WACArc,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAmb,SAAAG,WAEApH,IAAA,SAAAlV,GACAgB,KAAAmb,SAAAG,UAAAtc,QACAgB,KAAA2b,cAAA3b,KAAA0Z,WAAA1Z,KAAAyb,mBAGAF,OACAtc,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAmb,SAAAI,OAEArH,IAAA,SAAAlV,GACAgB,KAAAmb,SAAAI,MAAAvc,QACAgB,KAAA2b,cAAA3b,KAAA0Z,WAAA1Z,KAAAyb,mBAGAD,MACAvc,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAmb,SAAAK,MAEAtH,IAAA,SAAAlV,GACAgB,KAAAmb,SAAAK,KAAAxc,QACAgB,KAAA2b,cAAA3b,KAAA0Z,WAAA1Z,KAAAyb,mBAGA7R,QACA3K,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAmb,SAAAvR,QAEAsK,IAAA,SAAAlV,GACAgB,KAAAmb,SAAAvR,OAAA5K,QAAA,MAGAoF,SACAnF,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAmb,SAAA/W,SAEA8P,IAAA,SAAAlV,GACAgB,KAAAmb,SAAA/W,QAAApF,EAAA,MAGA0a,YACAza,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAyZ,WAAAnY,MAEA4S,IAAA,SAAAlV,GACAgB,KAAAyZ,WAAAnY,KAAAtC,MAAA+W,EAAA/W,OAKA4V,EAAAhW,UAAA+a,UAAA,SAAAhX,GACAA,IACAA,EAAA3C,KAAA+X,eAEA/X,KAAAiB,MAAAgU,EAAArU,aACAZ,KAAAwX,aAAAvC,EAAArU,aACAZ,KAAAsZ,UAAArE,EAAA2G,kBACA5b,KAAAkN,IAAA+H,EAAArU,aACAZ,KAAA6b,UAAA5G,EAAA6G,qBACA9b,KAAA+b,WAAA9G,EAAA6G,qBACA9b,KAAAoN,IAAA6H,EAAArU,aACAZ,KAAAmB,OAAA8T,EAAArU,aAEAZ,KAAAwX,aAAA7T,QAAA3D,KAAA6b,WACA7b,KAAAwX,aAAA7T,QAAA3D,KAAAkN,KACAlN,KAAA6b,UAAAlY,QAAA3D,KAAA+b,YACA/b,KAAA+b,WAAApY,QAAA3D,KAAAsZ,WACAtZ,KAAAsZ,UAAA3V,QAAA3D,KAAAoN,KACApN,KAAAoN,IAAAzJ,QAAA3D,KAAAmB,QACAnB,KAAAkN,IAAAvJ,QAAA3D,KAAAmB,QAEAnB,KAAAiN,SAAA+J,EAAArU,EAAAsK,SAAAjN,KAAAgY,SAAA/K,SACAjO,OACAgB,KAAAmN,SAAA6J,EAAArU,EAAAwK,SAAAnN,KAAAgY,SAAA7K,SACAnO,OACAgB,KAAAgc,QAAArZ,EAAAqZ,SAAAhc,KAAAgY,SAAAgE,QAAAhd,MACAgB,KAAAoQ,OAAAzN,EAAAiX,SACA,+BACA5Z,KAAAic,OAAAtZ,EAAAsZ,QAAAjc,KAAAgY,SAAAiE,OAAAjd,MACAgB,KAAAyC,MAAAuU,EAAArU,EAAAF,MAAAzC,KAAAgY,SAAAvV,MAAAzD,OACAgB,KAAA+b,WAAA1b,KAAA,UACAL,KAAA6b,UAAAxb,KAAA,WACAL,KAAAwN,OAAA7K,EAAA6K,SAAA,GAEAoH,EAAAhW,UAAA+a,UAAA/a,UAAAC,OAAAC,OAAAyW,GACAxV,MACAf,MAAA,aAEAgZ,UACA9Y,UAAA,EACAF,OACAgd,SACAhd,MAAA,MACAoa,IAAA,GACAnD,IAAA,MACAuC,aAAA,EACAnY,KAAAoY,GAEAwD,QACAjd,MAAA,GACAoa,IAAA,GACAnD,IAAA,MACAuC,aAAA,EACAnY,KAAAoY,GAEAxL,UACAjO,MAAA,EACAoa,IAAA,EACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,GAEAtL,UACAnO,MAAA,EACAoa,IAAA,EACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,GAEAhW,OACAzD,MAAA,EACAoa,IAAA,EACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,KAIAwD,QACAzX,IAAA,WACA,MAAAxE,MAAA6b,UAAAxU,WAEA6M,IAAA,SAAAlV,GACAgB,KAAA6b,UAAAxU,UAAArI,UAGAgd,SACAxX,IAAA,WACA,MAAAxE,MAAA+b,WAAA1U,WAEA6M,IAAA,SAAAlV,GACAgB,KAAA+b,WAAA1U,UAAArI,UAGAyD,OACA+B,IAAA,WACA,MAAAxE,MAAAmB,OAAAG,MAEA4S,IAAA,SAAAlV,GACAgB,KAAAmB,OAAAG,KAAAtC,UAGAiO,UACAzI,IAAA,WACA,MAAAxE,MAAAkN,IAAA5L,MAEA4S,IAAA,SAAAlV,GACAgB,KAAAkN,IAAA5L,KAAAtC,UAGAmO,UACA3I,IAAA,WACA,MAAAxE,MAAAoN,IAAA9L,MAEA4S,IAAA,SAAAlV,GACAgB,KAAAoN,IAAA9L,KAAAtC,UAGAoR,QACAnR,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAsZ,UAAAlJ,QAEA8D,IAAA,SAAA0F,GACA,GAAAN,GAAAtZ,KAAAsZ,UACA4C,EAAA,GAAAC,eACA,OAAAvC,IAIAsC,EAAAE,KAAA,MAAAxC,GAAA,GACAsC,EAAAG,aAAA,cACAH,EAAAI,mBAAA,WACA,IAAAJ,EAAAK,aACAL,EAAAM,OAAA,KAAAN,EAAAM,OAAA,WAAAN,EAAAM,SACAvH,EAAAwH,gBAAAP,EAAAQ,SAAA,SAAAtM,GACAkJ,EAAAlJ,UAC6B,SAAAzP,GAC7BA,GAAAmU,QAAAC,IAAA,gDAAApU,UAKAub,GAAAS,KAAA,WAhBA7H,SAAAC,IAAA,uDAqBAH,EAAAhW,UAAAoO,MAAA,SAAArK,GACAA,IACAA,EAAA3C,KAAA+X,eAEA/X,KAAAiB,MAAAgU,EAAArU,aACAZ,KAAAwX,aAAAvC,EAAArU,aACAZ,KAAAkN,IAAA+H,EAAArU,aACAZ,KAAAoN,IAAA6H,EAAArU,aACAZ,KAAAuB,OAAA0T,EAAA6G,qBACA9b,KAAAya,MAAAxF,EAAAvL,cACA1J,KAAA4c,aAAA3H,EAAArU,aACAZ,KAAAmB,OAAA8T,EAAArU,aAEAZ,KAAAwX,aAAA7T,QAAA3D,KAAAya,OACAza,KAAAwX,aAAA7T,QAAA3D,KAAAkN,KACAlN,KAAAya,MAAA9W,QAAA3D,KAAAuB,QACAvB,KAAAuB,OAAAoC,QAAA3D,KAAA4c,cACA5c,KAAA4c,aAAAjZ,QAAA3D,KAAAya,OACAza,KAAA4c,aAAAjZ,QAAA3D,KAAAoN,KACApN,KAAAoN,IAAAzJ,QAAA3D,KAAAmB,QACAnB,KAAAkN,IAAAvJ,QAAA3D,KAAAmB,QAEAnB,KAAAuN,UAAA5K,EAAA4K,WAAAvN,KAAAgY,SAAAzK,UAAAvO,MACAgB,KAAAqN,SAAA2J,EAAArU,EAAA0K,SAAArN,KAAAgY,SAAA3K,SAAArO,OACAgB,KAAAmN,SAAA6J,EAAArU,EAAAwK,SAAAnN,KAAAgY,SAAA7K,SAAAnO,OACAgB,KAAAiN,SAAA+J,EAAArU,EAAAsK,SAAAjN,KAAAgY,SAAA/K,SAAAjO,OACAgB,KAAAsN,OAAA3K,EAAA2K,QAAAtN,KAAAgY,SAAA1K,OAAAtO,MACAgB,KAAAuB,OAAAlB,KAAA,UACAL,KAAAwN,OAAA7K,EAAA6K,SAAA,GAEAoH,EAAAhW,UAAAoO,MAAApO,UAAAC,OAAAC,OAAAyW,GACAxV,MACAf,MAAA,SAEAgZ,UACA9Y,UAAA,EACAF,OACAuO,WACAvO,MAAA,IACAoa,IAAA,GACAnD,IAAA,IACAuC,aAAA,EACAnY,KAAAoY,GAEApL,UACArO,MAAA,IACAoa,IAAA,EACAnD,IAAA,GACAuC,aAAA,EACAnY,KAAAoY,GAEAnL,QACAtO,MAAA,IACAoa,IAAA,GACAnD,IAAA,IACAuC,aAAA,EACAnY,KAAAoY,GAEAtL,UACAnO,MAAA,GACAoa,IAAA,EACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,GAEAxL,UACAjO,MAAA,EACAoa,IAAA,EACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,KAIAlL,WACAtO,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAya,MAAAlN,WAEA2G,IAAA,SAAAlV,GACAgB,KAAAya,MAAAlN,UAAAvO,QAAA,MAGAmO,UACAlO,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAoN,IAAA9L,MAEA4S,IAAA,SAAAlV,GACAgB,KAAAoN,IAAA9L,KAAAtC,UAGAiO,UACAhO,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAkN,IAAA5L,MAEA4S,IAAA,SAAAlV,GACAgB,KAAAkN,IAAA5L,KAAAtC,UAGAqO,UACApO,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAA4c,aAAAtb,MAEA4S,IAAA,SAAAlV,GACAgB,KAAA4c,aAAAtb,KAAAtC,UAGAsO,QACArO,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAuB,OAAA8F,WAEA6M,IAAA,SAAAlV,GACAgB,KAAAuB,OAAA8F,UAAArI,YAKA4V,EAAAhW,UAAA6O,OAAA,SAAA9K,GACAA,IACAA,EAAA3C,KAAA+X,eAEA/X,KAAAiB,MAAAgU,EAAArU,aACAZ,KAAAwX,aAAAvC,EAAArU,aACAZ,KAAAuB,OAAA0T,EAAA6G,qBACA9b,KAAAmB,OAAA8T,EAAArU,aAEAZ,KAAAwX,aAAA7T,QAAA3D,KAAAuB,QACAvB,KAAAuB,OAAAoC,QAAA3D,KAAAmB,QAEAnB,KAAAqH,UAAA1E,EAAA0E,WAAArH,KAAAgY,SAAA3Q,UACArI,MACAgB,KAAA0N,EAAA/K,EAAAoL,WAAA/N,KAAAgY,SAAAtK,EAAA1O,MACAgB,KAAA6N,WAAAmJ,EAAArU,EAAAkL,WAAA7N,KAAAgY,SACAnK,WACA7O,OACAgB,KAAAsB,KAAA0V,EAAArU,EAAArB,KAAAtB,KAAAgY,SAAA1W,KAAAtC,OACAgB,KAAAwN,OAAA7K,EAAA6K,SAAA,GAEAoH,EAAAhW,UAAA6O,OAAA7O,UAAAC,OAAAC,OAAAyW,GACAxV,MACAf,MAAA,UAEAgZ,UACA9Y,UAAA,EACAF,OACAqI,WACArI,MAAA,IACAoa,IAAA,GACAnD,IAAA,MACAuC,aAAA,EACAnY,KAAAoY,GAEA/K,GACA1O,MAAA,EACAoa,IAAA,KACAnD,IAAA,IACAuC,aAAA,EACAnY,KAAAoY,GAEAnX,MACAtC,MAAA,EACAoa,IAAA,IACAnD,IAAA,GACAuC,aAAA,EACAnY,KAAAoY,GAEAjL,QACAxO,OAAA,EACAwZ,aAAA,EACAnY,KAAAqY,GAEA7K,YACA7O,MAAA,UACAwZ,aAAA,EACAnY,KAAAsY,KAIA9K,YACA5O,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAuB,OAAAlB,MAEA6T,IAAA,SAAAlV,GACAgB,KAAAuB,OAAAlB,KAAArB,IAGA0O,GACAzO,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAuB,OAAAmM,GAEAwG,IAAA,SAAAlV,GACAgB,KAAAuB,OAAAmM,EAAA1O,UAGAsC,MACArC,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAuB,OAAAD,MAEA4S,IAAA,SAAAlV,GACAgB,KAAAuB,OAAAD,KAAAtC,UAGAqI,WACApI,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAuB,OAAA8F,WAEA6M,IAAA,SAAAlV,GACAgB,KAAAuB,OAAA8F,UAAArI,YAKA4V,EAAAhW,UAAAkP,WAAA,SAAAnL,GACAA,IACAA,EAAA3C,KAAA+X,eAEA/X,KAAA+M,WAAApK,EAAAoK,YAAA/M,KAAAgY,SAAAjL,WACA/N,MAEAgB,KAAAiB,MAAAgU,EAAArU,aACAZ,KAAAwX,aAAAvC,EAAArU,aACAZ,KAAA8Y,UAAA7D,EAAAhL,sBAAAjK,KAAA+M,WACA,EACA,GACA/M,KAAAmB,OAAA8T,EAAArU,aAEAZ,KAAAwX,aAAA7T,QAAA3D,KAAA8Y,WACA9Y,KAAA8Y,UAAAnV,QAAA3D,KAAAmB,OAEA,IAAA0b,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,CACAP,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,CACA,IAAAnc,GAAAE,EAAA4O,EAAAsN,EAAApb,EAAAE,CACAnC,MAAA8Y,UAAA5N,eAAA,SAAAvK,GAOA,IANAM,EAAAN,EAAAsY,YAAAtI,eAAA,GACAxP,EAAAR,EAAAuY,aAAAvI,eAAA,GACAZ,EAAA,KAAA/P,KAAAsN,OACAgQ,YAAA,QAAAvN,WACAsN,EAAArd,KAAA+N,WAAA,MAAAgC,KACA5N,EAAAlB,EAAAkB,OACAF,EAAA,EAAuBE,EAAAF,EAAYA,IACnChB,EAAAgB,IAAAmb,EAAAC,EACApc,EAAAgB,IAAAqb,YACAL,EAAAhc,EAAAgB,GAAA,GAAA4a,GAAA,EAAA9M,GAAAkN,EACAJ,EAAA5b,EAAAgB,GACAib,EAAAD,EAAA,GAAAH,GAAA,EAAA/M,GAAAmN,EACAJ,EAAAG,EACAE,EAAAD,EAAA,GAAAH,GAAA,EAAAhN,GAAAoN,EACAJ,EAAAG,EACAE,EAAAD,EAAA,GAAAH,GAAA,EAAAjN,GAAAqN,EACAJ,EAAAG,EACAhc,EAAAc,GAAAmb,GAIApd,KAAAsN,OAAA0J,EAAArU,EAAA2K,OAAAtN,KAAAgY,SAAA1K,OACAtO,OACAgB,KAAA+N,UAAAiJ,EAAArU,EAAAoL,UAAA/N,KAAAgY,SAAAjK,UACA/O,OACAgB,KAAAwN,OAAA7K,EAAA6K,SAAA,GAEAoH,EAAAhW,UAAAkP,WAAAlP,UAAAC,OAAAC,OAAAyW,GACAxV,MACAf,MAAA,cAEAgZ,UACA9Y,UAAA,EACAF,OACA+N,YACA/N,MAAA,KACAoa,IAAA,IACAnD,IAAA,MACAuC,aAAA,EACAnY,KAAAuY,GAEApL,QACAxO,OAAA,EACAwZ,aAAA,EACAnY,KAAAqY,GAEApL,QACAtO,MAAA,KACAoa,IAAA,KACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,GAEA1K,WACA/O,MAAA,IACAoa,IAAA,EACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,KAIAnL,QACArO,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAA8Y,UAAAxL,QAEA4G,IAAA,SAAAlV,GACAgB,KAAA8Y,UAAAxL,OAAAtO,IAGA+O,WACA9O,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAA8Y,UAAA/K,WAEAmG,IAAA,SAAAlV,GACAgB,KAAA8Y,UAAA/K,UAAA/O,MAKA4V,EAAAhW,UAAAoP,UAAA,SAAArL,GACAA,IACAA,EAAA3C,KAAA+X,eAEA/X,KAAAiB,MAAAgU,EAAArU,aACAZ,KAAAwX,aAAAvC,EAAArU,aACAZ,KAAAud,WAAAtI,EAAArU,aACAZ,KAAAwd,WAAAvI,EAAA3B,mBACAtT,KAAAyd,YAAAxI,EAAArU,aACAZ,KAAAmB,OAAA8T,EAAArU,aAEAZ,KAAAwX,aAAA7T,QAAA3D,KAAAud,YACAvd,KAAAud,WAAA5Z,QAAA3D,KAAAwd,YACAxd,KAAAwd,WAAA7Z,QAAA3D,KAAAyd,aACAzd,KAAAyd,YAAA9Z,QAAA3D,KAAAmB,QAEAnB,KAAA0d,SAAA,GAAAjL,cAAAzS,KAAA2d,YACA3d,KAAAkO,MAAA8I,EAAArU,EAAAuL,MAAAlO,KAAAgY,SAAA9J,MAAAlP,OACAgB,KAAAiO,WAAA+I,EAAArU,EAAAsL,WAAAjO,KAAAgY,SACA/J,WACAjP,OACAgB,KAAAmO,YAAA6I,EAAArU,EAAAwL,YAAAnO,KAAAgY,SACA7J,YACAnP,OACAgB,KAAAoO,eAAA4I,EAAArU,EAAAyL,eAAApO,KACAgY,SACA5J,eAAApP,OACAgB,KAAAwN,OAAA7K,EAAA6K,SAAA,GAEAoH,EAAAhW,UAAAoP,UAAApP,UAAAC,OAAAC,OAAAyW,GACAxV,MACAf,MAAA,aAEAgZ,UACA9Y,UAAA,EACAF,OACAkP,OACAlP,MAAA,EACAoa,IAAA,EACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,EACAmF,QAAA,GAEA3P,YACAjP,MAAA,EACAoa,IAAA,EACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,EACAmF,QAAA,GAEAzP,aACAnP,MAAA,KACAoa,IAAA,EACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,GAEArK,gBACApP,MAAA,EACAoa,IAAA,EACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAuY,KAIA+E,YACA3e,MAAA,MAEAkP,OACA1J,IAAA,WACA,MAAAxE,MAAAud,WAAAjc,MAEA4S,IAAA,SAAAlV,GACAgB,KAAA6d,OAAA7e,IAGAmP,aACA3J,IAAA,WACA,MAAAxE,MAAA8d,cAEA5J,IAAA,SAAAlV,GACAgB,KAAA8d,aAAA9e,EACAsE,SAAAtD,KAAA+d,kBACA/d,KAAA+d,gBAAA,GAEA/d,KAAAge,qBAAAhe,KAAA+d,iBACA/d,KAAA8d,aACA9d,KAAA2d,WAAA3d,KAAA0d,UACA1d,KAAAwd,WAAA1J,MAAA9T,KAAA0d,WAGAzP,YACAzJ,IAAA,WACA,MAAAxE,MAAAyd,YAAAnc,MAEA4S,IAAA,SAAAlV,GACAgB,KAAAie,YAAAlI,EAAA/W,KAGAoP,gBACA5J,IAAA,WACA,MAAAxE,MAAA+d,iBAEA7J,IAAA,SAAAlV,GACAgB,KAAA+d,gBAAA/e,EACAgB,KAAAmO,YAAAnO,KAAA8d,eAGAE,sBACAhf,OACA,SAAAkf,EAAAC,EAAAT,GACAQ,EAAAxV,KAAA0Q,IAAA8E,EAAA,MACA,IACAjc,GAAAmU,EADAgI,EAAA,EAAAF,GAAA,EAAAA,EAEA,KAAAjc,EAAA,EAA+Bkc,EAAAlc,EAAeA,IAC9CmU,EAAA,EAAAnU,EAAAkc,EAAA,EACAT,EAAAzb,IAAA,EAAAmc,GAAAhI,GAAA,EAAAgI,EAAA1V,KAAAmO,IAAAT,KAGA,SAAA8H,EAAAC,EAAAT,GACA,GAAAzb,GAAAmU,EAAAC,CACA,KAAApU,EAAA,EAA+Bkc,EAAAlc,EAAeA,IAC9CmU,EAAA,EAAAnU,EAAAkc,EAAA,EACA9H,GAAA,GAAA3N,KAAAC,IAAAyN,EAAA,UAAAC,GAAA,UACAqH,EAAAzb,GAAA6U,EAAAT,IAGA,SAAA6H,EAAAC,EAAAT,GACA,GAAAzb,GAAAmU,EAAAC,EAAAgI,EAAA,EAAAH,CACA,KAAAjc,EAAA,EAA+Bkc,EAAAlc,EAAeA,IAC9CmU,EAAA,EAAAnU,EAAAkc,EAAA,EACA9H,EAAA,EAAAD,GAAA1N,KAAAC,IAAAD,KAAAmO,IAAAT,GAAAiI,EAAA,KAAA3V,KAAAC,IAAAyN,EAAAiI,GACAX,EAAAzb,GAAA6U,EAAA,EAAAT,IAGA,SAAA6H,EAAAC,EAAAT,GACA,GAAAzb,GAAAmU,EAAAC,EAAAiI,EAAAD,EAAA,EAAAH,EAAA,UAAAA,CACA,KAAAjc,EAAA,EAA+Bkc,EAAAlc,EAAeA,IAC9CmU,EAAA,EAAAnU,EAAAkc,EAAA,EACAG,EAAA5V,KAAAmO,IAAAT,GACAiI,EAAAC,EAAAjI,EAAAiI,EACAA,EAAAD,EAAAhI,EAAAgI,GAAAC,EAAAD,IAAA,EAAA3V,KAAAC,KAAA2V,EAAAD,IAAA,EAAAA,GAAA,IACAC,EAAA,IAAAjI,EAAAiI,GACAZ,EAAAzb,GAAA2U,EAAAR,GAAAC,GAAA,IAAAgI,EAAA,QAGA,SAAAH,EAAAC,EAAAT,GACA,GAAAzb,GAAAmU,CACA,KAAAnU,EAAA,EAA+Bkc,EAAAlc,EAAeA,IAC9CmU,EAAA,EAAAnU,EAAAkc,EAAA,GACA,OAAA/H,EACAsH,EAAAzb,GAAA,QAAAyG,KAAAC,IAAA,GAAAD,KAAAmO,IAAAT,GAAA,kBAAA1N,KAAAmO,IAAAT,GACA,cACyBA,IAAA,gBAAAA,EACzBsH,EAAAzb,GAAA,QAAAmU,KAAA,OAAAA,EAEAsH,EAAAzb,GAAA,SAIA,SAAAic,EAAAC,EAAAT,GACA,GAIAzb,GAAAmU,EAJAiI,EAAA,EAAA3V,KAAAwN,MAAA,GAAAgI,GAEArR,EAAAnE,KAAAwN,MAAAxN,KAAAC,IAAA,EAAA0V,EAAA,GAGA,KAAApc,EAAA,EAA+Bkc,EAAAlc,EAAeA,IAC9CmU,EAAA,EAAAnU,EAAAkc,EAAA,EACAT,EAAAzb,GAAAyG,KAAAwN,MAAAE,EAAAvJ,UAOA+H,EAAAhW,UAAA2f,OAAA,SAAA5b,GACAA,IACAA,EAAA3C,KAAA+X,eAEA/X,KAAAiB,MAAAgU,EAAArU,aACAZ,KAAA+Z,SAAA/Z,KAAAwX,aAAAvC,EAAA9B,sBAAA,GACAnT,KAAAwe,YACAxe,KAAAye,YACAze,KAAA0e,kBAAAzJ,EAAArU,aACAZ,KAAA2e,kBAAA1J,EAAArU,aACAZ,KAAAoa,OAAAnF,EAAAtB,oBAAA,GACA3T,KAAA4e,eAAA3J,EAAArU,aACAZ,KAAAmB,OAAA8T,EAAArU,aACAZ,KAAAqa,KAAA,GAAAnF,GAAAoF,KACAtZ,OAAAhB,KAAAwe,SACAjE,SAAAva,KAAAua,WAEAva,KAAAwa,KAAA,GAAAtF,GAAAoF,KACAtZ,OAAAhB,KAAAye,SACAlE,SAAAva,KAAAua,UAIA,KADA,GAAAtY,GAAAjC,KAAA6e,MACA5c,KACAjC,KAAAwe,SAAAvc,GAAAgT,EAAA6G,qBACA9b,KAAAye,SAAAxc,GAAAgT,EAAA6G,qBACA9b,KAAAwe,SAAAvc,GAAA5B,KAAA,UACAL,KAAAye,SAAAxc,GAAA5B,KAAA,SAEAL,MAAAiB,MAAA0C,QAAA3D,KAAA+Z,UACA/Z,KAAAiB,MAAA0C,QAAA3D,KAAAmB,QACAnB,KAAA+Z,SAAApW,QAAA3D,KAAAwe,SAAA,QACAxe,KAAA+Z,SAAApW,QAAA3D,KAAAye,SAAA,QACAze,KAAA4X,eAAA5X,KAAAwe,UACAxe,KAAA4X,eAAA5X,KAAAye,UACAze,KAAAwe,SAAAxe,KAAA6e,MAAA,GAAAlb,QAAA3D,KAAA0e,mBACA1e,KAAAwe,SAAAxe,KAAA6e,MAAA,GAAAlb,QAAA3D,KAAAoa,OAAA,KACApa,KAAAye,SAAAze,KAAA6e,MAAA,GAAAlb,QAAA3D,KAAA2e,mBACA3e,KAAAye,SAAAze,KAAA6e,MAAA,GAAAlb,QAAA3D,KAAAoa,OAAA,KACApa,KAAA0e,kBAAA/a,QAAA3D,KAAAwe,SAAA,IACAxe,KAAA2e,kBAAAhb,QAAA3D,KAAAye,SAAA,IACAze,KAAAoa,OAAAzW,QAAA3D,KAAAmB,QAEAnB,KAAA0O,KAAAsI,EAAArU,EAAA+L,KAAA1O,KAAAgY,SAAAtJ,KAAA1P,OACAgB,KAAA8e,wBAAAnc,EAAAmc,yBAAA9e,KAAAgY,SAAA8G,wBAAA9f,MACAgB,KAAA0a,MAAA1D,EAAArU,EAAA+X,MAAA1a,KAAAgY,SAAA0C,MAAA1b,OACAgB,KAAAqN,SAAA2J,EAAArU,EAAA0K,SAAArN,KAAAgY,SAAA3K,SAAArO,OACAgB,KAAA2O,YAAAqI,EAAArU,EAAAgM,YAAA3O,KAAAgY,SAAArJ,YAAA3P,OAEAgB,KAAAqa,KAAA/C,UAAA,GACAtX,KAAAwa,KAAAlD,UAAA,GACAtX,KAAAwN,OAAA7K,EAAA6K,SAAA,GAEAoH,EAAAhW,UAAA2f,OAAA3f,UAAAC,OAAAC,OAAAyW,GACAxV,MACAf,MAAA,UAEA6f,OACA7f,MAAA,GAEAgZ,UACA9Y,UAAA,EACAF,OACA0P,MACA1P,MAAA,GACAoa,IAAA,EACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,GAEAiC,OACA1b,MAAA,GACAoa,IAAA,EACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,GAEApL,UACArO,MAAA,GACAoa,IAAA,EACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,GAEA9J,aACA3P,MAAA,GACAoa,IAAA,EACAnD,IAAA,IACAuC,aAAA,EACAnY,KAAAoY,GAEAqG,yBACA9f,MAAA,IACAoa,IAAA,IACAnD,IAAA,KACAuC,aAAA,EACAnY,KAAAoY,KAIA8B,UACAvb,MAAA,SAAA+f,EAAA/f,GACA,OAAA6f,GAAA,EAAmC,EAAAA,EAAWA,IAC9CE,EAAAF,GAAAxX,UAAArI,UAIA0b,OACAlW,IAAA,WACA,MAAAxE,MAAA8a,QAEA5G,IAAA,SAAAlV,GACAgB,KAAA8a,OAAA9b,EACAgB,KAAAqa,KAAAU,YAAA/a,KAAAgf,yBAAAhf,KAAA8a,OACA9a,KAAAwa,KAAAO,YAAA/a,KAAAgf,yBAAAhf,KAAA8a,SAGApM,MACAlK,IAAA,WACA,MAAAxE,MAAAib,OAEA/G,IAAA,SAAAlV,GACAgB,KAAAib,MAAAjc,EACAgB,KAAAqa,KAAAhT,UAAArH,KAAAib,MACAjb,KAAAwa,KAAAnT,UAAArH,KAAAib,QAGA6D,yBACA7f,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAgf,0BAEA9K,IAAA,SAAAlV,GACAgB,KAAAgf,yBAAAhgB,EACAgB,KAAAqa,KAAAQ,OAAA7a,KAAAgf,yBACAhf,KAAAwa,KAAAK,OAAA7a,KAAAgf,yBACAhf,KAAA8a,OAAA9a,KAAA8a,SAGAzN,UACA7I,IAAA,WACA,MAAAxE,MAAAgb,WAEA9G,IAAA,SAAAlV,GACAgB,KAAAgb,UAAAhc,EACAgB,KAAA0e,kBAAApd,KAAAtC,MAAAgB,KAAAgb,UACAhb,KAAA2e,kBAAArd,KAAAtC,MAAAgB,KAAAgb,YAGArM,aACAnK,IAAA,WACA,MAAAxE,MAAAif,cAEA/K,IAAA,SAAAlV,GACAgB,KAAAif,aAAAjgB,CACA,IAAAkgB,GAAAlf,KAAAqa,KAAA8E,OAAAnf,KAAAif,aACAvW,KAAAkK,GACA,GACAsM,GAAA/I,EAAA+I,EAAA,EAAAxW,KAAAkK,IACA5S,KAAAwa,KAAA2E,OAAAD,MAKAtK,EAAAhW,UAAAyP,cAAA,SAAA1L,GACAA,IACAA,EAAA3C,KAAA+X,eAEA/X,KAAAiB,MAAAgU,EAAArU,aACAZ,KAAAmN,SAAA8H,EAAArU,aACAZ,KAAAof,gBAAAnK,EAAArU,aACAZ,KAAAqf,cAAApK,EAAArU,aACAZ,KAAAmB,OAAA8T,EAAArU,aACAZ,KAAAsf,UAAArK,EAAAvL,cACA1J,KAAAuf,WAAAtK,EAAAvL,cAEA1J,KAAAwX,aAAAvC,EAAArU,aACAZ,KAAA+Z,SAAA9E,EAAA9B,sBAAA,GACAnT,KAAAoa,OAAAnF,EAAAtB,oBAAA,GAEA3T,KAAAwX,aAAA7T,QAAA3D,KAAA+Z,UACA/Z,KAAA+Z,SAAApW,QAAA3D,KAAAof,gBAAA,KACApf,KAAA+Z,SAAApW,QAAA3D,KAAAof,gBAAA,KACApf,KAAAof,gBAAA9d,KAAAtC,MAAA,GACAgB,KAAAof,gBAAAzb,QAAA3D,KAAAmN,UACAnN,KAAAmN,SAAAxJ,QAAA3D,KAAAsf,WACAtf,KAAAqf,cAAA1b,QAAA3D,KAAAsf,WACAtf,KAAAsf,UAAA3b,QAAA3D,KAAAuf,YACAvf,KAAAuf,WAAA5b,QAAA3D,KAAAqf,eACArf,KAAAsf,UAAA3b,QAAA3D,KAAAoa,OAAA,KACApa,KAAAuf,WAAA5b,QAAA3D,KAAAoa,OAAA,KACApa,KAAAoa,OAAAzW,QAAA3D,KAAAmB,QACAnB,KAAAwX,aAAA7T,QAAA3D,KAAAmB,QAEAnB,KAAAsO,cAAAhL,SAAAX,EAAA2L,cAAA3L,EAAA2L,cAAAtO,KAAAgY,SAAA1J,cAAAtP,MACAgB,KAAAuO,eAAAjL,SAAAX,EAAA4L,eAAA5L,EAAA4L,eAAAvO,KAAAgY,SAAAzJ,eAAAvP,MACAgB,KAAAqf,cAAA/d,KAAAtC,MAAAsE,SAAAX,EAAA0K,SAAA1K,EAAA0K,SAAArN,KAAAgY,SAAA3K,SAAArO,MACAgB,KAAAmN,SAAA7L,KAAAtC,MAAAsE,SAAAX,EAAAwK,SAAAxK,EAAAwK,SAAAnN,KAAAgY,SAAA7K,SAAAnO,MACAgB,KAAAwN,OAAA7K,EAAA6K,SAAA,GAEAoH,EAAAhW,UAAAyP,cAAAzP,UAAAC,OAAAC,OAAAyW,GACAxV,MACAf,MAAA,iBAEAsP,eACArP,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAwf,gBAEAtL,IAAA,SAAAlV,GACAgB,KAAAwf,eAAAxgB,EACAgB,KAAAsf,UAAA/R,UAAAvO,QAAA,MAGAuP,gBACAtP,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAyf,iBAEAvL,IAAA,SAAAlV,GACAgB,KAAAyf,gBAAAzgB,EACAgB,KAAAuf,WAAAhS,UAAAvO,QAAA,MAGAgZ,UACA9Y,UAAA,EACAF,OACAsP,eACAtP,MAAA,IACAoa,IAAA,EACAnD,IAAA,IACAuC,aAAA,EACAnY,KAAAuY,GAEArK,gBACAvP,MAAA,IACAoa,IAAA,EACAnD,IAAA,IACAuC,aAAA,EACAnY,KAAAuY,GAEAvL,UACArO,MAAA,GACAoa,IAAA,EACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,GAEAtL,UACAnO,MAAA,GACAoa,IAAA,EACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,OAMA7D,EAAAhW,UAAA4P,QAAA,SAAA7L,GACAA,IACAA,EAAA3C,KAAA+X,eAEA/X,KAAAiB,MAAAgU,EAAArU,aACAZ,KAAA+Z,SAAA/Z,KAAAwX,aAAAvC,EAAA9B,sBACA,GACAnT,KAAA0f,WAAAzK,EAAArU,aAAAZ,KAAA2f,WACA1K,EAAArU,aAAAZ,KAAAoa,OAAAnF,EAAAtB,oBACA,GAAA3T,KAAAmB,OAAA8T,EAAArU,aACAZ,KAAAqa,KAAA,GAAAnF,GAAAoF,KACAtZ,OAAAhB,KAAA0f,WAAApe,KACAiZ,SAAApD,IAEAnX,KAAAwa,KAAA,GAAAtF,GAAAoF,KACAtZ,OAAAhB,KAAA2f,WAAAre,KACAiZ,SAAApD,IAGAnX,KAAAiB,MAAA0C,QAAA3D,KAAA+Z,UACA/Z,KAAA+Z,SAAApW,QAAA3D,KAAA0f,WAAA,GACA1f,KAAA+Z,SAAApW,QAAA3D,KAAA2f,WAAA,GACA3f,KAAA0f,WAAA/b,QAAA3D,KAAAoa,OAAA,KACApa,KAAA2f,WAAAhc,QAAA3D,KAAAoa,OAAA,KACApa,KAAAoa,OAAAzW,QAAA3D,KAAAmB,QAEAnB,KAAA0O,KAAA/L,EAAA+L,MAAA1O,KAAAgY,SAAAtJ,KAAA1P,MACAgB,KAAAyO,UAAAuI,EAAArU,EAAA8L,UAAAzO,KAAAgY,SAAAvJ,UACAzP,OACAgB,KAAA2O,YAAAqI,EAAArU,EAAAgM,YAAA3O,KAAAgY,SACArJ,YACA3P,OAEAgB,KAAAqa,KAAAQ,OAAA,EAAA7a,KAAAyO,UAAA,EACAzO,KAAAwa,KAAAK,OAAA,EAAA7a,KAAAyO,UAAA,EACAzO,KAAAqa,KAAAM,MAAA3a,KAAA2O,YAAAjG,KAAAkK,GAAA,IAEA5S,KAAAqa,KAAA/C,UAAA,GACAtX,KAAAwa,KAAAlD,UAAA,GACAtX,KAAAwN,OAAA7K,EAAA6K,SAAA;EAEAoH,EAAAhW,UAAA4P,QAAA5P,UAAAC,OAAAC,OAAAyW,GACAxV,MACAf,MAAA,WAEAgZ,UACA9Y,UAAA,EACAF,OACAyP,WACAzP,MAAA,GACAoa,IAAA,EACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,GAEA9J,aACA3P,MAAA,EACAoa,IAAA,EACAnD,IAAA,IACAuC,aAAA,EACAnY,KAAAoY,GAEA/J,MACA1P,MAAA,EACAoa,IAAA,GACAnD,IAAA,GACAuC,aAAA,EACAnY,KAAAoY,KAIAhK,WACAxP,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAA4f,YAEA1L,IAAA,SAAAlV,GACAgB,KAAA4f,WAAA5gB,EACAgB,KAAAqa,KAAAQ,OAAA,EAAA7a,KAAA4f,WAAA,EACA5f,KAAAwa,KAAAK,OAAA,EAAA7a,KAAA4f,WAAA,EACA5f,KAAAqa,KAAAU,YAAA/a,KAAA4f,WACA5f,KAAAwa,KAAAO,YAAA/a,KAAA4f,aAGAlR,MACAzP,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAib,OAEA/G,IAAA,SAAAlV,GACAgB,KAAAib,MAAAjc,EACAgB,KAAAqa,KAAAhT,UAAArH,KAAAib,MACAjb,KAAAwa,KAAAnT,UAAArH,KAAAib,QAGAtM,aACA1P,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAib,OAEA/G,IAAA,SAAAlV,GACAgB,KAAAif,aAAAjgB,CACA,IAAAkgB,GAAAlf,KAAAqa,KAAA8E,OAAAnf,KAAAif,aACAvW,KAAAkK,GACA,GACAsM,GAAA/I,EAAA+I,EAAA,EAAAxW,KAAAkK,IACA5S,KAAAwa,KAAAG,MAAAuE,MAKAtK,EAAAhW,UAAAihB,OAAA,SAAAld,GACAA,IACAA,EAAA3C,KAAA+X,eAEA/X,KAAAiB,MAAAgU,EAAArU,aACAZ,KAAAwX,aAAAvC,EAAArU,aACAZ,KAAA8f,iBAAA,GAAA5K,GAAA6K,kBACA/e,OAAAhB,KACAua,SAAA,SAAA1F,EAAA7V,GACA6V,EAAAmL,MAAAhhB,KAGAgB,KAAAigB,SAAAhL,EAAA6G,qBACA9b,KAAAkgB,cAAAjL,EAAA6G,qBACA9b,KAAAmB,OAAA8T,EAAArU,aAGAZ,KAAAwX,aAAA7T,QAAA3D,KAAAigB,UACAjgB,KAAAigB,SAAAtc,QAAA3D,KAAAkgB,eACAlgB,KAAAkgB,cAAAvc,QAAA3D,KAAAmB,QAGAnB,KAAAmgB,OACAngB,KAAAogB,SAAApJ,EAAArU,EAAA0d,eAAArgB,KAAAgY,SACAoI,SACAphB,OACAgB,KAAA+N,UAAApL,EAAAoL,WAAA/N,KAAAgY,SAAAjK,UACA/O,MACAgB,KAAAsgB,YAAAtJ,EAAArU,EAAA2d,YAAAtgB,KAAAgY,SACAsI,YACAthB,OACAgB,KAAAugB,cAAAvJ,EAAArU,EAAA4d,cAAAvgB,KAAAgY,SACAuI,cACAvhB,OACAgB,KAAAwgB,iBAAA7d,EAAA6d,kBAAAxgB,KAAAgY,SACAwI,iBACAxhB,MACAgB,KAAAggB,MAAAhJ,EAAArU,EAAAqd,MAAAhgB,KAAAgY,SAAAgI,MAAAhhB,OAEAgB,KAAAwX,aAAAlW,KAAAtC,MAAA,EACAgB,KAAA8f,iBAAAxI,UAAA,GACAtX,KAAAwN,OAAA7K,EAAA6K,SAAA,GAEAoH,EAAAhW,UAAAihB,OAAAjhB,UAAAC,OAAAC,OAAAyW,GACAxV,MACAf,MAAA,UAEAgZ,UACA9Y,UAAA,EACAF,OACAohB,UACAphB,OAAA,EACAwZ,aAAA,EACAnY,KAAAqY,GAEA6H,eACAvhB,MAAA,GACAoa,IAAA,EACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,GAEA+H,kBACAxhB,MAAA,EACAoa,IAAA,EACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,GAEAuH,OACAhhB,MAAA,GACAoa,IAAA,EACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,GAEA1K,WACA/O,MAAA,GACAoa,IAAA,EACAnD,IAAA,IACAuC,aAAA,EACAnY,KAAAoY,GAEA6H,aACAthB,MAAA,GACAoa,IAAA,GACAnD,IAAA,EACAuC,aAAA,EACAnY,KAAAoY,KAIAhB,kBACAzY,MAAA,SAAAA,GACAgB,KAAAogB,SAAAphB,IAGAohB,UACA5b,IAAA,WACA,MAAAxE,MAAAygB,WAEAvM,IAAA,SAAAlV,GACAgB,KAAAygB,UAAAzhB,EACAA,GACAgB,KAAAwX,aAAA7T,QAAA3D,KAAA8f,iBAAA7e,OACAjB,KAAA8f,iBAAAxI,UAAA,KAEAtX,KAAA8f,iBAAAxI,UAAA,GACAtX,KAAAwX,aAAA5T,aACA5D,KAAAwX,aAAA7T,QAAA3D,KAAAigB,aAIAS,mBACA1hB,MAAA,GAEA2hB,eACA3hB,MAAA,WACA,IACAgB,KAAAigB,SAAA5Y,UAAArI,MAAAgB,KAAA4gB,eAAA5gB,KAAA6gB,oBAAA7gB,KAAA8gB,OACA9gB,KAAAkgB,cAAA7Y,UAAArI,MAAAgB,KAAA4gB,eAAA5gB,KAAA6gB,oBAAA7gB,KAAA8gB,OACiB,MAAAngB,GACjBogB,aAAA/gB,KAAA0gB,mBAEA1gB,KAAA0gB,kBAAAM,WAAA,WACAhhB,KAAA2gB,iBACqBM,KAAAjhB,MAAA,MAIrBggB,OACA/gB,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAA8gB,OAAA9hB,OAEAkV,IAAA,SAAAlV,GACAgB,KAAA8gB,OAAApY,KAAAC,IAAA3J,EAAA,IACA,EADAA,EACA,EACAA,EACAgB,KAAAkhB,cACAlhB,KAAA2gB,kBAGAJ,eACAthB,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAA4gB,gBAEA1M,IAAA,SAAAlV,GACAgB,KAAA4gB,eAAA,GAAAlY,KAAAC,IAAA,GACA,EADA3J,GAEAgB,KAAA6gB,oBAAAnY,KAAA0Q,IAAAnE,EACA5D,WACA,EACArR,KAAAugB,cAAA7X,KAAAC,IAAA,EAAA3I,KAAAmhB,oBAEAnhB,KAAA2gB,kBAGAH,kBACAvhB,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAmhB,mBAEAjN,IAAA,SAAAlV,GACAgB,KAAAmhB,kBAAAniB,EACAgB,KAAA6gB,oBAAAnY,KAAA0Q,IAAAnE,EACA5D,WACA,EACArR,KAAAugB,cAAA7X,KAAAC,IAAA,EAAA3I,KAAAmhB,oBAEAnhB,KAAA2gB,kBAGAL,aACArhB,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAkhB,cAEAhN,IAAA,SAAAlV,GACAgB,KAAAkhB,aAAAxY,KAAAC,IAAA,GAAA3J,KAGA+O,WACA9O,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAAohB,YAEAlN,IAAA,SAAAlV,GACAgB,KAAAohB,WAAApiB,EACAgB,KAAAkgB,cAAAxS,EAAA1N,KAAAohB,aAGAjB,MACAnhB,MAAA,WACAgB,KAAAmB,OAAAG,KAAAtC,MAAA,EACAgB,KAAAkgB,cAAA7f,KAAA,UACAL,KAAAigB,SAAA5f,KAAA,WACAL,KAAAkgB,cAAA7Y,UAAArI,MAAA,IACAgB,KAAAkgB,cAAA5e,KAAAtC,MAAA,GACAgB,KAAAkgB,cAAAxS,EAAA1O,MAAA,EACAgB,KAAAigB,SAAA5Y,UAAArI,MAAA,IACAgB,KAAAigB,SAAAvS,EAAA1O,MAAA,MAKA4V,EAAAhW,UAAAmhB,iBAAA,SAAApd,GACAA,IACAA,EAAA3C,KAAA+X,eAEA/X,KAAAiB,MAAAgU,EAAArU,aACAZ,KAAAqhB,OAAArhB,KAAAmB,OAAA8T,EAAAhL,sBACAjK,KAAAshB,WACA,KAEAthB,KAAAiB,MAAA0C,QAAA3D,KAAAmB,QAEAnB,KAAAuhB,WAAAvK,EAAArU,EAAA4e,WAAAvhB,KAAAgY,SACAuJ,WACAviB,OACAgB,KAAAwhB,YAAAxK,EAAArU,EAAA6e,YAAAxhB,KAAAgY,SACAwJ,YACAxiB,OACAgB,KAAAyhB,UAAA,EACAzhB,KAAAgB,OAAA2B,EAAA3B,WACAhB,KAAAua,SAAA5X,EAAA4X,UAAA,cAEA3F,EAAAhW,UAAAmhB,iBAAAnhB,UAAAC,OAAAC,OAAAyW,GACAxV,MACAf,MAAA,oBAEAgZ,UACAhZ,OACAuiB,YACAviB,MAAA,KACAoa,IAAA,EACAnD,IAAA,GACAuC,aAAA,EACAnY,KAAAoY,GAEA+I,aACAxiB,MAAA,GACAoa,IAAA,EACAnD,IAAA,GACAuC,aAAA,EACAnY,KAAAoY,KAIA6I,YACAtiB,MAAA,KAEAuD,UACAvD,MAAA,GAEAqS,YACArS,MAAA,OAEAuiB,YACAtiB,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAA0hB,aAEAxN,IAAA,SAAAlV,GACAgB,KAAA0hB,YAAA1iB,EACAgB,KAAA2hB,SAAAjZ,KAAAF,IAAA,GAAAxI,KAAA0hB,YACA1hB,KAAAqR,WACArR,KAAAshB,cAGAE,aACAviB,YAAA,EACAuF,IAAA,WACA,MAAAxE,MAAA4hB,cAEA1N,IAAA,SAAAlV,GACAgB,KAAA4hB,aAAA5iB,EACAgB,KAAA6hB,UAAAnZ,KAAAF,IAAA,GAAAxI,KAAA4hB,aACA5hB,KAAAqR,WACArR,KAAAshB,cAGA/G,UACA/V,IAAA,WACA,MAAAxE,MAAA8hB,WAEA5N,IAAA,SAAAlV,GACA,kBAAAA,GACAgB,KAAA8hB,UAAA9iB,EAEA8V,QAAAgD,MAAA,YAAA9X,KAAAD,KACA,oCAIAiB,QACAwD,IAAA,WACA,MAAAxE,MAAA+hB,SAEA7N,IAAA,SAAAlV,GACAgB,KAAA+hB,QAAA/iB,IAGAsY,UACAtY,MAAA,SAAAuY,GACAvX,KAAAgiB,UAAAzK,EACAA,GACAvX,KAAAqhB,OAAA1d,QAAAsR,EAAA/K,aACAlK,KAAAqhB,OAAAnW,eAAAlL,KAAAiiB,cACAjiB,QAEAA,KAAAqhB,OAAAzd,aACA5D,KAAAqhB,OAAAnW,eAAA,QAIA+W,eACAjjB,MAAA,SAAAb,GACA,gBAAA+jB,GACA/jB,EAAAgkB,QAAAD,MAIAC,SACAnjB,MAAA,SAAAkjB,GACA,GAGAE,GAAAC,EAAAC,EAAArgB,EAHAsgB,EAAAL,EAAAjJ,YAAAtI,eAAA,GACAxO,OACAqgB,EAAAN,EAAAjJ,YAAAwJ,gBAGA,IADAJ,EAAAC,EAAArgB,EAAA,EACAugB,EAAA,EACA,IAAAvgB,EAAA,EAA+BsgB,EAAAtgB,IAAWA,EAC1C,KAA8BugB,EAAAH,IAAiBA,EAC/CD,EAAAF,EAAAjJ,YAAAtI,eAAA0R,GAAApgB,GACAqgB,GAAAF,IAAAI,MAIA,KAAAvgB,EAAA,EAA+BsgB,EAAAtgB,IAAWA,EAC1CmgB,EAAAF,EAAAjJ,YAAAtI,eAAA,GAAA1O,GACAqgB,GAAAF,GAGAE,GAAA5Z,KAAAga,KAAAJ,GAEAtiB,KAAAyhB,UAAAa,GACAtiB,KAAAyhB,WAAAzhB,KAAA2hB,SACA3hB,KAAAyhB,YAAA,EAAAzhB,KAAA2hB,UAAAW,IAEAtiB,KAAAyhB,WAAAzhB,KAAA6hB,UACA7hB,KAAAyhB,YAAA,EAAAzhB,KAAA6hB,WACAS,GAEAtiB,KAAA8hB,UAAA9hB,KAAA+hB,QAAA/hB,KAAAyhB,eAKA7M,EAAAhW,UAAA0b,IAAA,SAAA3X,GAEA3C,KAAAmB,OAAA8T,EAAAhL,sBAAA,SACAjK,KAAAwX,aAAAvC,EAAA/K,YAGAlK,KAAAqH,UAAA2P,EAAArU,EAAA0E,UAAArH,KAAAgY,SAAA3Q,UACArI,OACAgB,KAAA6a,OAAA7D,EAAArU,EAAAkY,OAAA7a,KAAAgY,SAAA6C,OAAA7b,OACAgB,KAAA+a,YAAA/D,EAAArU,EAAAoY,YAAA/a,KAAAgY,SACA+C,YACA/b,OACAgB,KAAA2a,MAAA3D,EAAArU,EAAAgY,MAAA3a,KAAAgY,SAAA2C,MAAA3b,OACAgB,KAAAgB,OAAA2B,EAAA3B,WACAhB,KAAAmB,OAAA+J,eAAAlL,KAAAua,SAAA5X,EAAA4X,UACA,cACAva,KAAAwN,OAAA7K,EAAA6K,SAAA,GAEAoH,EAAAhW,UAAA0b,IAAA1b,UAAAC,OAAAC,OAAAyW,GACAxV,MACAf,MAAA,OAEA+N,YACA/N,MAAA,KAEAqS,YACArS,MAAA,OAEAgZ,UACAhZ,OACAqI,WACArI,MAAA,EACAoa,IAAA,EACAnD,IAAA,GACAuC,aAAA,EACAnY,KAAAoY,GAEAoC,QACA7b,MAAA,IACAoa,IAAA,EACAnD,IAAA,MACAuC,aAAA,EACAnY,KAAAoY,GAEAsC,aACA/b,MAAA,GACAoa,IAAA,OACAnD,IAAA,MACAuC,aAAA,EACAnY,KAAAoY,GAEAkC,OACA3b,MAAA,EACAoa,IAAA,EACAnD,IAAA,EAAAvN,KAAAkK,GACA4F,aAAA,EACAnY,KAAAoY,KAIApR,WACA7C,IAAA,WACA,MAAAxE,MAAA2iB,YAEAzO,IAAA,SAAAlV,GACAgB,KAAA2iB,WAAA3jB,EACAgB,KAAA4iB,UAAA,EAAAla,KAAAkK,GAAA5S,KAAA2iB,WACA3iB,KAAA+M,WACA/M,KAAAqR,aAGAwJ,QACArW,IAAA,WACA,MAAAxE,MAAA6iB,SAEA3O,IAAA,SAAAlV,GACAgB,KAAA6iB,QAAA7jB,IAGA+b,aACAvW,IAAA,WACA,MAAAxE,MAAA8iB,cAEA5O,IAAA,SAAAlV,GACAgB,KAAA8iB,aAAA9jB,IAGA2b,OACAnW,IAAA,WACA,MAAAxE,MAAAmf,QAEAjL,IAAA,SAAAlV,GACAgB,KAAAmf,OAAAngB,IAGAgC,QACAwD,IAAA,WACA,MAAAxE,MAAA+hB,SAEA7N,IAAA,SAAAlV,GACAgB,KAAA+hB,QAAA/iB,IAGAsY,UACAtY,MAAA,SAAAuY,GACAA,EAGAvX,KAAAmB,OAAAwC,QAAAsR,EAAA/K,aAFAlK,KAAAmB,OAAAyC,WAAAqR,EAAA/K,eAMAqQ,UACAvb,MAAA,SAAAub,GACA,GAAAwI,GAAA/iB,IACA,mBACA+iB,EAAA5D,QAAA4D,EAAAH,UACAG,EAAA5D,OAAA,EAAAzW,KAAAkK,KACAmQ,EAAA5D,OAAA,GAEA5E,EAAAwI,EAAAhB,QAAAgB,EAAAF,QACAE,EAAAD,aACApa,KAAAmK,IAAAkQ,EAAA5D,cAMAvK,EAAAlS,SAAAkS,EAAAhW,UAAA8D,SAAA,WACA,oGAEC1C","file":"electrophone.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\t__webpack_require__(40);\n\t\n\tvar _ElectroPhone = __webpack_require__(7);\n\t\n\tvar _ElectroPhone2 = _interopRequireDefault(_ElectroPhone);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar win = window || {};\n\twin.EP = _ElectroPhone2.default;\n\t\n\texports.default = _ElectroPhone2.default;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\tvar TYPES = {\n\t    MASTER: 'Master',\n\t    OSCILLATOR: 'Oscillator',\n\t    NOISE: 'Noise',\n\t    MODULATOR: 'Modulator',\n\t    ENVELOPE: 'Envelope',\n\t    PAN: 'Pan',\n\t    FILTER: 'Filter',\n\t    DELAY: 'Delay',\n\t    PINGPONGDELAY: 'PingPongDelay',\n\t    TREMOLO: 'Tremolo',\n\t    OVERDRIVE: 'Overdrive',\n\t    BITCRUSHER: 'Bitcrusher',\n\t    MOOGFILTER: 'MoogFilter'\n\t},\n\t    CONST = {\n\t    MASTER: 'master',\n\t    ADSR: 'adsr',\n\t\n\t    NOISE_WHITE: 'white',\n\t    NOISE_PINK: 'pink',\n\t    NOISE_BROWN: 'brown',\n\t\n\t    WAVE_SINE: 'sine',\n\t    WAVE_SQUARE: 'square',\n\t    WAVE_SAWTOOTH: 'sawtooth',\n\t    WAVE_TRIANLGE: 'triangle',\n\t    WAVE_CUSTOM: 'custom',\n\t\n\t    FILTER_LOWPASS: 'lowpass',\n\t    FILTER_HIGHPASS: 'highpass',\n\t    FILTER_BANDPASS: 'bandpass',\n\t    FILTER_LOWSHELF: 'lowshelf',\n\t    FILTER_HIGHSHELF: 'highshelf',\n\t    FILTER_PEAKING: 'peaking',\n\t    FILTER_NOTCH: 'notch',\n\t    FILTER_ALLPASS: 'allpass',\n\t\n\t    MODULATOR_TARGET_FREQ: 'frequency',\n\t    MODULATOR_TARGET_DETUNE: 'detune',\n\t\n\t    ENVELOPE_TARGET_GAIN: 'gain',\n\t    ENVELOPE_TARGET_FREQ: 'frequency',\n\t    ENVELOPE_TARGET_DETUNE: 'detune'\n\t};\n\t\n\texports.TYPES = TYPES;\n\texports.CONST = CONST;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _Constants = __webpack_require__(1);\n\t\n\tvar _Module2 = __webpack_require__(3);\n\t\n\tvar _Module3 = _interopRequireDefault(_Module2);\n\t\n\tvar _EffectManager = __webpack_require__(9);\n\t\n\tvar _EffectManager2 = _interopRequireDefault(_EffectManager);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Effect = function (_Module) {\n\t    _inherits(Effect, _Module);\n\t\n\t    function Effect(audioContext, props, name) {\n\t        _classCallCheck(this, Effect);\n\t\n\t        var _this = _possibleConstructorReturn(this, _Module.call(this, audioContext, props, name));\n\t\n\t        _this.main = null;\n\t        _this.mainEffect = null;\n\t        return _this;\n\t    }\n\t\n\t    Effect.prototype.setMainEffect = function setMainEffect(type, mainEffect, props) {\n\t        var effectManager = (0, _EffectManager2.default)(this.audioContext);\n\t        this.main = new effectManager[type](props);\n\t        this.mainEffect = this.main[mainEffect];\n\t    };\n\t\n\t    Effect.prototype.setMainProperties = function setMainProperties(props) {\n\t        var _this2 = this;\n\t\n\t        Object.keys(props).forEach(function (e) {\n\t            if (_this2.main[e]) {\n\t                _this2.main[e] = props[e];\n\t            }\n\t        });\n\t    };\n\t\n\t    Effect.prototype.createGain = function createGain() {\n\t        return false;\n\t    };\n\t\n\t    Effect.prototype.getLineIn = function getLineIn(sourceType, source) {\n\t        if (sourceType === _Constants.TYPES.MODULATOR) {\n\t            return this.mainEffect[source.target];\n\t        } else {\n\t            return this.main.input;\n\t        }\n\t    };\n\t\n\t    Effect.prototype.getLineOut = function getLineOut() {\n\t        return this.main.output;\n\t    };\n\t\n\t    Effect.prototype.getEnvelopeTarget = function getEnvelopeTarget(target) {\n\t        var ret = null;\n\t\n\t        if (target === 'gain') {\n\t            ret = this.main.output.gain;\n\t        } else if (this.main && this.mainEffect && this.mainEffect[target]) {\n\t            ret = this.main.filter[target];\n\t        }\n\t\n\t        return ret;\n\t    };\n\t\n\t    return Effect;\n\t}(_Module3.default);\n\t\n\texports.default = Effect;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _properties = __webpack_require__(6);\n\t\n\tvar Props = _interopRequireWildcard(_properties);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Module = function () {\n\t    function Module(audioContext, props, name) {\n\t        _classCallCheck(this, Module);\n\t\n\t        this.name = name;\n\t        this.audioContext = audioContext;\n\t        this.gain = null;\n\t        this.envelope = null;\n\t        this.main = null;\n\t\n\t        this.setupProperties(props);\n\t\n\t        this.createGain(this.level);\n\t    }\n\t\n\t    Module.prototype.toString = function toString() {\n\t        return this.name;\n\t    };\n\t\n\t    Module.prototype.setupProperties = function setupProperties(props) {\n\t        var _this = this;\n\t\n\t        var properties = props || {},\n\t            propsHandler = this.toString() + 'Props',\n\t            specificProps = Props[propsHandler],\n\t            moduleProperties = void 0;\n\t\n\t        moduleProperties = _extends({}, Props.DefaultProps, specificProps);\n\t        Object.keys(moduleProperties).forEach(function (e) {\n\t            _this.setProperty(e, properties[e], moduleProperties[e]);\n\t        });\n\t    };\n\t\n\t    Module.prototype.getRealProperties = function getRealProperties(propName) {\n\t        switch (propName) {\n\t            case 'level':\n\t                return 'gain';\n\t            case 'freq':\n\t                return 'frequency';\n\t            case 'wave':\n\t                return 'type';\n\t            case 'q':\n\t                return 'Q';\n\t            case 'link':\n\t                return null;\n\t            default:\n\t                return propName;\n\t        }\n\t    };\n\t\n\t    Module.prototype.updateProperties = function updateProperties(props) {\n\t        var _this2 = this;\n\t\n\t        Object.keys(props).forEach(function (p) {\n\t            var realProp = _this2.getRealProperties(p);\n\t\n\t            if (_this2.main && realProp && _this2[p] !== props[p]) {\n\t                if (realProp === 'gain' && _this2.gain && _this2.gain.gain) {\n\t                    var l = props[p] >= 0 ? props[p] % 101 : 100;\n\t                    _this2.gain.gain.value = l / 100;\n\t                } else if (_this2.main[realProp] !== undefined && _this2.main[realProp].value !== undefined) {\n\t                    _this2.main[realProp].value = props[p];\n\t                } else if (_this2.main[realProp] !== undefined) {\n\t                    _this2.main[realProp] = props[p];\n\t                }\n\t            }\n\t        });\n\t    };\n\t\n\t    Module.prototype.setProperty = function setProperty(propKey, propVal, propConfig) {\n\t        this[propKey] = null;\n\t        if (propConfig.type && (typeof propVal === 'undefined' ? 'undefined' : _typeof(propVal)) === propConfig.type) {\n\t            this[propKey] = propVal;\n\t        } else if (propConfig.defaultValue !== undefined) {\n\t            this[propKey] = propConfig.defaultValue;\n\t        }\n\t    };\n\t\n\t    Module.prototype.createGain = function createGain(level) {\n\t        var l = level >= 0 ? level % 101 : 100;\n\t        this.gain = this.audioContext.createGain();\n\t        this.envelope = this.audioContext.createGain();\n\t        this.gain.gain.value = l / 100;\n\t        this.envelope.gain.value = 1;\n\t\n\t        this.envelope.connect(this.gain);\n\t    };\n\t\n\t    Module.prototype.disconnect = function disconnect() {\n\t        this.gain.disconnect();\n\t    };\n\t\n\t    Module.prototype.getLineIn = function getLineIn() {\n\t        return this.main;\n\t    };\n\t\n\t    Module.prototype.getLineOut = function getLineOut() {\n\t        return this.gain;\n\t    };\n\t\n\t    Module.prototype.getEnvelopeTarget = function getEnvelopeTarget(target) {\n\t        var ret = null;\n\t\n\t        if (this.main && this.main[target]) {\n\t            ret = this.main[target];\n\t        } else if (target === 'gain' && this.gain) {\n\t            ret = this.envelope.gain;\n\t        }\n\t        return ret;\n\t    };\n\t\n\t    return Module;\n\t}();\n\t\n\texports.default = Module;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _Constants = __webpack_require__(1);\n\t\n\tvar _Module2 = __webpack_require__(3);\n\t\n\tvar _Module3 = _interopRequireDefault(_Module2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar SoundSource = function (_Module) {\n\t    _inherits(SoundSource, _Module);\n\t\n\t    function SoundSource(audioContext, props, name) {\n\t        _classCallCheck(this, SoundSource);\n\t\n\t        var _this = _possibleConstructorReturn(this, _Module.call(this, audioContext, props, name));\n\t\n\t        _this.defaultLineInProperty = 'frequency';\n\t        return _this;\n\t    }\n\t\n\t    SoundSource.prototype.setDetune = function setDetune() {\n\t        if (this.main && this.main.detune) {\n\t            this.main.detune.value = this.detune;\n\t        }\n\t    };\n\t\n\t    SoundSource.prototype.noteOn = function noteOn() {\n\t        this.main.start(0);\n\t    };\n\t\n\t    SoundSource.prototype.noteOff = function noteOff(release) {\n\t        this.main.stop(release);\n\t    };\n\t\n\t    SoundSource.prototype.getLineIn = function getLineIn(sourceType, source) {\n\t        if (sourceType === _Constants.TYPES.MODULATOR) {\n\t            return this.main[source.target];\n\t        } else {\n\t            return this.main[this.defaultLineInProperty];\n\t        }\n\t    };\n\t\n\t    return SoundSource;\n\t}(_Module3.default);\n\t\n\texports.default = SoundSource;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _Master = __webpack_require__(19);\n\t\n\tObject.defineProperty(exports, 'Master', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Master).default;\n\t  }\n\t});\n\t\n\tvar _Envelope = __webpack_require__(18);\n\t\n\tObject.defineProperty(exports, 'Envelope', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Envelope).default;\n\t  }\n\t});\n\t\n\tvar _Pan = __webpack_require__(20);\n\t\n\tObject.defineProperty(exports, 'Pan', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Pan).default;\n\t  }\n\t});\n\t\n\tvar _Oscillator = __webpack_require__(23);\n\t\n\tObject.defineProperty(exports, 'Oscillator', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Oscillator).default;\n\t  }\n\t});\n\t\n\tvar _Modulator = __webpack_require__(21);\n\t\n\tObject.defineProperty(exports, 'Modulator', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Modulator).default;\n\t  }\n\t});\n\t\n\tvar _Noise = __webpack_require__(22);\n\t\n\tObject.defineProperty(exports, 'Noise', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Noise).default;\n\t  }\n\t});\n\t\n\tvar _Filter = __webpack_require__(13);\n\t\n\tObject.defineProperty(exports, 'Filter', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Filter).default;\n\t  }\n\t});\n\t\n\tvar _Delay = __webpack_require__(12);\n\t\n\tObject.defineProperty(exports, 'Delay', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Delay).default;\n\t  }\n\t});\n\t\n\tvar _PingPongDelay = __webpack_require__(16);\n\t\n\tObject.defineProperty(exports, 'PingPongDelay', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_PingPongDelay).default;\n\t  }\n\t});\n\t\n\tvar _Tremolo = __webpack_require__(17);\n\t\n\tObject.defineProperty(exports, 'Tremolo', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Tremolo).default;\n\t  }\n\t});\n\t\n\tvar _Overdrive = __webpack_require__(15);\n\t\n\tObject.defineProperty(exports, 'Overdrive', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Overdrive).default;\n\t  }\n\t});\n\t\n\tvar _Bitcrusher = __webpack_require__(11);\n\t\n\tObject.defineProperty(exports, 'Bitcrusher', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_Bitcrusher).default;\n\t  }\n\t});\n\t\n\tvar _MoogFilter = __webpack_require__(14);\n\t\n\tObject.defineProperty(exports, 'MoogFilter', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_MoogFilter).default;\n\t  }\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _DefaultProps = __webpack_require__(25);\n\t\n\tObject.defineProperty(exports, 'DefaultProps', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_DefaultProps).default;\n\t  }\n\t});\n\t\n\tvar _ModulatorProps = __webpack_require__(29);\n\t\n\tObject.defineProperty(exports, 'ModulatorProps', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_ModulatorProps).default;\n\t  }\n\t});\n\t\n\tvar _EnvelopeProps = __webpack_require__(27);\n\t\n\tObject.defineProperty(exports, 'EnvelopeProps', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_EnvelopeProps).default;\n\t  }\n\t});\n\t\n\tvar _PanProps = __webpack_require__(34);\n\t\n\tObject.defineProperty(exports, 'PanProps', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_PanProps).default;\n\t  }\n\t});\n\t\n\tvar _OscillatorProps = __webpack_require__(32);\n\t\n\tObject.defineProperty(exports, 'OscillatorProps', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_OscillatorProps).default;\n\t  }\n\t});\n\t\n\tvar _NoiseProps = __webpack_require__(31);\n\t\n\tObject.defineProperty(exports, 'NoiseProps', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_NoiseProps).default;\n\t  }\n\t});\n\t\n\tvar _FilterProps = __webpack_require__(28);\n\t\n\tObject.defineProperty(exports, 'FilterProps', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_FilterProps).default;\n\t  }\n\t});\n\t\n\tvar _DelayProps = __webpack_require__(26);\n\t\n\tObject.defineProperty(exports, 'DelayProps', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_DelayProps).default;\n\t  }\n\t});\n\t\n\tvar _PingPongDelayProps = __webpack_require__(35);\n\t\n\tObject.defineProperty(exports, 'PingPongDelayProps', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_PingPongDelayProps).default;\n\t  }\n\t});\n\t\n\tvar _TremoloProps = __webpack_require__(36);\n\t\n\tObject.defineProperty(exports, 'TremoloProps', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_TremoloProps).default;\n\t  }\n\t});\n\t\n\tvar _OverdriveProps = __webpack_require__(33);\n\t\n\tObject.defineProperty(exports, 'OverdriveProps', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_OverdriveProps).default;\n\t  }\n\t});\n\t\n\tvar _BitcrusherProps = __webpack_require__(24);\n\t\n\tObject.defineProperty(exports, 'BitcrusherProps', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_BitcrusherProps).default;\n\t  }\n\t});\n\t\n\tvar _MoogFilterProps = __webpack_require__(30);\n\t\n\tObject.defineProperty(exports, 'MoogFilterProps', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_MoogFilterProps).default;\n\t  }\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _modules = __webpack_require__(5);\n\t\n\tvar Modules = _interopRequireWildcard(_modules);\n\t\n\tvar _properties = __webpack_require__(6);\n\t\n\tvar Props = _interopRequireWildcard(_properties);\n\t\n\tvar _Constants = __webpack_require__(1);\n\t\n\tvar _Synth = __webpack_require__(8);\n\t\n\tvar _Synth2 = _interopRequireDefault(_Synth);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'],\n\t    methods = Object.keys(Modules);\n\tvar synth = void 0;\n\t\n\t/**\n\t * ElectroPhone Library.\n\t * @example\n\t * const AudioCtx = window.AudioContext || window.webkitAudioContext;\n\t * const synth = new ElectroPhone(new AudioCtx(), { spectrum: false });\n\t */\n\t\n\tvar ElectroPhone = function () {\n\t    /**\n\t     * Create a playable web synthesizer instance.\n\t     * @param {AudioContext} audioContext - Web Audio Context instance.\n\t     * @param {ElectroPhoneProperties} [properties] - synth properties.\n\t     */\n\t    function ElectroPhone(audioContext, props) {\n\t        _classCallCheck(this, ElectroPhone);\n\t\n\t        var properties = props || {};\n\t        synth = new _Synth2.default(audioContext, properties);\n\t        this.isPlaying = false;\n\t    }\n\t\n\t    /**\n\t     * Returns current synth modules configuration object.\n\t     * @return {Object} current synth modules configuration.\n\t     * @property {Object} master - the master ModuleProperties.\n\t     * @property {Object} adsr - the adsr ModuleProperties.\n\t     * @property {ModuleProperties} <module_id> - one ModuleProperties for each created module.\n\t     */\n\t\n\t\n\t    ElectroPhone.prototype.getModules = function getModules() {\n\t        return _extends({}, synth.modulesConfig);\n\t    };\n\t\n\t    /**\n\t     * Create a new synth module.\n\t     * @param {String} id - the module identifier.\n\t     * @param {String} type - the type of module.\n\t     * @param {Object} properties - module properties.\n\t     * @return {ElectroPhone}\n\t     * @throws {Error} throw error when module with id is already created.\n\t     */\n\t\n\t\n\t    ElectroPhone.prototype.create = function create(id, type, properties) {\n\t        var currentModule = this.getModules()[id];\n\t        if (currentModule) {\n\t            throw new Error('Module ' + id + ' already created. Use update method instead.');\n\t        }\n\t        synth.module(type, id, properties);\n\t        return this;\n\t    };\n\t\n\t    /**\n\t     * Update the synth module by id.\n\t     * @param {String} id - the module identifier.\n\t     * @param {Object} properties - module properties.\n\t     * @return {ElectroPhone}\n\t     * @throws {Error} throw error when module with id is not found.\n\t     */\n\t\n\t\n\t    ElectroPhone.prototype.update = function update(id, properties) {\n\t        var currentModule = this.getModules()[id];\n\t        if (!currentModule) {\n\t            throw new Error('Module ' + id + ' not found. Use create method instead.');\n\t        }\n\t        synth.module(currentModule.type, id, properties);\n\t        return this;\n\t    };\n\t\n\t    /**\n\t     * Update the master module.\n\t     * @param {Object} properties - master properties.\n\t     * @return {ElectroPhone}\n\t     */\n\t\n\t\n\t    ElectroPhone.prototype.master = function master(properties) {\n\t        synth.module(_Constants.TYPES.MASTER, _Constants.CONST.MASTER, properties);\n\t        return this;\n\t    };\n\t\n\t    /**\n\t     * Update the ADSR module.\n\t     * @param {Object} properties - ADSR (Envelope) properties\n\t     * @return {ElectroPhone}\n\t     */\n\t\n\t\n\t    ElectroPhone.prototype.adsr = function adsr(properties) {\n\t        synth.module(_Constants.TYPES.ENVELOPE, _Constants.CONST.ADSR, properties);\n\t        return this;\n\t    };\n\t\n\t    /**\n\t     * Destroy the synth module by id.\n\t     * @param {String} id - the module identifier.\n\t     * @return {ElectroPhone}\n\t     * @throws {Error} throw error when module with id is not found.\n\t     */\n\t\n\t\n\t    ElectroPhone.prototype.destroy = function destroy(id) {\n\t        var currentModule = this.getModules()[id];\n\t        if (!currentModule) {\n\t            throw new Error('Module ' + id + ' not found.');\n\t        }\n\t        synth.destroyModule(id);\n\t        return this;\n\t    };\n\t\n\t    /**\n\t     * Start playing the input frequency.\n\t     * @param {Number} frequency - the frequency value.\n\t     * @return {ElectroPhone}\n\t     */\n\t\n\t\n\t    ElectroPhone.prototype.play = function play(frequency) {\n\t        if (+frequency >= 0) {\n\t            synth.play(frequency);\n\t            this.isPlaying = true;\n\t        }\n\t        return this;\n\t    };\n\t\n\t    /**\n\t     * Stop playing the input frequency.\n\t     * @param {Number} frequency - the frequency value.\n\t     * @return {ElectroPhone}\n\t     */\n\t\n\t\n\t    ElectroPhone.prototype.stop = function stop(frequency) {\n\t        if (+frequency >= 0) {\n\t            synth.stop(frequency);\n\t            this.isPlaying = false;\n\t        }\n\t        return this;\n\t    };\n\t\n\t    /**\n\t     * Link two modules, connect source module to target module.\n\t     * @param {String} source - the source module id.\n\t     * @param {String} target - the target module id.\n\t     * @return {ElectroPhone}\n\t     * @throws {Error} throw error when source is master.\n\t     * @throws {Error} throw error when source module is not found.\n\t     * @throws {Error} throw error when target module is not found.\n\t     */\n\t\n\t\n\t    ElectroPhone.prototype.link = function link(source, target) {\n\t        if (source === _Constants.CONST.MASTER) {\n\t            throw new Error('Module master can\\'t be linked to any modules.');\n\t        }\n\t        if (!synth.modulesConfig[source]) {\n\t            throw new Error('Source module ' + source + ' not found.');\n\t        }\n\t\n\t        if (!synth.modulesConfig[target]) {\n\t            throw new Error('Target module ' + target + ' not found.');\n\t        }\n\t        synth.modulesConfig[source].props.link = target;\n\t        return this;\n\t    };\n\t\n\t    /**\n\t     * Get module properties by type.\n\t     * @param {String} moduleType - module='' type, taken from ElectroPhone.TYPES.\n\t     * @return {Array}\n\t     */\n\t\n\t\n\t    ElectroPhone.getModuleProperties = function getModuleProperties() {\n\t        var moduleType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\t\n\t        var moduleProps = Props[moduleType + 'Props'] || {};\n\t\n\t        return [].concat(Object.keys(moduleProps).map(function (prop) {\n\t            return _extends({}, moduleProps[prop], { name: prop });\n\t        }), Object.keys(Props.DefaultProps).map(function (prop) {\n\t            return _extends({}, Props.DefaultProps[prop], { name: prop });\n\t        }));\n\t    };\n\t\n\t    /**\n\t     * Describe all ElectroPhone modules with parameters configuration.\n\t     * @return {Array}\n\t     */\n\t\n\t\n\t    ElectroPhone.describeModules = function describeModules() {\n\t        return [].concat(methods).filter(function (e) {\n\t            return e !== '__esModule';\n\t        }).reduce(function (result, e) {\n\t            return [].concat(result, [{\n\t                type: e,\n\t                properties: ElectroPhone.getModuleProperties(e)\n\t            }]);\n\t        }, []);\n\t    };\n\t\n\t    /**\n\t     * Get frequency float value calculated from given note and octave.\n\t     * @param {String} note - note char indicator. sharp char for semi-tones.\n\t     * @param {Number} octave - octave number.\n\t     * @return {Number}\n\t     */\n\t\n\t\n\t    ElectroPhone.getFrequency = function getFrequency(note, octave) {\n\t        var octaveD = parseInt(octave, 10) - 4,\n\t            noteD = notes.indexOf(note) - notes.indexOf('A'),\n\t            delta = 12 * octaveD,\n\t            exp = noteD + delta,\n\t            freq = 440 * Math.pow(1.059463, exp);\n\t        return parseFloat(freq.toFixed(3)) || 0;\n\t    };\n\t\n\t    /**\n\t     * Get complete notes list.\n\t     * @return {Array}\n\t     */\n\t\n\t\n\t    ElectroPhone.getNotes = function getNotes() {\n\t        return notes;\n\t    };\n\t\n\t    return ElectroPhone;\n\t}();\n\t\n\tElectroPhone.CONST = _Constants.CONST;\n\tElectroPhone.TYPES = _Constants.TYPES;\n\t\n\texports.default = ElectroPhone;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _Constants = __webpack_require__(1);\n\t\n\tvar _Voice = __webpack_require__(10);\n\t\n\tvar _Voice2 = _interopRequireDefault(_Voice);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * Synth Class\n\t * @example\n\t * const AudioCtx = window.AudioContext || window.webkitAudioContext;\n\t * const synth = new Synth(new AudioCtx(), { spectrum: false });\n\t */\n\tvar Synth = function () {\n\t\n\t    /**\n\t     * Create a synthesizer instance.\n\t     * @param {AudioContext} audioContext - Web Audio Context instance.\n\t     * @param {ElectroPhoneProperties} [properties] - synth properties.\n\t     */\n\t    function Synth(audioContext, props) {\n\t        _classCallCheck(this, Synth);\n\t\n\t        var properties = props || {};\n\t\n\t        this.audioContext = audioContext;\n\t        this.modulesConfig = {};\n\t        this.voices = {};\n\t        this.spectrum = properties.spectrum || false;\n\t        this.updateSpectrum = properties.updateSpectrum || null;\n\t        this.resetSpectrum = properties.resetSpectrum || null;\n\t\n\t        this.analyser = null;\n\t        this.javascriptNode = null;\n\t\n\t        if (this.audioContext && typeof this.audioContext.createGainNode === 'function') {\n\t            this.audioContext.createGain = this.audioContext.createGainNode;\n\t        }\n\t        if (this.audioContext && typeof this.audioContext.createDelayNode === 'function') {\n\t            this.audioContext.createDelay = this.audioContext.createDelayNode;\n\t        }\n\t\n\t        if (this.spectrum === true) {\n\t            this.createSpectrum();\n\t        }\n\t\n\t        this.module('Master', _Constants.CONST.MASTER, {\n\t            level: 100\n\t        });\n\t\n\t        this.module('Envelope', _Constants.CONST.ADSR, {\n\t            link: _Constants.CONST.MASTER,\n\t            target: 'gain',\n\t            level: 100,\n\t            attack: null,\n\t            decay: 0.1,\n\t            sustain: 100,\n\t            release: 5\n\t        });\n\t    }\n\t\n\t    /**\n\t     * Create a spectrum node for the synth instance.\n\t     */\n\t\n\t\n\t    Synth.prototype.createSpectrum = function createSpectrum() {\n\t        var SMOOTHING = 0.8,\n\t            FFT_SIZE = 2048;\n\t\n\t        if (this.audioContext) {\n\t            this.javascriptNode = this.audioContext.createScriptProcessor(2048, 1, 1);\n\t            this.javascriptNode.connect(this.audioContext.destination);\n\t\n\t            this.analyser = this.audioContext.createAnalyser();\n\t            this.analyser.smoothingTimeConstant = SMOOTHING;\n\t            this.analyser.fftSize = FFT_SIZE;\n\t            this.analyser.minDecibels = -160;\n\t            this.analyser.maxDecibels = 0;\n\t\n\t            this.analyser.connect(this.audioContext.destination);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Module method to create | update modules.\n\t     * @param {String} type - the type of module.\n\t     * @param {String} label - the module identifier.\n\t     * @param {Object} props={} - module properties\n\t     */\n\t\n\t\n\t    Synth.prototype.module = function module(type, label) {\n\t        var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\t\n\t        if (!type || type.constructor !== String) {\n\t            throw new Error('Synth Module :: missing type');\n\t        }\n\t\n\t        if (!label || label.constructor !== String) {\n\t            throw new Error('Synth Module :: missing label');\n\t        }\n\t\n\t        if (!this.modulesConfig[label]) {\n\t            this.addModule(type, label, props);\n\t        } else {\n\t            this.updateModule(label, props);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Add a new module.\n\t     * @param {String} type - the type of module.\n\t     * @param {String} label - the module identifier.\n\t     * @param {Object} props={} - module properties.\n\t     * @throws {Error} throw error when module with label is already created.\n\t     */\n\t\n\t\n\t    Synth.prototype.addModule = function addModule(type, label) {\n\t        var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\t\n\t        if (this.modulesConfig[label]) {\n\t            throw new Error('Module ' + label + ' already created. Use updateModule method instead.');\n\t        }\n\t        this.modulesConfig[label] = {\n\t            type: type,\n\t            props: props\n\t        };\n\t    };\n\t\n\t    /**\n\t     * Update the module identified by label and update all running voices.\n\t     * @param {String} label - the module identifier.\n\t     * @param {Object} props={} - module properties.\n\t     * @throws {Error} throw error when module with label is not found.\n\t     */\n\t\n\t\n\t    Synth.prototype.updateModule = function updateModule(label) {\n\t        var _this = this;\n\t\n\t        var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t        if (!this.modulesConfig[label]) {\n\t            throw new Error('Module ' + label + ' not found. Use addModule method instead.');\n\t        }\n\t        Object.keys(props).forEach(function (e) {\n\t            if (_this.modulesConfig[label].props[e] !== undefined) {\n\t                _this.modulesConfig[label].props[e] = props[e];\n\t            }\n\t        });\n\t\n\t        Object.keys(this.voices).forEach(function (e) {\n\t            _this.voices[e].updateModule(label, props);\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Destroy the module identified by label and remove running voices.\n\t     * @param {String} label - the module identifier.\n\t     * @throws {Error} throw error when module with label is not found.\n\t     */\n\t\n\t\n\t    Synth.prototype.destroyModule = function destroyModule(label) {\n\t        var _this2 = this;\n\t\n\t        if (!this.modulesConfig[label]) {\n\t            throw new Error('Module ' + label + ' not found.');\n\t        }\n\t        delete this.modulesConfig[label];\n\t        Object.keys(this.voices).forEach(function (e) {\n\t            _this2.voices[e].removeModule(label);\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Start playing the input note and start spectrum data if necessary.\n\t     * @param {Number} note - the note frequency value.\n\t     */\n\t\n\t\n\t    Synth.prototype.play = function play(note) {\n\t        var _this3 = this;\n\t\n\t        var frequencyData = void 0,\n\t            freqBufferLength = this.analyser && this.analyser.frequencyBinCount ? this.analyser.frequencyBinCount : 1024;\n\t\n\t        if (!this.voices[note]) {\n\t            this.voices[note] = new _Voice2.default(note, this.audioContext, this.modulesConfig, this.analyser);\n\t            this.voices[note].noteOn();\n\t        }\n\t        if (this.spectrum === true && this.javascriptNode) {\n\t\n\t            frequencyData = new Uint8Array(freqBufferLength);\n\t\n\t            this.javascriptNode.onaudioprocess = function () {\n\t                _this3.analyser.getByteFrequencyData(frequencyData);\n\t                if (_this3.updateSpectrum && typeof _this3.updateSpectrum === 'function') {\n\t                    _this3.updateSpectrum(frequencyData);\n\t                }\n\t            };\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Stop playing the input note and stop spectrum data if necessary.\n\t     * @param {Number} note - the note frequency value.\n\t     */\n\t\n\t\n\t    Synth.prototype.stop = function stop(note) {\n\t        if (this.voices[note]) {\n\t            this.voices[note].noteOff();\n\t            this.voices[note] = undefined;\n\t            delete this.voices[note];\n\t        }\n\t        if (Object.keys(this.voices).length === 0 && this.spectrum === true && this.javascriptNode) {\n\t            this.javascriptNode.onaudioprocess = null;\n\t            if (this.resetSpectrum && typeof this.resetSpectrum === 'function') {\n\t                this.resetSpectrum();\n\t            }\n\t        }\n\t    };\n\t\n\t    return Synth;\n\t}();\n\t\n\texports.default = Synth;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _tunajs = __webpack_require__(41);\n\t\n\tvar _tunajs2 = _interopRequireDefault(_tunajs);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar EffectManager = function EffectManager(audioContext) {\n\t  return new _tunajs2.default(audioContext);\n\t};\n\t\n\texports.default = EffectManager;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _modules = __webpack_require__(5);\n\t\n\tvar Modules = _interopRequireWildcard(_modules);\n\t\n\tvar _SoundSource = __webpack_require__(4);\n\t\n\tvar _SoundSource2 = _interopRequireDefault(_SoundSource);\n\t\n\tvar _Constants = __webpack_require__(1);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * Voice Class\n\t * @example\n\t * const v = new Voice(440, AudioContext, { master: { ... }, adsr: { ... } }, null);\n\t */\n\tvar Voice = function () {\n\t    function Voice(note, audioContext, modulesConfig, analyser) {\n\t        _classCallCheck(this, Voice);\n\t\n\t        this.note = note;\n\t        this.modulesConfig = modulesConfig;\n\t        this.modules = {};\n\t        this.soundSources = [];\n\t        this.master = null;\n\t        this.analyser = analyser || null;\n\t\n\t        if (audioContext) {\n\t            this.setupModules(audioContext);\n\t            this.linkModules();\n\t        }\n\t    }\n\t\n\t    Voice.prototype.setupModules = function setupModules(audioContext) {\n\t        var _this = this;\n\t\n\t        var modConf = void 0,\n\t            m = void 0;\n\t\n\t        Object.keys(this.modulesConfig).forEach(function (mod) {\n\t            modConf = _this.modulesConfig[mod];\n\t            if (modConf.type && modConf.props) {\n\t                m = new Modules[modConf.type](audioContext, modConf.props, modConf.type);\n\t                _this.modules[mod] = {\n\t                    type: modConf.type,\n\t                    instance: m\n\t                };\n\t\n\t                if (m.instance instanceof _SoundSource2.default) {\n\t                    _this.soundSources.push(m);\n\t                } else if (modConf.type === _Constants.TYPES.MASTER) {\n\t                    _this.master = m;\n\t                }\n\t            }\n\t        });\n\t    };\n\t\n\t    Voice.prototype.updateModule = function updateModule(moduleId, props) {\n\t        if (this.modules[moduleId] && this.modules[moduleId].instance) {\n\t            this.modules[moduleId].instance.updateProperties(props);\n\t        }\n\t    };\n\t\n\t    Voice.prototype.removeModule = function removeModule(moduleId) {\n\t        if (this.modules[moduleId] && this.modules[moduleId].instance) {\n\t            this.modules[moduleId].instance.disconnect();\n\t        }\n\t    };\n\t\n\t    Voice.prototype.linkModules = function linkModules() {\n\t        var _this2 = this;\n\t\n\t        Object.keys(this.modules).forEach(function (mod) {\n\t            var currentModule = _this2.modules[mod].instance,\n\t                currentModuleType = _this2.modules[mod].type,\n\t                destinationModule = void 0,\n\t                source = void 0,\n\t                dest = void 0;\n\t\n\t            if (currentModule.link) {\n\t                destinationModule = _this2.modules[currentModule.link];\n\t                if (destinationModule && destinationModule.instance) {\n\t                    source = currentModule.getLineOut();\n\t                    dest = destinationModule.instance.getLineIn(currentModuleType, currentModule);\n\t                    //console.log(mod, source, currentModule.link, dest);\n\t                    if (source && dest) {\n\t                        source.connect(dest);\n\t                    }\n\t                }\n\t            }\n\t        });\n\t\n\t        this.master.lineOut(this.analyser);\n\t    };\n\t\n\t    Voice.prototype.noteOn = function noteOn() {\n\t        var _this3 = this;\n\t\n\t        var m = void 0,\n\t            dest = void 0;\n\t\n\t        Object.keys(this.modules).forEach(function (e) {\n\t            m = _this3.modules[e].instance;\n\t\n\t            if (typeof m.setEnvelope === 'function') {\n\t                dest = _this3.modules[m.link] ? _this3.modules[m.link].instance : null;\n\t                m.setEnvelope(dest);\n\t            }\n\t            if (typeof m.setNote === 'function') {\n\t                m.setNote(+_this3.note);\n\t            }\n\t        });\n\t        Object.keys(this.modules).forEach(function (e) {\n\t            m = _this3.modules[e].instance;\n\t            if (m && typeof m.noteOn === 'function') {\n\t                m.noteOn();\n\t            }\n\t        });\n\t    };\n\t\n\t    Voice.prototype.noteOff = function noteOff() {\n\t        var _this4 = this;\n\t\n\t        var release = 0,\n\t            adsr = this.modules.adsr ? this.modules.adsr.instance : null,\n\t            m = void 0,\n\t            dest = void 0;\n\t\n\t        if (adsr) {\n\t            release = adsr.getReleaseTime();\n\t        }\n\t\n\t        Object.keys(this.modules).forEach(function (e) {\n\t            m = _this4.modules[e].instance;\n\t            if (m && typeof m.resetEnvelope === 'function') {\n\t                dest = _this4.modules[m.link] ? _this4.modules[m.link].instance : null;\n\t                m.resetEnvelope(dest);\n\t            }\n\t        });\n\t        Object.keys(this.modules).forEach(function (e) {\n\t            m = _this4.modules[e].instance;\n\t            if (m && typeof m.noteOff === 'function') {\n\t                m.noteOff(release);\n\t            }\n\t        });\n\t    };\n\t\n\t    return Voice;\n\t}();\n\t\n\texports.default = Voice;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _Effect2 = __webpack_require__(2);\n\t\n\tvar _Effect3 = _interopRequireDefault(_Effect2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Bitcrusher = function (_Effect) {\n\t    _inherits(Bitcrusher, _Effect);\n\t\n\t    function Bitcrusher(audioContext, props, name) {\n\t        _classCallCheck(this, Bitcrusher);\n\t\n\t        var _this = _possibleConstructorReturn(this, _Effect.call(this, audioContext, props, name));\n\t\n\t        _this.setMainEffect('Bitcrusher', 'output');\n\t        _this.setMainProperties({\n\t            bits: _this.bits,\n\t            normfreq: _this.normfreq,\n\t            bufferSize: _this.bufferSize\n\t        });\n\t        return _this;\n\t    }\n\t\n\t    return Bitcrusher;\n\t}(_Effect3.default);\n\t\n\texports.default = Bitcrusher;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _Effect2 = __webpack_require__(2);\n\t\n\tvar _Effect3 = _interopRequireDefault(_Effect2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Delay = function (_Effect) {\n\t    _inherits(Delay, _Effect);\n\t\n\t    function Delay(audioContext, props, name) {\n\t        _classCallCheck(this, Delay);\n\t\n\t        var _this = _possibleConstructorReturn(this, _Effect.call(this, audioContext, props, name));\n\t\n\t        _this.setMainEffect('Delay', 'filter');\n\t        _this.setMainProperties({\n\t            dryLevel: _this.dry,\n\t            wetLevel: _this.wet,\n\t            feedback: _this.feedback,\n\t            cutoff: _this.cutoff,\n\t            delayTime: _this.delayTime,\n\t            bypass: _this.bypass\n\t        });\n\t        return _this;\n\t    }\n\t\n\t    return Delay;\n\t}(_Effect3.default);\n\t\n\texports.default = Delay;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _Effect2 = __webpack_require__(2);\n\t\n\tvar _Effect3 = _interopRequireDefault(_Effect2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Filter = function (_Effect) {\n\t    _inherits(Filter, _Effect);\n\t\n\t    function Filter(audioContext, props, name) {\n\t        _classCallCheck(this, Filter);\n\t\n\t        var _this = _possibleConstructorReturn(this, _Effect.call(this, audioContext, props, name));\n\t\n\t        _this.setMainEffect('Filter', 'filter');\n\t        _this.setMainProperties({\n\t            frequency: _this.freq,\n\t            Q: _this.q,\n\t            gain: _this.filterGain,\n\t            filterType: _this.filterType,\n\t            bypass: _this.bypass\n\t        });\n\t        return _this;\n\t    }\n\t\n\t    return Filter;\n\t}(_Effect3.default);\n\t\n\texports.default = Filter;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _Effect2 = __webpack_require__(2);\n\t\n\tvar _Effect3 = _interopRequireDefault(_Effect2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar MoogFilter = function (_Effect) {\n\t    _inherits(MoogFilter, _Effect);\n\t\n\t    function MoogFilter(audioContext, props, name) {\n\t        _classCallCheck(this, MoogFilter);\n\t\n\t        var _this = _possibleConstructorReturn(this, _Effect.call(this, audioContext, props, name));\n\t\n\t        _this.setMainEffect('MoogFilter', 'output');\n\t        _this.setMainProperties({\n\t            cutoff: _this.cutoff,\n\t            resonance: _this.resonance,\n\t            bufferSize: _this.bufferSize\n\t        });\n\t        return _this;\n\t    }\n\t\n\t    return MoogFilter;\n\t}(_Effect3.default);\n\t\n\texports.default = MoogFilter;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _Effect2 = __webpack_require__(2);\n\t\n\tvar _Effect3 = _interopRequireDefault(_Effect2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Overdrive = function (_Effect) {\n\t    _inherits(Overdrive, _Effect);\n\t\n\t    function Overdrive(audioContext, props, name) {\n\t        _classCallCheck(this, Overdrive);\n\t\n\t        var _this = _possibleConstructorReturn(this, _Effect.call(this, audioContext, props, name));\n\t\n\t        _this.setMainEffect('Overdrive', 'output');\n\t        _this.setMainProperties({\n\t            outputGain: _this.outputGain,\n\t            drive: _this.drive,\n\t            curveAmount: _this.curveAmount,\n\t            algorithmIndex: _this.algorithmIndex,\n\t            bypass: _this.bypass\n\t        });\n\t        return _this;\n\t    }\n\t\n\t    return Overdrive;\n\t}(_Effect3.default);\n\t\n\texports.default = Overdrive;\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _Effect2 = __webpack_require__(2);\n\t\n\tvar _Effect3 = _interopRequireDefault(_Effect2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar PingPongDelay = function (_Effect) {\n\t    _inherits(PingPongDelay, _Effect);\n\t\n\t    function PingPongDelay(audioContext, props, name) {\n\t        _classCallCheck(this, PingPongDelay);\n\t\n\t        var _this = _possibleConstructorReturn(this, _Effect.call(this, audioContext, props, name));\n\t\n\t        _this.setMainEffect('PingPongDelay', 'delayLeft');\n\t        _this.setMainProperties({\n\t            dryLevel: _this.dry,\n\t            wetLevel: _this.wet,\n\t            feedback: _this.feedback,\n\t            delayTimeLeft: _this.delayTimeLeft,\n\t            delayTimeRight: _this.delayTimeRight,\n\t            bypass: _this.bypass\n\t        });\n\t        return _this;\n\t    }\n\t\n\t    return PingPongDelay;\n\t}(_Effect3.default);\n\t\n\texports.default = PingPongDelay;\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _Effect2 = __webpack_require__(2);\n\t\n\tvar _Effect3 = _interopRequireDefault(_Effect2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Tremolo = function (_Effect) {\n\t    _inherits(Tremolo, _Effect);\n\t\n\t    function Tremolo(audioContext, props, name) {\n\t        _classCallCheck(this, Tremolo);\n\t\n\t        var _this = _possibleConstructorReturn(this, _Effect.call(this, audioContext, props, name));\n\t\n\t        _this.setMainEffect('Tremolo', 'output');\n\t        _this.setMainProperties({\n\t            intensity: _this.intensity,\n\t            rate: _this.rate,\n\t            stereoPhase: _this.stereoPhase,\n\t            bypass: _this.bypass\n\t        });\n\t        return _this;\n\t    }\n\t\n\t    return Tremolo;\n\t}(_Effect3.default);\n\t\n\texports.default = Tremolo;\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _Module2 = __webpack_require__(3);\n\t\n\tvar _Module3 = _interopRequireDefault(_Module2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Envelope = function (_Module) {\n\t    _inherits(Envelope, _Module);\n\t\n\t    function Envelope(audioContext, props, name) {\n\t        _classCallCheck(this, Envelope);\n\t\n\t        return _possibleConstructorReturn(this, _Module.call(this, audioContext, props, name));\n\t    }\n\t\n\t    Envelope.prototype.createGain = function createGain() {\n\t        return false;\n\t    };\n\t\n\t    Envelope.prototype.getReleaseTime = function getReleaseTime() {\n\t        var now = this.audioContext.currentTime,\n\t            release = void 0;\n\t\n\t        if (this.release) {\n\t            release = now + this.release / 10.0;\n\t        } else {\n\t            release = now + 0.2;\n\t        }\n\t\n\t        return release;\n\t    };\n\t\n\t    Envelope.prototype.setEnvelope = function setEnvelope(dest) {\n\t        var now = this.audioContext.currentTime,\n\t            envelope = this.level % 101,\n\t            attackLevel = void 0,\n\t            sustainLevel = void 0,\n\t            attackEnd = this.attack / 20.0,\n\t            t = void 0;\n\t\n\t        if (this.target === 'gain') {\n\t            attackLevel = envelope / 100;\n\t            sustainLevel = this.sustain / 100.0;\n\t        } else {\n\t            attackLevel = envelope * 72; // Range: 0-7200: 6-octave range\n\t            sustainLevel = attackLevel * this.sustain / 100.0; // range: 0-7200\n\t        }\n\t\n\t        if (!attackEnd) {\n\t            attackEnd = 0.05; // tweak to get target decay to work properly\n\t        }\n\t\n\t        if (dest && typeof dest.getEnvelopeTarget === 'function') {\n\t            t = dest.getEnvelopeTarget(this.target);\n\t\n\t            if (t && t.setValueAtTime && t.linearRampToValueAtTime && t.setTargetAtTime) {\n\t                t.setValueAtTime(0, now);\n\t                t.linearRampToValueAtTime(attackLevel, now + attackEnd);\n\t                t.setTargetAtTime(sustainLevel, now + attackEnd, this.decay / 100.0);\n\t            }\n\t        }\n\t    };\n\t\n\t    Envelope.prototype.resetEnvelope = function resetEnvelope(dest) {\n\t        var now = this.audioContext.currentTime,\n\t            t = void 0;\n\t\n\t        if (dest && typeof dest.getEnvelopeTarget === 'function') {\n\t            t = dest.getEnvelopeTarget(this.target);\n\t\n\t            if (t && t.cancelScheduledValues && t.setValueAtTime && t.setTargetAtTime) {\n\t                t.cancelScheduledValues(now);\n\t                if (this.target === 'gain') {\n\t                    t.setValueAtTime(t.value, now);\n\t                }\n\t                t.setTargetAtTime(0, now, this.release / 100.0);\n\t            }\n\t        }\n\t    };\n\t\n\t    Envelope.prototype.getLineOut = function getLineOut() {\n\t        return false;\n\t    };\n\t\n\t    return Envelope;\n\t}(_Module3.default);\n\t\n\texports.default = Envelope;\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _Module2 = __webpack_require__(3);\n\t\n\tvar _Module3 = _interopRequireDefault(_Module2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Master = function (_Module) {\n\t    _inherits(Master, _Module);\n\t\n\t    function Master(audioContext, props, name) {\n\t        _classCallCheck(this, Master);\n\t\n\t        var _this = _possibleConstructorReturn(this, _Module.call(this, audioContext, props, name));\n\t\n\t        _this.main = _this.audioContext.createGain();\n\t        _this.link = null;\n\t        return _this;\n\t    }\n\t\n\t    Master.prototype.getLineIn = function getLineIn() {\n\t        return this.main;\n\t    };\n\t\n\t    Master.prototype.lineOut = function lineOut(analyser) {\n\t        this.main.connect(this.envelope);\n\t        if (analyser) {\n\t            this.gain.connect(analyser);\n\t        } else {\n\t            this.gain.connect(this.audioContext.destination);\n\t        }\n\t    };\n\t\n\t    return Master;\n\t}(_Module3.default);\n\t\n\texports.default = Master;\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _Module2 = __webpack_require__(3);\n\t\n\tvar _Module3 = _interopRequireDefault(_Module2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Pan = function (_Module) {\n\t    _inherits(Pan, _Module);\n\t\n\t    function Pan(audioContext, props, name) {\n\t        _classCallCheck(this, Pan);\n\t\n\t        var _this = _possibleConstructorReturn(this, _Module.call(this, audioContext, props, name));\n\t\n\t        _this.main = _this.audioContext.createStereoPanner();\n\t        _this.main.pan.value = _this.pan;\n\t        _this.main.connect(_this.envelope);\n\t        return _this;\n\t    }\n\t\n\t    return Pan;\n\t}(_Module3.default);\n\t\n\texports.default = Pan;\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _SoundSource2 = __webpack_require__(4);\n\t\n\tvar _SoundSource3 = _interopRequireDefault(_SoundSource2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Modulator = function (_SoundSource) {\n\t    _inherits(Modulator, _SoundSource);\n\t\n\t    function Modulator(audioContext, props, name) {\n\t        _classCallCheck(this, Modulator);\n\t\n\t        var _this = _possibleConstructorReturn(this, _SoundSource.call(this, audioContext, props, name));\n\t\n\t        _this.main = _this.audioContext.createOscillator();\n\t        _this.main.type = _this.wave;\n\t        _this.main.connect(_this.envelope);\n\t        return _this;\n\t    }\n\t\n\t    Modulator.prototype.setNote = function setNote() {\n\t        var f = this.freq % 11;\n\t        this.main.frequency.value = f;\n\t    };\n\t\n\t    return Modulator;\n\t}(_SoundSource3.default);\n\t\n\texports.default = Modulator;\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _Constants = __webpack_require__(1);\n\t\n\tvar _SoundSource2 = __webpack_require__(4);\n\t\n\tvar _SoundSource3 = _interopRequireDefault(_SoundSource2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Noise = function (_SoundSource) {\n\t    _inherits(Noise, _SoundSource);\n\t\n\t    function Noise(audioContext, props, name) {\n\t        _classCallCheck(this, Noise);\n\t\n\t        var _this = _possibleConstructorReturn(this, _SoundSource.call(this, audioContext, props, name));\n\t\n\t        _this.defaultLineInProperty = 'detune';\n\t        _this.main = _this.audioContext.createBufferSource();\n\t        _this.main.connect(_this.envelope);\n\t\n\t        _this.setDetune();\n\t        _this.setColor();\n\t        return _this;\n\t    }\n\t\n\t    Noise.prototype.setColor = function setColor() {\n\t        switch (this.color) {\n\t            case _Constants.CONST.NOISE_WHITE:\n\t                this.main.buffer = this.white();\n\t                break;\n\t            case _Constants.CONST.NOISE_PINK:\n\t                this.main.buffer = this.pink();\n\t                break;\n\t            case _Constants.CONST.NOISE_BROWN:\n\t                this.main.buffer = this.brown();\n\t                break;\n\t            default:\n\t                throw new Error('Invalid Noise color: ' + this.color);\n\t        }\n\t    };\n\t\n\t    Noise.prototype.white = function white() {\n\t        var noiseBuffer = this.getNoiseBuffer(),\n\t            bufferSize = this.getBufferSize(),\n\t            output = noiseBuffer.getChannelData(0);\n\t\n\t        for (var i = 0; i < bufferSize; i++) {\n\t            output[i] = Math.random() * 2 - 1;\n\t        }\n\t\n\t        return noiseBuffer;\n\t    };\n\t\n\t    Noise.prototype.pink = function pink() {\n\t        var b0 = void 0,\n\t            b1 = void 0,\n\t            b2 = void 0,\n\t            b3 = void 0,\n\t            b4 = void 0,\n\t            b5 = void 0,\n\t            b6 = void 0,\n\t            noiseBuffer = this.getNoiseBuffer(),\n\t            bufferSize = this.getBufferSize(),\n\t            output = noiseBuffer.getChannelData(0),\n\t            white = void 0;\n\t\n\t        b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\t\n\t        for (var i = 0; i < bufferSize; i++) {\n\t            white = Math.random() * 2 - 1;\n\t\n\t            b0 = 0.99886 * b0 + white * 0.0555179;\n\t            b1 = 0.99332 * b1 + white * 0.0750759;\n\t            b2 = 0.96900 * b2 + white * 0.1538520;\n\t            b3 = 0.86650 * b3 + white * 0.3104856;\n\t            b4 = 0.55000 * b4 + white * 0.5329522;\n\t            b5 = -0.7616 * b5 - white * 0.0168980;\n\t\n\t            output[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t            output[i] *= 0.11;\n\t            b6 = white * 0.115926;\n\t        }\n\t\n\t        return noiseBuffer;\n\t    };\n\t\n\t    Noise.prototype.brown = function brown() {\n\t        var noiseBuffer = this.getNoiseBuffer(),\n\t            bufferSize = this.getBufferSize(),\n\t            output = noiseBuffer.getChannelData(0),\n\t            lastOut = 0.0,\n\t            white = void 0;\n\t\n\t        for (var i = 0; i < bufferSize; i++) {\n\t            white = white = Math.random() * 2 - 1;\n\t\n\t            output[i] = (lastOut + 0.02 * white) / 1.02;\n\t            lastOut = output[i];\n\t            output[i] *= 3.5;\n\t        }\n\t\n\t        return noiseBuffer;\n\t    };\n\t\n\t    Noise.prototype.getBufferSize = function getBufferSize() {\n\t        return 2 * this.audioContext.sampleRate;\n\t    };\n\t\n\t    Noise.prototype.getNoiseBuffer = function getNoiseBuffer() {\n\t        var bufferSize = this.getBufferSize(),\n\t            noiseBuffer = this.audioContext.createBuffer(1, bufferSize, this.audioContext.sampleRate);\n\t        return noiseBuffer;\n\t    };\n\t\n\t    Noise.prototype.setNote = function setNote() {\n\t        this.main.loop = true;\n\t    };\n\t\n\t    return Noise;\n\t}(_SoundSource3.default);\n\t\n\texports.default = Noise;\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _SoundSource2 = __webpack_require__(4);\n\t\n\tvar _SoundSource3 = _interopRequireDefault(_SoundSource2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Oscillator = function (_SoundSource) {\n\t    _inherits(Oscillator, _SoundSource);\n\t\n\t    function Oscillator(audioContext, props, name) {\n\t        _classCallCheck(this, Oscillator);\n\t\n\t        var _this = _possibleConstructorReturn(this, _SoundSource.call(this, audioContext, props, name));\n\t\n\t        _this.main = _this.audioContext.createOscillator();\n\t        _this.main.type = _this.wave;\n\t        _this.main.connect(_this.envelope);\n\t\n\t        _this.setDetune();\n\t        return _this;\n\t    }\n\t\n\t    Oscillator.prototype.setNote = function setNote(note) {\n\t        this.main.frequency.value = note;\n\t    };\n\t\n\t    return Oscillator;\n\t}(_SoundSource3.default);\n\t\n\texports.default = Oscillator;\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\tvar BitcrusherProps = {\n\t    bits: {\n\t        type: 'number',\n\t        bounds: [1, 16],\n\t        defaultValue: 4\n\t    },\n\t    normfreq: {\n\t        type: 'number',\n\t        bounds: [0, 1],\n\t        step: 0.1,\n\t        defaultValue: 0.1\n\t    },\n\t    bufferSize: {\n\t        type: 'number',\n\t        bounds: [256, 16384],\n\t        defaultValue: 4096\n\t    },\n\t    bypass: {\n\t        type: 'number',\n\t        bounds: [0, 1],\n\t        defaultValue: 0\n\t    }\n\t};\n\t\n\texports.default = BitcrusherProps;\n\n/***/ },\n/* 25 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\tvar DefaultProps = {\n\t    link: {\n\t        type: 'string',\n\t        defaultValue: ''\n\t    },\n\t    level: {\n\t        type: 'number',\n\t        bounds: [0, 100],\n\t        defaultValue: 100\n\t    }\n\t};\n\t\n\texports.default = DefaultProps;\n\n/***/ },\n/* 26 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\tvar DelayProps = {\n\t    dry: {\n\t        type: 'number',\n\t        bounds: [0, 1],\n\t        step: 0.1,\n\t        defaultValue: 1\n\t    },\n\t    wet: {\n\t        type: 'number',\n\t        bounds: [0, 1],\n\t        step: 0.1,\n\t        defaultValue: 0.5\n\t    },\n\t    feedback: {\n\t        type: 'number',\n\t        bounds: [0, 0.9],\n\t        step: 0.1,\n\t        defaultValue: 0.4\n\t    },\n\t    cutoff: {\n\t        type: 'number',\n\t        bounds: [20, 20000],\n\t        defaultValue: 440\n\t    },\n\t    delayTime: {\n\t        type: 'number',\n\t        bounds: [20, 1000],\n\t        defaultValue: 100\n\t    },\n\t    bypass: {\n\t        type: 'number',\n\t        bounds: [0, 1],\n\t        defaultValue: 0\n\t    }\n\t};\n\t\n\texports.default = DelayProps;\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _Constants = __webpack_require__(1);\n\t\n\tvar EnvelopeProps = {\n\t    target: {\n\t        type: 'string',\n\t        bounds: [_Constants.CONST.ENVELOPE_TARGET_GAIN, _Constants.CONST.ENVELOPE_TARGET_FREQ, _Constants.CONST.ENVELOPE_TARGET_DETUNE],\n\t        defaultValue: _Constants.CONST.ENVELOPE_TARGET_GAIN\n\t    },\n\t    attack: {\n\t        type: 'number',\n\t        bounds: [0, 100],\n\t        defaultValue: 0\n\t    },\n\t    decay: {\n\t        type: 'number',\n\t        bounds: [1, 100],\n\t        defaultValue: 1\n\t    },\n\t    sustain: {\n\t        type: 'number',\n\t        bounds: [0, 100],\n\t        defaultValue: 100\n\t    },\n\t    release: {\n\t        type: 'number',\n\t        bounds: [0, 100],\n\t        defaultValue: 5\n\t    }\n\t};\n\t\n\texports.default = EnvelopeProps;\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _Constants = __webpack_require__(1);\n\t\n\tvar FilterProps = {\n\t    freq: {\n\t        type: 'number',\n\t        bounds: [20, 20000],\n\t        defaultValue: 440\n\t    },\n\t    q: {\n\t        type: 'number',\n\t        bounds: [0, 100],\n\t        defaultValue: 10\n\t    },\n\t    filterGain: {\n\t        type: 'number',\n\t        bounds: [-40, 40],\n\t        defaultValue: 0\n\t    },\n\t    filterType: {\n\t        type: 'string',\n\t        bounds: [_Constants.CONST.FILTER_ALLPASS, _Constants.CONST.FILTER_BANDPASS, _Constants.CONST.FILTER_HIGHPASS, _Constants.CONST.FILTER_HIGHSHELF, _Constants.CONST.FILTER_LOWPASS, _Constants.CONST.FILTER_LOWSHELF, _Constants.CONST.FILTER_NOTCH, _Constants.CONST.FILTER_PEAKING],\n\t        defaultValue: _Constants.CONST.FILTER_LOWPASS\n\t    },\n\t    bypass: {\n\t        type: 'number',\n\t        bounds: [0, 1],\n\t        defaultValue: 0\n\t    }\n\t};\n\t\n\texports.default = FilterProps;\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _Constants = __webpack_require__(1);\n\t\n\tvar ModulatorProps = {\n\t    freq: {\n\t        type: 'number',\n\t        bounds: [1, 100],\n\t        defaultValue: 5\n\t    },\n\t    target: {\n\t        type: 'string',\n\t        bounds: [_Constants.CONST.MODULATOR_TARGET_FREQ, _Constants.CONST.MODULATOR_TARGET_DETUNE],\n\t        defaultValue: _Constants.CONST.MODULATOR_TARGET_FREQ\n\t    },\n\t    wave: {\n\t        type: 'string',\n\t        bounds: [_Constants.CONST.WAVE_SINE, _Constants.CONST.WAVE_SQUARE, _Constants.CONST.WAVE_SAWTOOTH, _Constants.CONST.WAVE_TRIANLGE, _Constants.CONST.WAVE_CUSTOM],\n\t        defaultValue: _Constants.CONST.WAVE_SINE\n\t    }\n\t};\n\t\n\texports.default = ModulatorProps;\n\n/***/ },\n/* 30 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\tvar MoogFilterProps = {\n\t    cutoff: {\n\t        type: 'number',\n\t        bounds: [0, 1],\n\t        step: 0.1,\n\t        defaultValue: 0.1\n\t    },\n\t    resonance: {\n\t        type: 'number',\n\t        bounds: [0, 4],\n\t        step: 0.1,\n\t        defaultValue: 3.5\n\t    },\n\t    bufferSize: {\n\t        type: 'number',\n\t        bounds: [256, 16384],\n\t        defaultValue: 4096\n\t    },\n\t    bypass: {\n\t        type: 'number',\n\t        bounds: [0, 1],\n\t        defaultValue: 0\n\t    }\n\t};\n\t\n\texports.default = MoogFilterProps;\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _Constants = __webpack_require__(1);\n\t\n\tvar NoiseProps = {\n\t    color: {\n\t        type: 'string',\n\t        bounds: [_Constants.CONST.NOISE_BROWN, _Constants.CONST.NOISE_PINK, _Constants.CONST.NOISE_WHITE],\n\t        defaultValue: _Constants.CONST.NOISE_WHITE\n\t    },\n\t    detune: {\n\t        type: 'number',\n\t        bounds: [-1200, 1200],\n\t        defaultValue: 0\n\t    }\n\t};\n\t\n\texports.default = NoiseProps;\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _Constants = __webpack_require__(1);\n\t\n\tvar OscillatorProps = {\n\t    detune: {\n\t        type: 'number',\n\t        bounds: [-1200, 1200],\n\t        defaultValue: 0\n\t    },\n\t    wave: {\n\t        type: 'string',\n\t        bounds: [_Constants.CONST.WAVE_SINE, _Constants.CONST.WAVE_SQUARE, _Constants.CONST.WAVE_SAWTOOTH, _Constants.CONST.WAVE_TRIANLGE, _Constants.CONST.WAVE_CUSTOM],\n\t        defaultValue: _Constants.CONST.WAVE_SINE\n\t    }\n\t};\n\t\n\texports.default = OscillatorProps;\n\n/***/ },\n/* 33 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\tvar OverdriveProps = {\n\t    outputGain: {\n\t        type: 'number',\n\t        bounds: [0, 1],\n\t        step: 0.1,\n\t        defaultValue: 1\n\t    },\n\t    drive: {\n\t        type: 'number',\n\t        bounds: [0, 1],\n\t        step: 0.1,\n\t        defaultValue: 1\n\t    },\n\t    curveAmount: {\n\t        type: 'number',\n\t        bounds: [0, 1],\n\t        step: 0.1,\n\t        defaultValue: 0.7\n\t    },\n\t    algorithmIndex: {\n\t        type: 'number',\n\t        bounds: [0, 5],\n\t        defaultValue: 0\n\t    },\n\t    bypass: {\n\t        type: 'number',\n\t        bounds: [0, 1],\n\t        defaultValue: 0\n\t    }\n\t};\n\t\n\texports.default = OverdriveProps;\n\n/***/ },\n/* 34 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\tvar PanProps = {\n\t    pan: {\n\t        type: 'number',\n\t        bounds: [-1, 1],\n\t        step: 0.1,\n\t        defaultValue: 0\n\t    }\n\t};\n\t\n\texports.default = PanProps;\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\tvar PingPongDelayProps = {\n\t    wet: {\n\t        type: 'number',\n\t        bounds: [0, 1],\n\t        step: 0.1,\n\t        defaultValue: 0.5\n\t    },\n\t    feedback: {\n\t        type: 'number',\n\t        bounds: [0, 1],\n\t        step: 0.1,\n\t        defaultValue: 0.3\n\t    },\n\t    delayTimeLeft: {\n\t        type: 'number',\n\t        bounds: [1, 10000],\n\t        defaultValue: 200\n\t    },\n\t    delayTimeRight: {\n\t        type: 'number',\n\t        bounds: [1, 10000],\n\t        defaultValue: 400\n\t    },\n\t    bypass: {\n\t        type: 'number',\n\t        bounds: [0, 1],\n\t        defaultValue: 0\n\t    }\n\t};\n\t\n\texports.default = PingPongDelayProps;\n\n/***/ },\n/* 36 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\tvar TremoloProps = {\n\t    intensity: {\n\t        type: 'number',\n\t        bounds: [0, 1],\n\t        step: 0.1,\n\t        defaultValue: 0.3\n\t    },\n\t    rate: {\n\t        type: 'number',\n\t        bounds: [0, 11],\n\t        step: 0.1,\n\t        defaultValue: 5\n\t    },\n\t    stereoPhase: {\n\t        type: 'number',\n\t        bounds: [0, 180],\n\t        defaultValue: 0\n\t    },\n\t    bypass: {\n\t        type: 'number',\n\t        bounds: [0, 1],\n\t        defaultValue: 0\n\t    }\n\t};\n\t\n\texports.default = TremoloProps;\n\n/***/ },\n/* 37 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tvar WS_CURVE_SIZE = 4096;\n\tvar curveL = new Float32Array(WS_CURVE_SIZE);\n\tvar curveR = new Float32Array(WS_CURVE_SIZE);\n\t\n\t(function() {\n\t  for (var i = 0; i < WS_CURVE_SIZE; i++) {\n\t    curveL[i] = Math.cos((i / WS_CURVE_SIZE) * Math.PI * 0.5);\n\t    curveR[i] = Math.sin((i / WS_CURVE_SIZE) * Math.PI * 0.5);\n\t  }\n\t})();\n\t\n\tmodule.exports = {\n\t  L: curveL,\n\t  R: curveR,\n\t};\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";\n\t\n\tvar curve = __webpack_require__(37);\n\t\n\t/**\n\t *  StereoPannerImpl\n\t *  +--------------------------------+  +------------------------+\n\t *  | ChannelSplitter(inlet)         |  | BufferSourceNode(_dc1) |\n\t *  +--------------------------------+  | buffer: [ 1, 1 ]       |\n\t *    |                            |    | loop: true             |\n\t *    |                            |    +------------------------+\n\t *    |                            |       |\n\t *    |                            |  +----------------+\n\t *    |                            |  | GainNode(_pan) |\n\t *    |                            |  | gain: 0(pan)   |\n\t *    |                            |  +----------------+\n\t *    |                            |    |\n\t *    |    +-----------------------|----+\n\t *    |    |                       |    |\n\t *    |  +----------------------+  |  +----------------------+\n\t *    |  | WaveShaperNode(_wsL) |  |  | WaveShaperNode(_wsR) |\n\t *    |  | curve: curveL        |  |  | curve: curveR        |\n\t *    |  +----------------------+  |  +----------------------+\n\t *    |               |            |               |\n\t *    |               |            |               |\n\t *    |               |            |               |\n\t *  +--------------+  |          +--------------+  |\n\t *  | GainNode(_L) |  |          | GainNode(_R) |  |\n\t *  | gain: 0    <----+          | gain: 0    <----+\n\t *  +--------------+             +--------------+\n\t *    |                            |\n\t *  +--------------------------------+\n\t *  | ChannelMergerNode(outlet)      |\n\t *  +--------------------------------+\n\t */\n\tfunction StereoPannerImpl(audioContext) {\n\t  this.audioContext = audioContext;\n\t  this.inlet = audioContext.createChannelSplitter(2);\n\t  this._pan = audioContext.createGain();\n\t  this.pan = this._pan.gain;\n\t  this._wsL = audioContext.createWaveShaper();\n\t  this._wsR = audioContext.createWaveShaper();\n\t  this._L = audioContext.createGain();\n\t  this._R = audioContext.createGain();\n\t  this.outlet = audioContext.createChannelMerger(2);\n\t\n\t  this.inlet.channelCount = 2;\n\t  this.inlet.channelCountMode = \"explicit\";\n\t  this._pan.gain.value = 0;\n\t  this._wsL.curve = curve.L;\n\t  this._wsR.curve = curve.R;\n\t  this._L.gain.value = 0;\n\t  this._R.gain.value = 0;\n\t\n\t  this.inlet.connect(this._L, 0);\n\t  this.inlet.connect(this._R, 1);\n\t  this._L.connect(this.outlet, 0, 0);\n\t  this._R.connect(this.outlet, 0, 1);\n\t  this._pan.connect(this._wsL);\n\t  this._pan.connect(this._wsR);\n\t  this._wsL.connect(this._L.gain);\n\t  this._wsR.connect(this._R.gain);\n\t\n\t  this._isConnected = false;\n\t  this._dc1buffer = null;\n\t  this._dc1 = null;\n\t}\n\t\n\tStereoPannerImpl.prototype.connect = function(destination) {\n\t  var audioContext = this.audioContext;\n\t  if (!this._isConnected) {\n\t    this._isConnected = true;\n\t    this._dc1buffer = audioContext.createBuffer(1, 2, audioContext.sampleRate);\n\t    this._dc1buffer.getChannelData(0).set([ 1, 1 ]);\n\t\n\t    this._dc1 = audioContext.createBufferSource();\n\t    this._dc1.buffer = this._dc1buffer;\n\t    this._dc1.loop = true;\n\t    this._dc1.start(audioContext.currentTime);\n\t    this._dc1.connect(this._pan);\n\t  }\n\t  global.AudioNode.prototype.connect.call(this.outlet, destination);\n\t};\n\t\n\tStereoPannerImpl.prototype.disconnect = function() {\n\t  var audioContext = this.audioContext;\n\t  if (this._isConnected) {\n\t    this._isConnected = false;\n\t    this._dc1.stop(audioContext.currentTime);\n\t    this._dc1.disconnect();\n\t    this._dc1 = null;\n\t    this._dc1buffer = null;\n\t  }\n\t  global.AudioNode.prototype.disconnect.call(this.outlet);\n\t};\n\t\n\tmodule.exports = StereoPannerImpl;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar StereoPannerImpl = __webpack_require__(38);\n\t\n\tfunction StereoPanner(audioContext) {\n\t  var impl = new StereoPannerImpl(audioContext);\n\t\n\t  Object.defineProperties(impl.inlet, {\n\t    pan: {\n\t      value: impl.pan,\n\t      enumerable: true\n\t    },\n\t    connect: {\n\t      value: function(node) {\n\t        return impl.connect(node);\n\t      }\n\t    },\n\t    disconnect: {\n\t      value: function() {\n\t        return impl.disconnect();\n\t      }\n\t    }\n\t  });\n\t\n\t  return impl.inlet;\n\t}\n\t\n\tmodule.exports = StereoPanner;\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";\n\t\n\tvar AudioContext = global.AudioContext || global.webkitAudioContext;\n\tvar StereoPannerNode = __webpack_require__(39);\n\t\n\tif (AudioContext && !AudioContext.prototype.createStereoPanner) {\n\t  AudioContext.prototype.createStereoPanner = function() {\n\t    return new StereoPannerNode(this);\n\t  };\n\t}\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t    Copyright (c) 2012 DinahMoe AB & Oskar Eriksson\n\t\n\t    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation\n\t    files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy,\n\t    modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software\n\t    is furnished to do so, subject to the following conditions:\n\t\n\t    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\t\n\t    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\t    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n\t    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t*/\n\t(function(window) {\n\t    var userContext,\n\t        userInstance,\n\t        pipe = function(param, val) {\n\t            param.value = val;\n\t        },\n\t        Super = Object.create(null, {\n\t            activate: {\n\t                writable: true,\n\t                value: function(doActivate) {\n\t                    if (doActivate) {\n\t                        this.input.disconnect();\n\t                        this.input.connect(this.activateNode);\n\t                        if (this.activateCallback) {\n\t                            this.activateCallback(doActivate);\n\t                        }\n\t                    } else {\n\t                        this.input.disconnect();\n\t                        this.input.connect(this.output);\n\t                    }\n\t                }\n\t            },\n\t            bypass: {\n\t                get: function() {\n\t                    return this._bypass;\n\t                },\n\t                set: function(value) {\n\t                    if (this._lastBypassValue === value) {\n\t                        return;\n\t                    }\n\t                    this._bypass = value;\n\t                    this.activate(!value);\n\t                    this._lastBypassValue = value;\n\t                }\n\t            },\n\t            connect: {\n\t                value: function(target) {\n\t                    this.output.connect(target);\n\t                }\n\t            },\n\t            disconnect: {\n\t                value: function(target) {\n\t                    this.output.disconnect(target);\n\t                }\n\t            },\n\t            connectInOrder: {\n\t                value: function(nodeArray) {\n\t                    var i = nodeArray.length - 1;\n\t                    while (i--) {\n\t                        if (!nodeArray[i].connect) {\n\t                            return console.error(\"AudioNode.connectInOrder: TypeError: Not an AudioNode.\", nodeArray[i]);\n\t                        }\n\t                        if (nodeArray[i + 1].input) {\n\t                            nodeArray[i].connect(nodeArray[i + 1].input);\n\t                        } else {\n\t                            nodeArray[i].connect(nodeArray[i + 1]);\n\t                        }\n\t                    }\n\t                }\n\t            },\n\t            getDefaults: {\n\t                value: function() {\n\t                    var result = {};\n\t                    for (var key in this.defaults) {\n\t                        result[key] = this.defaults[key].value;\n\t                    }\n\t                    return result;\n\t                }\n\t            },\n\t            automate: {\n\t                value: function(property, value, duration, startTime) {\n\t                    var start = startTime ? ~~(startTime / 1000) : userContext.currentTime,\n\t                        dur = duration ? ~~(duration / 1000) : 0,\n\t                        _is = this.defaults[property],\n\t                        param = this[property],\n\t                        method;\n\t\n\t                    if (param) {\n\t                        if (_is.automatable) {\n\t                            if (!duration) {\n\t                                method = \"setValueAtTime\";\n\t                            } else {\n\t                                method = \"linearRampToValueAtTime\";\n\t                                param.cancelScheduledValues(start);\n\t                                param.setValueAtTime(param.value, start);\n\t                            }\n\t                            param[method](value, dur + start);\n\t                        } else {\n\t                            param = value;\n\t                        }\n\t                    } else {\n\t                        console.error(\"Invalid Property for \" + this.name);\n\t                    }\n\t                }\n\t            }\n\t        }),\n\t        FLOAT = \"float\",\n\t        BOOLEAN = \"boolean\",\n\t        STRING = \"string\",\n\t        INT = \"int\";\n\t\n\t    if (typeof module !== \"undefined\" && module.exports) {\n\t        module.exports = Tuna;\n\t    } else if (true) {\n\t        window.define(\"Tuna\", definition);\n\t    } else {\n\t        window.Tuna = Tuna;\n\t    }\n\t\n\t    function definition() {\n\t        return Tuna;\n\t    }\n\t\n\t    function Tuna(context) {\n\t        if (!(this instanceof Tuna)) {\n\t            return new Tuna(context);\n\t        }\n\t        if (!window.AudioContext) {\n\t            window.AudioContext = window.webkitAudioContext;\n\t        }\n\t        if (!context) {\n\t            console.log(\"tuna.js: Missing audio context! Creating a new context for you.\");\n\t            context = window.AudioContext && (new window.AudioContext());\n\t        }\n\t        if (!context) {\n\t            throw new Error(\"Tuna cannot initialize because this environment does not support web audio.\");\n\t        }\n\t        connectify(context);\n\t        userContext = context;\n\t        userInstance = this;\n\t    }\n\t\n\t    function connectify(context) {\n\t        if (context.__connectified__ === true) return;\n\t\n\t        var gain = context.createGain(),\n\t            proto = Object.getPrototypeOf(Object.getPrototypeOf(gain)),\n\t            oconnect = proto.connect;\n\t\n\t        proto.connect = shimConnect;\n\t        context.__connectified__ = true; // Prevent overriding connect more than once\n\t\n\t        function shimConnect() {\n\t            var node = Array.prototype.shift.apply(arguments);\n\t            node = Super.isPrototypeOf ? (Super.isPrototypeOf(node) ? node.input : node) : (node.input || node);\n\t            arguments = Array.prototype.slice.call(arguments);\n\t            arguments.unshift(node);\n\t            oconnect.apply(this, arguments);\n\t            return node;\n\t        }\n\t    }\n\t\n\t    function dbToWAVolume(db) {\n\t        return Math.max(0, Math.round(100 * Math.pow(2, db / 6)) / 100);\n\t    }\n\t\n\t    function fmod(x, y) {\n\t        // http://kevin.vanzonneveld.net\n\t        // *     example 1: fmod(5.7, 1.3);\n\t        // *     returns 1: 0.5\n\t        var tmp, tmp2, p = 0,\n\t            pY = 0,\n\t            l = 0.0,\n\t            l2 = 0.0;\n\t\n\t        tmp = x.toExponential().match(/^.\\.?(.*)e(.+)$/);\n\t        p = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\n\t        tmp = y.toExponential().match(/^.\\.?(.*)e(.+)$/);\n\t        pY = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\n\t\n\t        if (pY > p) {\n\t            p = pY;\n\t        }\n\t\n\t        tmp2 = (x % y);\n\t\n\t        if (p < -100 || p > 20) {\n\t            // toFixed will give an out of bound error so we fix it like this:\n\t            l = Math.round(Math.log(tmp2) / Math.log(10));\n\t            l2 = Math.pow(10, l);\n\t\n\t            return (tmp2 / l2).toFixed(l - p) * l2;\n\t        } else {\n\t            return parseFloat(tmp2.toFixed(-p));\n\t        }\n\t    }\n\t\n\t    function sign(x) {\n\t        if (x === 0) {\n\t            return 1;\n\t        } else {\n\t            return Math.abs(x) / x;\n\t        }\n\t    }\n\t\n\t    function tanh(n) {\n\t        return (Math.exp(n) - Math.exp(-n)) / (Math.exp(n) + Math.exp(-n));\n\t    }\n\t\n\t    function initValue(userVal, defaultVal) {\n\t        return userVal === undefined ? defaultVal : userVal;\n\t    }\n\t\n\t    Tuna.prototype.Bitcrusher = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.bufferSize = properties.bufferSize || this.defaults.bufferSize.value;\n\t\n\t        this.input = userContext.createGain();\n\t        this.activateNode = userContext.createGain();\n\t        this.processor = userContext.createScriptProcessor(this.bufferSize, 1, 1);\n\t        this.output = userContext.createGain();\n\t\n\t        this.activateNode.connect(this.processor);\n\t        this.processor.connect(this.output);\n\t\n\t        var phaser = 0,\n\t            last = 0,\n\t            input, output, step, i, length;\n\t        this.processor.onaudioprocess = function(e) {\n\t            input = e.inputBuffer.getChannelData(0),\n\t            output = e.outputBuffer.getChannelData(0),\n\t            step = Math.pow(1 / 2, this.bits);\n\t            length = input.length;\n\t            for (i = 0; i < length; i++) {\n\t                phaser += this.normfreq;\n\t                if (phaser >= 1.0) {\n\t                    phaser -= 1.0;\n\t                    last = step * Math.floor(input[i] / step + 0.5);\n\t                }\n\t                output[i] = last;\n\t            }\n\t        };\n\t\n\t        this.bits = properties.bits || this.defaults.bits.value;\n\t        this.normfreq = initValue(properties.normfreq, this.defaults.normfreq.value);\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.Bitcrusher.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"Bitcrusher\"\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                bits: {\n\t                    value: 4,\n\t                    min: 1,\n\t                    max: 16,\n\t                    automatable: false,\n\t                    type: INT\n\t                },\n\t                bufferSize: {\n\t                    value: 4096,\n\t                    min: 256,\n\t                    max: 16384,\n\t                    automatable: false,\n\t                    type: INT\n\t                },\n\t                bypass: {\n\t                    value: true,\n\t                    automatable: false,\n\t                    type: BOOLEAN\n\t                },\n\t                normfreq: {\n\t                    value: 0.1,\n\t                    min: 0.0001,\n\t                    max: 1.0,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                }\n\t            }\n\t        },\n\t        bits: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.processor.bits;\n\t            },\n\t            set: function(value) {\n\t                this.processor.bits = value;\n\t            }\n\t        },\n\t        normfreq: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.processor.normfreq;\n\t            },\n\t            set: function(value) {\n\t                this.processor.normfreq = value;\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.Cabinet = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.activateNode = userContext.createGain();\n\t        this.convolver = this.newConvolver(properties.impulsePath ||\n\t            \"../impulses/impulse_guitar.wav\");\n\t        this.makeupNode = userContext.createGain();\n\t        this.output = userContext.createGain();\n\t\n\t        this.activateNode.connect(this.convolver.input);\n\t        this.convolver.output.connect(this.makeupNode);\n\t        this.makeupNode.connect(this.output);\n\t\n\t        this.makeupGain = initValue(properties.makeupGain, this.defaults\n\t            .makeupGain);\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.Cabinet.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"Cabinet\"\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                makeupGain: {\n\t                    value: 1,\n\t                    min: 0,\n\t                    max: 20,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                bypass: {\n\t                    value: false,\n\t                    automatable: false,\n\t                    type: BOOLEAN\n\t                }\n\t            }\n\t        },\n\t        makeupGain: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.makeupNode.gain;\n\t            },\n\t            set: function(value) {\n\t                this.makeupNode.gain.value = value;\n\t            }\n\t        },\n\t        newConvolver: {\n\t            value: function(impulsePath) {\n\t                return new userInstance.Convolver({\n\t                    impulse: impulsePath,\n\t                    dryLevel: 0,\n\t                    wetLevel: 1\n\t                });\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.Chorus = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.attenuator = this.activateNode = userContext.createGain();\n\t        this.splitter = userContext.createChannelSplitter(2);\n\t        this.delayL = userContext.createDelay();\n\t        this.delayR = userContext.createDelay();\n\t        this.feedbackGainNodeLR = userContext.createGain();\n\t        this.feedbackGainNodeRL = userContext.createGain();\n\t        this.merger = userContext.createChannelMerger(2);\n\t        this.output = userContext.createGain();\n\t\n\t        this.lfoL = new userInstance.LFO({\n\t            target: this.delayL.delayTime,\n\t            callback: pipe\n\t        });\n\t        this.lfoR = new userInstance.LFO({\n\t            target: this.delayR.delayTime,\n\t            callback: pipe\n\t        });\n\t\n\t        this.input.connect(this.attenuator);\n\t        this.attenuator.connect(this.output);\n\t        this.attenuator.connect(this.splitter);\n\t        this.splitter.connect(this.delayL, 0);\n\t        this.splitter.connect(this.delayR, 1);\n\t        this.delayL.connect(this.feedbackGainNodeLR);\n\t        this.delayR.connect(this.feedbackGainNodeRL);\n\t        this.feedbackGainNodeLR.connect(this.delayR);\n\t        this.feedbackGainNodeRL.connect(this.delayL);\n\t        this.delayL.connect(this.merger, 0, 0);\n\t        this.delayR.connect(this.merger, 0, 1);\n\t        this.merger.connect(this.output);\n\t\n\t        this.feedback = initValue(properties.feedback, this.defaults.feedback\n\t            .value);\n\t        this.rate = initValue(properties.rate, this.defaults.rate.value);\n\t        this.delay = initValue(properties.delay, this.defaults.delay.value);\n\t        this.depth = initValue(properties.depth, this.defaults.depth.value);\n\t        this.lfoR.phase = Math.PI / 2;\n\t        this.attenuator.gain.value = 0.6934; // 1 / (10 ^ (((20 * log10(3)) / 3) / 20))\n\t        this.lfoL.activate(true);\n\t        this.lfoR.activate(true);\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.Chorus.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"Chorus\"\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                feedback: {\n\t                    value: 0.4,\n\t                    min: 0,\n\t                    max: 0.95,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                delay: {\n\t                    value: 0.0045,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                depth: {\n\t                    value: 0.7,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                rate: {\n\t                    value: 1.5,\n\t                    min: 0,\n\t                    max: 8,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                bypass: {\n\t                    value: true,\n\t                    automatable: false,\n\t                    type: BOOLEAN\n\t                }\n\t            }\n\t        },\n\t        delay: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._delay;\n\t            },\n\t            set: function(value) {\n\t                this._delay = 0.0002 * (Math.pow(10, value) * 2);\n\t                this.lfoL.offset = this._delay;\n\t                this.lfoR.offset = this._delay;\n\t                this._depth = this._depth;\n\t            }\n\t        },\n\t        depth: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._depth;\n\t            },\n\t            set: function(value) {\n\t                this._depth = value;\n\t                this.lfoL.oscillation = this._depth * this._delay;\n\t                this.lfoR.oscillation = this._depth * this._delay;\n\t            }\n\t        },\n\t        feedback: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._feedback;\n\t            },\n\t            set: function(value) {\n\t                this._feedback = value;\n\t                this.feedbackGainNodeLR.gain.value = this._feedback;\n\t                this.feedbackGainNodeRL.gain.value = this._feedback;\n\t            }\n\t        },\n\t        rate: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._rate;\n\t            },\n\t            set: function(value) {\n\t                this._rate = value;\n\t                this.lfoL.frequency = this._rate;\n\t                this.lfoR.frequency = this._rate;\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.Compressor = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.compNode = this.activateNode = userContext.createDynamicsCompressor();\n\t        this.makeupNode = userContext.createGain();\n\t        this.output = userContext.createGain();\n\t\n\t        this.compNode.connect(this.makeupNode);\n\t        this.makeupNode.connect(this.output);\n\t\n\t        this.automakeup = initValue(properties.automakeup, this.defaults\n\t            .automakeup\n\t            .value);\n\t        this.makeupGain = properties.makeupGain || this.defaults.makeupGain\n\t            .value;\n\t        this.threshold = initValue(properties.threshold, this.defaults.threshold\n\t            .value);\n\t        this.release = properties.release || this.defaults.release.value;\n\t        this.attack = initValue(properties.attack, this.defaults.attack\n\t            .value);\n\t        this.ratio = properties.ratio || this.defaults.ratio.value;\n\t        this.knee = initValue(properties.knee, this.defaults.knee.value);\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.Compressor.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"Compressor\"\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                threshold: {\n\t                    value: -20,\n\t                    min: -60,\n\t                    max: 0,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                release: {\n\t                    value: 250,\n\t                    min: 10,\n\t                    max: 2000,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                makeupGain: {\n\t                    value: 1,\n\t                    min: 1,\n\t                    max: 100,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                attack: {\n\t                    value: 1,\n\t                    min: 0,\n\t                    max: 1000,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                ratio: {\n\t                    value: 4,\n\t                    min: 1,\n\t                    max: 50,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                knee: {\n\t                    value: 5,\n\t                    min: 0,\n\t                    max: 40,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                automakeup: {\n\t                    value: false,\n\t                    automatable: false,\n\t                    type: BOOLEAN\n\t                },\n\t                bypass: {\n\t                    value: true,\n\t                    automatable: false,\n\t                    type: BOOLEAN\n\t                }\n\t            }\n\t        },\n\t        computeMakeup: {\n\t            value: function() {\n\t                var magicCoefficient = 4,\n\t                    // raise me if the output is too hot\n\t                    c = this.compNode;\n\t                return -(c.threshold.value - c.threshold.value /\n\t                        c.ratio.value) /\n\t                    magicCoefficient;\n\t            }\n\t        },\n\t        automakeup: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._automakeup;\n\t            },\n\t            set: function(value) {\n\t                this._automakeup = value;\n\t                if (this._automakeup) this.makeupGain = this.computeMakeup();\n\t            }\n\t        },\n\t        threshold: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.compNode.threshold;\n\t            },\n\t            set: function(value) {\n\t                this.compNode.threshold.value = value;\n\t                if (this._automakeup) this.makeupGain = this.computeMakeup();\n\t            }\n\t        },\n\t        ratio: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.compNode.ratio;\n\t            },\n\t            set: function(value) {\n\t                this.compNode.ratio.value = value;\n\t                if (this._automakeup) this.makeupGain = this.computeMakeup();\n\t            }\n\t        },\n\t        knee: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.compNode.knee;\n\t            },\n\t            set: function(value) {\n\t                this.compNode.knee.value = value;\n\t                if (this._automakeup) this.makeupGain = this.computeMakeup();\n\t            }\n\t        },\n\t        attack: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.compNode.attack;\n\t            },\n\t            set: function(value) {\n\t                this.compNode.attack.value = value / 1000;\n\t            }\n\t        },\n\t        release: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.compNode.release;\n\t            },\n\t            set: function(value) {\n\t                this.compNode.release = value / 1000;\n\t            }\n\t        },\n\t        makeupGain: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.makeupNode.gain;\n\t            },\n\t            set: function(value) {\n\t                this.makeupNode.gain.value = dbToWAVolume(value);\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.Convolver = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.activateNode = userContext.createGain();\n\t        this.convolver = userContext.createConvolver();\n\t        this.dry = userContext.createGain();\n\t        this.filterLow = userContext.createBiquadFilter();\n\t        this.filterHigh = userContext.createBiquadFilter();\n\t        this.wet = userContext.createGain();\n\t        this.output = userContext.createGain();\n\t\n\t        this.activateNode.connect(this.filterLow);\n\t        this.activateNode.connect(this.dry);\n\t        this.filterLow.connect(this.filterHigh);\n\t        this.filterHigh.connect(this.convolver);\n\t        this.convolver.connect(this.wet);\n\t        this.wet.connect(this.output);\n\t        this.dry.connect(this.output);\n\t\n\t        this.dryLevel = initValue(properties.dryLevel, this.defaults.dryLevel\n\t            .value);\n\t        this.wetLevel = initValue(properties.wetLevel, this.defaults.wetLevel\n\t            .value);\n\t        this.highCut = properties.highCut || this.defaults.highCut.value;\n\t        this.buffer = properties.impulse ||\n\t            \"../impulses/ir_rev_short.wav\";\n\t        this.lowCut = properties.lowCut || this.defaults.lowCut.value;\n\t        this.level = initValue(properties.level, this.defaults.level.value);\n\t        this.filterHigh.type = \"lowpass\";\n\t        this.filterLow.type = \"highpass\";\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.Convolver.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"Convolver\"\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                highCut: {\n\t                    value: 22050,\n\t                    min: 20,\n\t                    max: 22050,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                lowCut: {\n\t                    value: 20,\n\t                    min: 20,\n\t                    max: 22050,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                dryLevel: {\n\t                    value: 1,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                wetLevel: {\n\t                    value: 1,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                level: {\n\t                    value: 1,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                }\n\t            }\n\t        },\n\t        lowCut: {\n\t            get: function() {\n\t                return this.filterLow.frequency;\n\t            },\n\t            set: function(value) {\n\t                this.filterLow.frequency.value = value;\n\t            }\n\t        },\n\t        highCut: {\n\t            get: function() {\n\t                return this.filterHigh.frequency;\n\t            },\n\t            set: function(value) {\n\t                this.filterHigh.frequency.value = value;\n\t            }\n\t        },\n\t        level: {\n\t            get: function() {\n\t                return this.output.gain;\n\t            },\n\t            set: function(value) {\n\t                this.output.gain.value = value;\n\t            }\n\t        },\n\t        dryLevel: {\n\t            get: function() {\n\t                return this.dry.gain\n\t            },\n\t            set: function(value) {\n\t                this.dry.gain.value = value;\n\t            }\n\t        },\n\t        wetLevel: {\n\t            get: function() {\n\t                return this.wet.gain;\n\t            },\n\t            set: function(value) {\n\t                this.wet.gain.value = value;\n\t            }\n\t        },\n\t        buffer: {\n\t            enumerable: false,\n\t            get: function() {\n\t                return this.convolver.buffer;\n\t            },\n\t            set: function(impulse) {\n\t                var convolver = this.convolver,\n\t                    xhr = new XMLHttpRequest();\n\t                if (!impulse) {\n\t                    console.log(\"Tuna.Convolver.setBuffer: Missing impulse path!\");\n\t                    return;\n\t                }\n\t                xhr.open(\"GET\", impulse, true);\n\t                xhr.responseType = \"arraybuffer\";\n\t                xhr.onreadystatechange = function() {\n\t                    if (xhr.readyState === 4) {\n\t                        if (xhr.status < 300 && xhr.status > 199 || xhr.status === 302) {\n\t                            userContext.decodeAudioData(xhr.response, function(buffer) {\n\t                                convolver.buffer = buffer;\n\t                            }, function(e) {\n\t                                if (e) console.log(\"Tuna.Convolver.setBuffer: Error decoding data\" + e);\n\t                            });\n\t                        }\n\t                    }\n\t                };\n\t                xhr.send(null);\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.Delay = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.activateNode = userContext.createGain();\n\t        this.dry = userContext.createGain();\n\t        this.wet = userContext.createGain();\n\t        this.filter = userContext.createBiquadFilter();\n\t        this.delay = userContext.createDelay();\n\t        this.feedbackNode = userContext.createGain();\n\t        this.output = userContext.createGain();\n\t\n\t        this.activateNode.connect(this.delay);\n\t        this.activateNode.connect(this.dry);\n\t        this.delay.connect(this.filter);\n\t        this.filter.connect(this.feedbackNode);\n\t        this.feedbackNode.connect(this.delay);\n\t        this.feedbackNode.connect(this.wet);\n\t        this.wet.connect(this.output);\n\t        this.dry.connect(this.output);\n\t\n\t        this.delayTime = properties.delayTime || this.defaults.delayTime.value;\n\t        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\n\t        this.wetLevel = initValue(properties.wetLevel, this.defaults.wetLevel.value);\n\t        this.dryLevel = initValue(properties.dryLevel, this.defaults.dryLevel.value);\n\t        this.cutoff = properties.cutoff || this.defaults.cutoff.value;\n\t        this.filter.type = \"lowpass\";\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.Delay.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"Delay\"\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                delayTime: {\n\t                    value: 100,\n\t                    min: 20,\n\t                    max: 1000,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                feedback: {\n\t                    value: 0.45,\n\t                    min: 0,\n\t                    max: 0.9,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                cutoff: {\n\t                    value: 20000,\n\t                    min: 20,\n\t                    max: 20000,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                wetLevel: {\n\t                    value: 0.5,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                dryLevel: {\n\t                    value: 1,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                }\n\t            }\n\t        },\n\t        delayTime: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.delay.delayTime;\n\t            },\n\t            set: function(value) {\n\t                this.delay.delayTime.value = value / 1000;\n\t            }\n\t        },\n\t        wetLevel: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.wet.gain;\n\t            },\n\t            set: function(value) {\n\t                this.wet.gain.value = value;\n\t            }\n\t        },\n\t        dryLevel: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.dry.gain;\n\t            },\n\t            set: function(value) {\n\t                this.dry.gain.value = value;\n\t            }\n\t        },\n\t        feedback: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.feedbackNode.gain;\n\t            },\n\t            set: function(value) {\n\t                this.feedbackNode.gain.value = value;\n\t            }\n\t        },\n\t        cutoff: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.filter.frequency;\n\t            },\n\t            set: function(value) {\n\t                this.filter.frequency.value = value;\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.Filter = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.activateNode = userContext.createGain();\n\t        this.filter = userContext.createBiquadFilter();\n\t        this.output = userContext.createGain();\n\t\n\t        this.activateNode.connect(this.filter);\n\t        this.filter.connect(this.output);\n\t\n\t        this.frequency = properties.frequency || this.defaults.frequency\n\t            .value;\n\t        this.Q = properties.resonance || this.defaults.Q.value;\n\t        this.filterType = initValue(properties.filterType, this.defaults\n\t            .filterType\n\t            .value);\n\t        this.gain = initValue(properties.gain, this.defaults.gain.value);\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.Filter.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"Filter\"\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                frequency: {\n\t                    value: 800,\n\t                    min: 20,\n\t                    max: 22050,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                Q: {\n\t                    value: 1,\n\t                    min: 0.001,\n\t                    max: 100,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                gain: {\n\t                    value: 0,\n\t                    min: -40,\n\t                    max: 40,\n\t                    automatable: true,\n\t                    type: FLOAT\n\t                },\n\t                bypass: {\n\t                    value: true,\n\t                    automatable: false,\n\t                    type: BOOLEAN\n\t                },\n\t                filterType: {\n\t                    value: \"lowpass\",\n\t                    automatable: false,\n\t                    type: STRING\n\t                }\n\t            }\n\t        },\n\t        filterType: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.filter.type;\n\t            },\n\t            set: function(value) {\n\t                this.filter.type = value;\n\t            }\n\t        },\n\t        Q: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.filter.Q;\n\t            },\n\t            set: function(value) {\n\t                this.filter.Q.value = value;\n\t            }\n\t        },\n\t        gain: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.filter.gain;\n\t            },\n\t            set: function(value) {\n\t                this.filter.gain.value = value;\n\t            }\n\t        },\n\t        frequency: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.filter.frequency;\n\t            },\n\t            set: function(value) {\n\t                this.filter.frequency.value = value;\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.MoogFilter = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.bufferSize = properties.bufferSize || this.defaults.bufferSize\n\t            .value;\n\t\n\t        this.input = userContext.createGain();\n\t        this.activateNode = userContext.createGain();\n\t        this.processor = userContext.createScriptProcessor(this.bufferSize,\n\t            1,\n\t            1);\n\t        this.output = userContext.createGain();\n\t\n\t        this.activateNode.connect(this.processor);\n\t        this.processor.connect(this.output);\n\t\n\t        var in1, in2, in3, in4, out1, out2, out3, out4;\n\t        in1 = in2 = in3 = in4 = out1 = out2 = out3 = out4 = 0.0;\n\t        var input, output, f, fb, i, length;\n\t        this.processor.onaudioprocess = function(e) {\n\t            input = e.inputBuffer.getChannelData(0),\n\t                output = e.outputBuffer.getChannelData(0),\n\t                f = this.cutoff * 1.16,\n\t                inputFactor = 0.35013 * (f * f) * (f * f);\n\t            fb = this.resonance * (1.0 - 0.15 * f * f);\n\t            length = input.length;\n\t            for (i = 0; i < length; i++) {\n\t                input[i] -= out4 * fb;\n\t                input[i] *= inputFactor;\n\t                out1 = input[i] + 0.3 * in1 + (1 - f) * out1; // Pole 1\n\t                in1 = input[i];\n\t                out2 = out1 + 0.3 * in2 + (1 - f) * out2; // Pole 2\n\t                in2 = out1;\n\t                out3 = out2 + 0.3 * in3 + (1 - f) * out3; // Pole 3\n\t                in3 = out2;\n\t                out4 = out3 + 0.3 * in4 + (1 - f) * out4; // Pole 4\n\t                in4 = out3;\n\t                output[i] = out4;\n\t            }\n\t        };\n\t\n\t        this.cutoff = initValue(properties.cutoff, this.defaults.cutoff\n\t            .value);\n\t        this.resonance = initValue(properties.resonance, this.defaults.resonance\n\t            .value);\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.MoogFilter.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"MoogFilter\"\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                bufferSize: {\n\t                    value: 4096,\n\t                    min: 256,\n\t                    max: 16384,\n\t                    automatable: false,\n\t                    type: INT\n\t                },\n\t                bypass: {\n\t                    value: false,\n\t                    automatable: false,\n\t                    type: BOOLEAN\n\t                },\n\t                cutoff: {\n\t                    value: 0.065,\n\t                    min: 0.0001,\n\t                    max: 1.0,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                resonance: {\n\t                    value: 3.5,\n\t                    min: 0.0,\n\t                    max: 4.0,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                }\n\t            }\n\t        },\n\t        cutoff: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.processor.cutoff;\n\t            },\n\t            set: function(value) {\n\t                this.processor.cutoff = value;\n\t            }\n\t        },\n\t        resonance: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this.processor.resonance;\n\t            },\n\t            set: function(value) {\n\t                this.processor.resonance = value;\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.Overdrive = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.activateNode = userContext.createGain();\n\t        this.inputDrive = userContext.createGain();\n\t        this.waveshaper = userContext.createWaveShaper();\n\t        this.outputDrive = userContext.createGain();\n\t        this.output = userContext.createGain();\n\t\n\t        this.activateNode.connect(this.inputDrive);\n\t        this.inputDrive.connect(this.waveshaper);\n\t        this.waveshaper.connect(this.outputDrive);\n\t        this.outputDrive.connect(this.output);\n\t\n\t        this.ws_table = new Float32Array(this.k_nSamples);\n\t        this.drive = initValue(properties.drive, this.defaults.drive.value);\n\t        this.outputGain = initValue(properties.outputGain, this.defaults\n\t            .outputGain\n\t            .value);\n\t        this.curveAmount = initValue(properties.curveAmount, this.defaults\n\t            .curveAmount\n\t            .value);\n\t        this.algorithmIndex = initValue(properties.algorithmIndex, this\n\t            .defaults\n\t            .algorithmIndex.value);\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.Overdrive.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"Overdrive\"\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                drive: {\n\t                    value: 1,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: true,\n\t                    type: FLOAT,\n\t                    scaled: true\n\t                },\n\t                outputGain: {\n\t                    value: 1,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: true,\n\t                    type: FLOAT,\n\t                    scaled: true\n\t                },\n\t                curveAmount: {\n\t                    value: 0.725,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                algorithmIndex: {\n\t                    value: 0,\n\t                    min: 0,\n\t                    max: 5,\n\t                    automatable: false,\n\t                    type: INT\n\t                }\n\t            }\n\t        },\n\t        k_nSamples: {\n\t            value: 8192\n\t        },\n\t        drive: {\n\t            get: function() {\n\t                return this.inputDrive.gain;\n\t            },\n\t            set: function(value) {\n\t                this._drive = value;\n\t            }\n\t        },\n\t        curveAmount: {\n\t            get: function() {\n\t                return this._curveAmount;\n\t            },\n\t            set: function(value) {\n\t                this._curveAmount = value;\n\t                if (this._algorithmIndex === undefined) {\n\t                    this._algorithmIndex = 0;\n\t                }\n\t                this.waveshaperAlgorithms[this._algorithmIndex]\n\t                    (this._curveAmount,\n\t                        this.k_nSamples, this.ws_table);\n\t                this.waveshaper.curve = this.ws_table;\n\t            }\n\t        },\n\t        outputGain: {\n\t            get: function() {\n\t                return this.outputDrive.gain;\n\t            },\n\t            set: function(value) {\n\t                this._outputGain = dbToWAVolume(value);\n\t            }\n\t        },\n\t        algorithmIndex: {\n\t            get: function() {\n\t                return this._algorithmIndex;\n\t            },\n\t            set: function(value) {\n\t                this._algorithmIndex = value;\n\t                this.curveAmount = this._curveAmount;\n\t            }\n\t        },\n\t        waveshaperAlgorithms: {\n\t            value: [\n\t                function(amount, n_samples, ws_table) {\n\t                    amount = Math.min(amount, 0.9999);\n\t                    var k = 2 * amount / (1 - amount),\n\t                        i, x;\n\t                    for (i = 0; i < n_samples; i++) {\n\t                        x = i * 2 / n_samples - 1;\n\t                        ws_table[i] = (1 + k) * x / (1 + k * Math.abs(x));\n\t                    }\n\t                },\n\t                function(amount, n_samples, ws_table) {\n\t                    var i, x, y;\n\t                    for (i = 0; i < n_samples; i++) {\n\t                        x = i * 2 / n_samples - 1;\n\t                        y = ((0.5 * Math.pow((x + 1.4), 2)) - 1) * y >= 0 ? 5.8 : 1.2;\n\t                        ws_table[i] = tanh(y);\n\t                    }\n\t                },\n\t                function(amount, n_samples, ws_table) {\n\t                    var i, x, y, a = 1 - amount;\n\t                    for (i = 0; i < n_samples; i++) {\n\t                        x = i * 2 / n_samples - 1;\n\t                        y = x < 0 ? -Math.pow(Math.abs(x), a + 0.04) : Math.pow(x, a);\n\t                        ws_table[i] = tanh(y * 2);\n\t                    }\n\t                },\n\t                function(amount, n_samples, ws_table) {\n\t                    var i, x, y, abx, a = 1 - amount > 0.99 ? 0.99 : 1 - amount;\n\t                    for (i = 0; i < n_samples; i++) {\n\t                        x = i * 2 / n_samples - 1;\n\t                        abx = Math.abs(x);\n\t                        if (abx < a) y = abx;\n\t                        else if (abx > a) y = a + (abx - a) / (1 + Math.pow((abx - a) / (1 - a), 2));\n\t                        else if (abx > 1) y = abx;\n\t                        ws_table[i] = sign(x) * y * (1 / ((a + 1) / 2));\n\t                    }\n\t                },\n\t                function(amount, n_samples, ws_table) { // fixed curve, amount doesn't do anything, the distortion is just from the drive\n\t                    var i, x;\n\t                    for (i = 0; i < n_samples; i++) {\n\t                        x = i * 2 / n_samples - 1;\n\t                        if (x < -0.08905) {\n\t                            ws_table[i] = (-3 / 4) * (1 - (Math.pow((1 - (Math.abs(x) - 0.032857)), 12)) + (1 / 3) * (Math.abs(x) -\n\t                                0.032847)) + 0.01;\n\t                        } else if (x >= -0.08905 && x < 0.320018) {\n\t                            ws_table[i] = (-6.153 * (x * x)) + 3.9375 * x;\n\t                        } else {\n\t                            ws_table[i] = 0.630035;\n\t                        }\n\t                    }\n\t                },\n\t                function(amount, n_samples, ws_table) {\n\t                    var a = 2 + Math.round(amount * 14),\n\t                        // we go from 2 to 16 bits, keep in mind for the UI\n\t                        bits = Math.round(Math.pow(2, a - 1)),\n\t                        // real number of quantization steps divided by 2\n\t                        i, x;\n\t                    for (i = 0; i < n_samples; i++) {\n\t                        x = i * 2 / n_samples - 1;\n\t                        ws_table[i] = Math.round(x * bits) / bits;\n\t                    }\n\t                }\n\t            ]\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.Phaser = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.splitter = this.activateNode = userContext.createChannelSplitter(2);\n\t        this.filtersL = [];\n\t        this.filtersR = [];\n\t        this.feedbackGainNodeL = userContext.createGain();\n\t        this.feedbackGainNodeR = userContext.createGain();\n\t        this.merger = userContext.createChannelMerger(2);\n\t        this.filteredSignal = userContext.createGain();\n\t        this.output = userContext.createGain();\n\t        this.lfoL = new userInstance.LFO({\n\t            target: this.filtersL,\n\t            callback: this.callback\n\t        });\n\t        this.lfoR = new userInstance.LFO({\n\t            target: this.filtersR,\n\t            callback: this.callback\n\t        });\n\t\n\t        var i = this.stage;\n\t        while (i--) {\n\t            this.filtersL[i] = userContext.createBiquadFilter();\n\t            this.filtersR[i] = userContext.createBiquadFilter();\n\t            this.filtersL[i].type = \"allpass\";\n\t            this.filtersR[i].type = \"allpass\";\n\t        }\n\t        this.input.connect(this.splitter);\n\t        this.input.connect(this.output);\n\t        this.splitter.connect(this.filtersL[0], 0, 0);\n\t        this.splitter.connect(this.filtersR[0], 1, 0);\n\t        this.connectInOrder(this.filtersL);\n\t        this.connectInOrder(this.filtersR);\n\t        this.filtersL[this.stage - 1].connect(this.feedbackGainNodeL);\n\t        this.filtersL[this.stage - 1].connect(this.merger, 0, 0);\n\t        this.filtersR[this.stage - 1].connect(this.feedbackGainNodeR);\n\t        this.filtersR[this.stage - 1].connect(this.merger, 0, 1);\n\t        this.feedbackGainNodeL.connect(this.filtersL[0]);\n\t        this.feedbackGainNodeR.connect(this.filtersR[0]);\n\t        this.merger.connect(this.output);\n\t\n\t        this.rate = initValue(properties.rate, this.defaults.rate.value);\n\t        this.baseModulationFrequency = properties.baseModulationFrequency || this.defaults.baseModulationFrequency.value;\n\t        this.depth = initValue(properties.depth, this.defaults.depth.value);\n\t        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\n\t        this.stereoPhase = initValue(properties.stereoPhase, this.defaults.stereoPhase.value);\n\t\n\t        this.lfoL.activate(true);\n\t        this.lfoR.activate(true);\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.Phaser.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"Phaser\"\n\t        },\n\t        stage: {\n\t            value: 4\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                rate: {\n\t                    value: 0.1,\n\t                    min: 0,\n\t                    max: 8,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                depth: {\n\t                    value: 0.6,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                feedback: {\n\t                    value: 0.7,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                stereoPhase: {\n\t                    value: 40,\n\t                    min: 0,\n\t                    max: 180,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                baseModulationFrequency: {\n\t                    value: 700,\n\t                    min: 500,\n\t                    max: 1500,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                }\n\t            }\n\t        },\n\t        callback: {\n\t            value: function(filters, value) {\n\t                for (var stage = 0; stage < 4; stage++) {\n\t                    filters[stage].frequency.value = value;\n\t                }\n\t            }\n\t        },\n\t        depth: {\n\t            get: function() {\n\t                return this._depth;\n\t            },\n\t            set: function(value) {\n\t                this._depth = value;\n\t                this.lfoL.oscillation = this._baseModulationFrequency * this._depth;\n\t                this.lfoR.oscillation = this._baseModulationFrequency * this._depth;\n\t            }\n\t        },\n\t        rate: {\n\t            get: function() {\n\t                return this._rate;\n\t            },\n\t            set: function(value) {\n\t                this._rate = value;\n\t                this.lfoL.frequency = this._rate;\n\t                this.lfoR.frequency = this._rate;\n\t            }\n\t        },\n\t        baseModulationFrequency: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._baseModulationFrequency;\n\t            },\n\t            set: function(value) {\n\t                this._baseModulationFrequency = value;\n\t                this.lfoL.offset = this._baseModulationFrequency;\n\t                this.lfoR.offset = this._baseModulationFrequency;\n\t                this._depth = this._depth;\n\t            }\n\t        },\n\t        feedback: {\n\t            get: function() {\n\t                return this._feedback;\n\t            },\n\t            set: function(value) {\n\t                this._feedback = value;\n\t                this.feedbackGainNodeL.gain.value = this._feedback;\n\t                this.feedbackGainNodeR.gain.value = this._feedback;\n\t            }\n\t        },\n\t        stereoPhase: {\n\t            get: function() {\n\t                return this._stereoPhase;\n\t            },\n\t            set: function(value) {\n\t                this._stereoPhase = value;\n\t                var newPhase = this.lfoL._phase + this._stereoPhase *\n\t                    Math.PI /\n\t                    180;\n\t                newPhase = fmod(newPhase, 2 * Math.PI);\n\t                this.lfoR._phase = newPhase;\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.PingPongDelay = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.wetLevel = userContext.createGain();\n\t        this.stereoToMonoMix = userContext.createGain();\n\t        this.feedbackLevel = userContext.createGain();\n\t        this.output = userContext.createGain();\n\t        this.delayLeft = userContext.createDelay();\n\t        this.delayRight = userContext.createDelay();\n\t\n\t        this.activateNode = userContext.createGain();\n\t        this.splitter = userContext.createChannelSplitter(2);\n\t        this.merger = userContext.createChannelMerger(2);\n\t\n\t        this.activateNode.connect(this.splitter);\n\t        this.splitter.connect(this.stereoToMonoMix, 0, 0);\n\t        this.splitter.connect(this.stereoToMonoMix, 1, 0);\n\t        this.stereoToMonoMix.gain.value = .5;\n\t        this.stereoToMonoMix.connect(this.wetLevel);\n\t        this.wetLevel.connect(this.delayLeft);\n\t        this.feedbackLevel.connect(this.delayLeft);\n\t        this.delayLeft.connect(this.delayRight);\n\t        this.delayRight.connect(this.feedbackLevel);\n\t        this.delayLeft.connect(this.merger, 0, 0);\n\t        this.delayRight.connect(this.merger, 0, 1);\n\t        this.merger.connect(this.output);\n\t        this.activateNode.connect(this.output);\n\t\n\t        this.delayTimeLeft = properties.delayTimeLeft !== undefined ? properties.delayTimeLeft : this.defaults.delayTimeLeft.value;\n\t        this.delayTimeRight = properties.delayTimeRight !== undefined ? properties.delayTimeRight : this.defaults.delayTimeRight.value;\n\t        this.feedbackLevel.gain.value = properties.feedback !== undefined ? properties.feedback : this.defaults.feedback.value;\n\t        this.wetLevel.gain.value = properties.wetLevel !== undefined ? properties.wetLevel : this.defaults.wetLevel.value;\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.PingPongDelay.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"PingPongDelay\"\n\t        },\n\t        delayTimeLeft: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._delayTimeLeft;\n\t            },\n\t            set: function(value) {\n\t                this._delayTimeLeft = value;\n\t                this.delayLeft.delayTime.value = value / 1000;\n\t            }\n\t        },\n\t        delayTimeRight: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._delayTimeRight;\n\t            },\n\t            set: function(value) {\n\t                this._delayTimeRight = value;\n\t                this.delayRight.delayTime.value = value / 1000;\n\t            }\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                delayTimeLeft: {\n\t                    value: 200,\n\t                    min: 1,\n\t                    max: 10000,\n\t                    automatable: false,\n\t                    type: INT\n\t                },\n\t                delayTimeRight: {\n\t                    value: 400,\n\t                    min: 1,\n\t                    max: 10000,\n\t                    automatable: false,\n\t                    type: INT\n\t                },\n\t                feedback: {\n\t                    value: 0.3,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                wetLevel: {\n\t                    value: 0.5,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                }\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.Tremolo = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.splitter = this.activateNode = userContext.createChannelSplitter(\n\t                2),\n\t            this.amplitudeL = userContext.createGain(), this.amplitudeR =\n\t            userContext.createGain(), this.merger = userContext.createChannelMerger(\n\t                2), this.output = userContext.createGain();\n\t        this.lfoL = new userInstance.LFO({\n\t            target: this.amplitudeL.gain,\n\t            callback: pipe\n\t        });\n\t        this.lfoR = new userInstance.LFO({\n\t            target: this.amplitudeR.gain,\n\t            callback: pipe\n\t        });\n\t\n\t        this.input.connect(this.splitter);\n\t        this.splitter.connect(this.amplitudeL, 0);\n\t        this.splitter.connect(this.amplitudeR, 1);\n\t        this.amplitudeL.connect(this.merger, 0, 0);\n\t        this.amplitudeR.connect(this.merger, 0, 1);\n\t        this.merger.connect(this.output);\n\t\n\t        this.rate = properties.rate || this.defaults.rate.value;\n\t        this.intensity = initValue(properties.intensity, this.defaults.intensity\n\t            .value);\n\t        this.stereoPhase = initValue(properties.stereoPhase, this.defaults\n\t            .stereoPhase\n\t            .value);\n\t\n\t        this.lfoL.offset = 1 - (this.intensity / 2);\n\t        this.lfoR.offset = 1 - (this.intensity / 2);\n\t        this.lfoL.phase = this.stereoPhase * Math.PI / 180;\n\t\n\t        this.lfoL.activate(true);\n\t        this.lfoR.activate(true);\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.Tremolo.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"Tremolo\"\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                intensity: {\n\t                    value: 0.3,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                stereoPhase: {\n\t                    value: 0,\n\t                    min: 0,\n\t                    max: 180,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                rate: {\n\t                    value: 5,\n\t                    min: 0.1,\n\t                    max: 11,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                }\n\t            }\n\t        },\n\t        intensity: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._intensity;\n\t            },\n\t            set: function(value) {\n\t                this._intensity = value;\n\t                this.lfoL.offset = 1 - this._intensity / 2;\n\t                this.lfoR.offset = 1 - this._intensity / 2;\n\t                this.lfoL.oscillation = this._intensity;\n\t                this.lfoR.oscillation = this._intensity;\n\t            }\n\t        },\n\t        rate: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._rate;\n\t            },\n\t            set: function(value) {\n\t                this._rate = value;\n\t                this.lfoL.frequency = this._rate;\n\t                this.lfoR.frequency = this._rate;\n\t            }\n\t        },\n\t        stereoPhase: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._rate;\n\t            },\n\t            set: function(value) {\n\t                this._stereoPhase = value;\n\t                var newPhase = this.lfoL._phase + this._stereoPhase *\n\t                    Math.PI /\n\t                    180;\n\t                newPhase = fmod(newPhase, 2 * Math.PI);\n\t                this.lfoR.phase = newPhase;\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.WahWah = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.activateNode = userContext.createGain();\n\t        this.envelopeFollower = new userInstance.EnvelopeFollower({\n\t            target: this,\n\t            callback: function(context, value) {\n\t                context.sweep = value;\n\t            }\n\t        });\n\t        this.filterBp = userContext.createBiquadFilter();\n\t        this.filterPeaking = userContext.createBiquadFilter();\n\t        this.output = userContext.createGain();\n\t\n\t        //Connect AudioNodes\n\t        this.activateNode.connect(this.filterBp);\n\t        this.filterBp.connect(this.filterPeaking);\n\t        this.filterPeaking.connect(this.output);\n\t\n\t        //Set Properties\n\t        this.init();\n\t        this.automode = initValue(properties.enableAutoMode, this.defaults\n\t            .automode\n\t            .value);\n\t        this.resonance = properties.resonance || this.defaults.resonance\n\t            .value;\n\t        this.sensitivity = initValue(properties.sensitivity, this.defaults\n\t            .sensitivity\n\t            .value);\n\t        this.baseFrequency = initValue(properties.baseFrequency, this.defaults\n\t            .baseFrequency\n\t            .value);\n\t        this.excursionOctaves = properties.excursionOctaves || this.defaults\n\t            .excursionOctaves\n\t            .value;\n\t        this.sweep = initValue(properties.sweep, this.defaults.sweep.value);\n\t\n\t        this.activateNode.gain.value = 2;\n\t        this.envelopeFollower.activate(true);\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.WahWah.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"WahWah\"\n\t        },\n\t        defaults: {\n\t            writable: true,\n\t            value: {\n\t                automode: {\n\t                    value: true,\n\t                    automatable: false,\n\t                    type: BOOLEAN\n\t                },\n\t                baseFrequency: {\n\t                    value: 0.5,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                excursionOctaves: {\n\t                    value: 2,\n\t                    min: 1,\n\t                    max: 6,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                sweep: {\n\t                    value: 0.2,\n\t                    min: 0,\n\t                    max: 1,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                resonance: {\n\t                    value: 10,\n\t                    min: 1,\n\t                    max: 100,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                sensitivity: {\n\t                    value: 0.5,\n\t                    min: -1,\n\t                    max: 1,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                }\n\t            }\n\t        },\n\t        activateCallback: {\n\t            value: function(value) {\n\t                this.automode = value;\n\t            }\n\t        },\n\t        automode: {\n\t            get: function() {\n\t                return this._automode;\n\t            },\n\t            set: function(value) {\n\t                this._automode = value;\n\t                if (value) {\n\t                    this.activateNode.connect(this.envelopeFollower.input);\n\t                    this.envelopeFollower.activate(true);\n\t                } else {\n\t                    this.envelopeFollower.activate(false);\n\t                    this.activateNode.disconnect();\n\t                    this.activateNode.connect(this.filterBp);\n\t                }\n\t            }\n\t        },\n\t        filterFreqTimeout: {\n\t            value: 0\n\t        },\n\t        setFilterFreq: {\n\t            value: function() {\n\t                try {\n\t                    this.filterBp.frequency.value = this._baseFrequency + this._excursionFrequency * this._sweep;\n\t                    this.filterPeaking.frequency.value = this._baseFrequency + this._excursionFrequency * this._sweep;\n\t                } catch (e) {\n\t                    clearTimeout(this.filterFreqTimeout);\n\t                    //put on the next cycle to let all init properties be set\n\t                    this.filterFreqTimeout = setTimeout(function() {\n\t                        this.setFilterFreq();\n\t                    }.bind(this), 0);\n\t                }\n\t            }\n\t        },\n\t        sweep: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._sweep.value;\n\t            },\n\t            set: function(value) {\n\t                this._sweep = Math.pow(value > 1 ? 1 : value <\n\t                    0 ? 0 :\n\t                    value,\n\t                    this._sensitivity);\n\t                this.setFilterFreq();\n\t            }\n\t        },\n\t        baseFrequency: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._baseFrequency;\n\t            },\n\t            set: function(value) {\n\t                this._baseFrequency = 50 * Math.pow(10, value *\n\t                    2);\n\t                this._excursionFrequency = Math.min(userContext\n\t                    .sampleRate /\n\t                    2,\n\t                    this.baseFrequency * Math.pow(2, this._excursionOctaves)\n\t                );\n\t                this.setFilterFreq();\n\t            }\n\t        },\n\t        excursionOctaves: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._excursionOctaves;\n\t            },\n\t            set: function(value) {\n\t                this._excursionOctaves = value;\n\t                this._excursionFrequency = Math.min(userContext\n\t                    .sampleRate /\n\t                    2,\n\t                    this.baseFrequency * Math.pow(2, this._excursionOctaves)\n\t                );\n\t                this.setFilterFreq();\n\t            }\n\t        },\n\t        sensitivity: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._sensitivity;\n\t            },\n\t            set: function(value) {\n\t                this._sensitivity = Math.pow(10, value);\n\t            }\n\t        },\n\t        resonance: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._resonance;\n\t            },\n\t            set: function(value) {\n\t                this._resonance = value;\n\t                this.filterPeaking.Q = this._resonance;\n\t            }\n\t        },\n\t        init: {\n\t            value: function() {\n\t                this.output.gain.value = 1;\n\t                this.filterPeaking.type = \"peaking\";\n\t                this.filterBp.type = \"bandpass\";\n\t                this.filterPeaking.frequency.value = 100;\n\t                this.filterPeaking.gain.value = 20;\n\t                this.filterPeaking.Q.value = 5;\n\t                this.filterBp.frequency.value = 100;\n\t                this.filterBp.Q.value = 1;\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.EnvelopeFollower = function(properties) {\n\t        if (!properties) {\n\t            properties = this.getDefaults();\n\t        }\n\t        this.input = userContext.createGain();\n\t        this.jsNode = this.output = userContext.createScriptProcessor(\n\t            this.buffersize,\n\t            1, 1);\n\t\n\t        this.input.connect(this.output);\n\t\n\t        this.attackTime = initValue(properties.attackTime, this.defaults\n\t            .attackTime\n\t            .value);\n\t        this.releaseTime = initValue(properties.releaseTime, this.defaults\n\t            .releaseTime\n\t            .value);\n\t        this._envelope = 0;\n\t        this.target = properties.target || {};\n\t        this.callback = properties.callback || function() {};\n\t    };\n\t    Tuna.prototype.EnvelopeFollower.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"EnvelopeFollower\"\n\t        },\n\t        defaults: {\n\t            value: {\n\t                attackTime: {\n\t                    value: 0.003,\n\t                    min: 0,\n\t                    max: 0.5,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                releaseTime: {\n\t                    value: 0.5,\n\t                    min: 0,\n\t                    max: 0.5,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                }\n\t            }\n\t        },\n\t        buffersize: {\n\t            value: 256\n\t        },\n\t        envelope: {\n\t            value: 0\n\t        },\n\t        sampleRate: {\n\t            value: 44100\n\t        },\n\t        attackTime: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._attackTime;\n\t            },\n\t            set: function(value) {\n\t                this._attackTime = value;\n\t                this._attackC = Math.exp(-1 / this._attackTime *\n\t                    this.sampleRate /\n\t                    this.buffersize);\n\t            }\n\t        },\n\t        releaseTime: {\n\t            enumerable: true,\n\t            get: function() {\n\t                return this._releaseTime;\n\t            },\n\t            set: function(value) {\n\t                this._releaseTime = value;\n\t                this._releaseC = Math.exp(-1 / this._releaseTime *\n\t                    this.sampleRate /\n\t                    this.buffersize);\n\t            }\n\t        },\n\t        callback: {\n\t            get: function() {\n\t                return this._callback;\n\t            },\n\t            set: function(value) {\n\t                if (typeof value === \"function\") {\n\t                    this._callback = value;\n\t                } else {\n\t                    console.error(\"tuna.js: \" + this.name +\n\t                        \": Callback must be a function!\");\n\t                }\n\t            }\n\t        },\n\t        target: {\n\t            get: function() {\n\t                return this._target;\n\t            },\n\t            set: function(value) {\n\t                this._target = value;\n\t            }\n\t        },\n\t        activate: {\n\t            value: function(doActivate) {\n\t                this.activated = doActivate;\n\t                if (doActivate) {\n\t                    this.jsNode.connect(userContext.destination);\n\t                    this.jsNode.onaudioprocess = this.returnCompute(\n\t                        this);\n\t                } else {\n\t                    this.jsNode.disconnect();\n\t                    this.jsNode.onaudioprocess = null;\n\t                }\n\t            }\n\t        },\n\t        returnCompute: {\n\t            value: function(instance) {\n\t                return function(event) {\n\t                    instance.compute(event);\n\t                };\n\t            }\n\t        },\n\t        compute: {\n\t            value: function(event) {\n\t                var count = event.inputBuffer.getChannelData(0)\n\t                    .length,\n\t                    channels = event.inputBuffer.numberOfChannels,\n\t                    current, chan, rms, i;\n\t                chan = rms = i = 0;\n\t                if (channels > 1) { //need to mixdown\n\t                    for (i = 0; i < count; ++i) {\n\t                        for (; chan < channels; ++chan) {\n\t                            current = event.inputBuffer.getChannelData(chan)[i];\n\t                            rms += (current * current) / channels;\n\t                        }\n\t                    }\n\t                } else {\n\t                    for (i = 0; i < count; ++i) {\n\t                        current = event.inputBuffer.getChannelData(0)[i];\n\t                        rms += (current * current);\n\t                    }\n\t                }\n\t                rms = Math.sqrt(rms);\n\t\n\t                if (this._envelope < rms) {\n\t                    this._envelope *= this._attackC;\n\t                    this._envelope += (1 - this._attackC) * rms;\n\t                } else {\n\t                    this._envelope *= this._releaseC;\n\t                    this._envelope += (1 - this._releaseC) *\n\t                        rms;\n\t                }\n\t                this._callback(this._target, this._envelope);\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.prototype.LFO = function(properties) {\n\t        //Instantiate AudioNode\n\t        this.output = userContext.createScriptProcessor(256, 1, 1);\n\t        this.activateNode = userContext.destination;\n\t\n\t        //Set Properties\n\t        this.frequency = initValue(properties.frequency, this.defaults.frequency\n\t            .value);\n\t        this.offset = initValue(properties.offset, this.defaults.offset.value);\n\t        this.oscillation = initValue(properties.oscillation, this.defaults\n\t            .oscillation\n\t            .value);\n\t        this.phase = initValue(properties.phase, this.defaults.phase.value);\n\t        this.target = properties.target || {};\n\t        this.output.onaudioprocess = this.callback(properties.callback ||\n\t            function() {});\n\t        this.bypass = properties.bypass || false;\n\t    };\n\t    Tuna.prototype.LFO.prototype = Object.create(Super, {\n\t        name: {\n\t            value: \"LFO\"\n\t        },\n\t        bufferSize: {\n\t            value: 256\n\t        },\n\t        sampleRate: {\n\t            value: 44100\n\t        },\n\t        defaults: {\n\t            value: {\n\t                frequency: {\n\t                    value: 1,\n\t                    min: 0,\n\t                    max: 20,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                offset: {\n\t                    value: 0.85,\n\t                    min: 0,\n\t                    max: 22049,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                oscillation: {\n\t                    value: 0.3,\n\t                    min: -22050,\n\t                    max: 22050,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                },\n\t                phase: {\n\t                    value: 0,\n\t                    min: 0,\n\t                    max: 2 * Math.PI,\n\t                    automatable: false,\n\t                    type: FLOAT\n\t                }\n\t            }\n\t        },\n\t        frequency: {\n\t            get: function() {\n\t                return this._frequency;\n\t            },\n\t            set: function(value) {\n\t                this._frequency = value;\n\t                this._phaseInc = 2 * Math.PI * this._frequency *\n\t                    this.bufferSize /\n\t                    this.sampleRate;\n\t            }\n\t        },\n\t        offset: {\n\t            get: function() {\n\t                return this._offset;\n\t            },\n\t            set: function(value) {\n\t                this._offset = value;\n\t            }\n\t        },\n\t        oscillation: {\n\t            get: function() {\n\t                return this._oscillation;\n\t            },\n\t            set: function(value) {\n\t                this._oscillation = value;\n\t            }\n\t        },\n\t        phase: {\n\t            get: function() {\n\t                return this._phase;\n\t            },\n\t            set: function(value) {\n\t                this._phase = value;\n\t            }\n\t        },\n\t        target: {\n\t            get: function() {\n\t                return this._target;\n\t            },\n\t            set: function(value) {\n\t                this._target = value;\n\t            }\n\t        },\n\t        activate: {\n\t            value: function(doActivate) {\n\t                if (!doActivate) {\n\t                    this.output.disconnect(userContext.destination);\n\t                } else {\n\t                    this.output.connect(userContext.destination);\n\t                }\n\t            }\n\t        },\n\t        callback: {\n\t            value: function(callback) {\n\t                var that = this;\n\t                return function() {\n\t                    that._phase += that._phaseInc;\n\t                    if (that._phase > 2 * Math.PI) {\n\t                        that._phase = 0;\n\t                    }\n\t                    callback(that._target, that._offset +\n\t                        that._oscillation *\n\t                        Math.sin(that._phase));\n\t                };\n\t            }\n\t        }\n\t    });\n\t\n\t    Tuna.toString = Tuna.prototype.toString = function() {\n\t        return \"Please visit https://github.com/Theodeus/tuna/wiki for instructions on how to use Tuna.js\";\n\t    };\n\t})(this);\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** electrophone.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 4913d1e1f994efdfc3bd\n **/","import 'stereo-panner-shim';\nimport EP from './ElectroPhone';\n\nconst win = window || {};\nwin.EP = EP;\n\nexport default EP;\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/index.js\n **/","'use strict';\n\nconst TYPES = {\n        MASTER: 'Master',\n        OSCILLATOR: 'Oscillator',\n        NOISE: 'Noise',\n        MODULATOR: 'Modulator',\n        ENVELOPE: 'Envelope',\n        PAN: 'Pan',\n        FILTER: 'Filter',\n        DELAY: 'Delay',\n        PINGPONGDELAY: 'PingPongDelay',\n        TREMOLO: 'Tremolo',\n        OVERDRIVE: 'Overdrive',\n        BITCRUSHER: 'Bitcrusher',\n        MOOGFILTER: 'MoogFilter'\n    },\n    CONST = {\n        MASTER: 'master',\n        ADSR: 'adsr',\n\n        NOISE_WHITE: 'white',\n        NOISE_PINK: 'pink',\n        NOISE_BROWN: 'brown',\n\n        WAVE_SINE: 'sine',\n        WAVE_SQUARE: 'square',\n        WAVE_SAWTOOTH: 'sawtooth',\n        WAVE_TRIANLGE: 'triangle',\n        WAVE_CUSTOM: 'custom',\n\n        FILTER_LOWPASS: 'lowpass',\n        FILTER_HIGHPASS: 'highpass',\n        FILTER_BANDPASS: 'bandpass',\n        FILTER_LOWSHELF: 'lowshelf',\n        FILTER_HIGHSHELF: 'highshelf',\n        FILTER_PEAKING: 'peaking',\n        FILTER_NOTCH: 'notch',\n        FILTER_ALLPASS: 'allpass',\n\n        MODULATOR_TARGET_FREQ: 'frequency',\n        MODULATOR_TARGET_DETUNE: 'detune',\n\n        ENVELOPE_TARGET_GAIN: 'gain',\n        ENVELOPE_TARGET_FREQ: 'frequency',\n        ENVELOPE_TARGET_DETUNE: 'detune'\n    };\n\nexport { TYPES, CONST };\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/core/Constants.js\n **/","import { TYPES } from '../core/Constants';\nimport Module from '../core/Module';\nimport EffectManager from './EffectManager';\n\nclass Effect extends Module {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n        this.main = null;\n        this.mainEffect = null;\n    }\n\n    setMainEffect (type, mainEffect, props) {\n        const effectManager = EffectManager(this.audioContext);\n        this.main = new effectManager[type](props);\n        this.mainEffect = this.main[mainEffect];\n    }\n\n    setMainProperties (props) {\n        Object.keys(props).forEach((e) => {\n            if (this.main[e]) {\n                this.main[e] = props[e];\n            }\n        });\n    }\n\n    createGain () {\n        return false;\n    }\n\n    getLineIn (sourceType, source) {\n        if (sourceType === TYPES.MODULATOR) {\n            return this.mainEffect[source.target];\n        } else {\n            return this.main.input;\n        }\n    }\n\n    getLineOut () {\n        return this.main.output;\n    }\n\n    getEnvelopeTarget (target) {\n        let ret = null;\n\n        if (target === 'gain') {\n            ret = this.main.output.gain;\n        } else if (this.main && this.mainEffect && this.mainEffect[target]) {\n            ret = this.main.filter[target];\n        }\n\n        return ret;\n    }\n\n}\n\nexport default Effect;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/core/Effect.js\n **/","import * as Props from '../properties';\n\nclass Module {\n\n    constructor (audioContext, props, name) {\n        this.name = name;\n        this.audioContext = audioContext;\n        this.gain = null;\n        this.envelope = null;\n        this.main = null;\n\n        this.setupProperties(props);\n\n        this.createGain(this.level);\n    }\n\n    toString () {\n        return this.name;\n    }\n\n    setupProperties (props) {\n        let properties = props || {},\n            propsHandler = this.toString() + 'Props',\n            specificProps = Props[propsHandler],\n            moduleProperties;\n\n        moduleProperties = { ...Props.DefaultProps, ...specificProps };\n        Object.keys(moduleProperties).forEach((e) => {\n            this.setProperty(e, properties[e], moduleProperties[e]);\n        });\n    }\n\n    getRealProperties (propName) {\n        switch (propName) {\n            case 'level' : return 'gain';\n            case 'freq' : return 'frequency';\n            case 'wave' : return 'type';\n            case 'q' : return 'Q';\n            case 'link' : return null;\n            default : return propName;\n        }\n    }\n\n    updateProperties (props) {\n        Object.keys(props).forEach(p => {\n            let realProp = this.getRealProperties(p);\n\n            if (this.main && realProp && this[p] !== props[p]) {\n                if (realProp === 'gain' && this.gain && this.gain.gain) {\n                    let l = (props[p] >= 0) ? props[p] % 101 : 100;\n                    this.gain.gain.value = l / 100;\n                } else if (this.main[realProp] !== undefined && this.main[realProp].value !== undefined) {\n                    this.main[realProp].value = props[p];\n                } else if (this.main[realProp] !== undefined) {\n                    this.main[realProp] = props[p];\n                }\n            }\n        });\n    }\n\n    setProperty (propKey, propVal, propConfig) {\n        this[propKey] = null;\n        if (propConfig.type && typeof propVal === propConfig.type) {\n            this[propKey] = propVal;\n        } else if (propConfig.defaultValue !== undefined) {\n            this[propKey] = propConfig.defaultValue;\n        }\n    }\n\n    createGain (level) {\n        let l = (level >= 0) ?  level % 101 : 100;\n        this.gain = this.audioContext.createGain();\n        this.envelope = this.audioContext.createGain();\n        this.gain.gain.value = l / 100;\n        this.envelope.gain.value = 1;\n\n        this.envelope.connect(this.gain);\n    }\n\n    disconnect () {\n        this.gain.disconnect();\n    }\n\n    getLineIn () {\n        return this.main;\n    }\n\n    getLineOut () {\n        return this.gain;\n    }\n\n    getEnvelopeTarget (target) {\n        let ret = null;\n\n        if (this.main && this.main[target]) {\n            ret = this.main[target];\n        } else if (target === 'gain' && this.gain) {\n            ret = this.envelope.gain;\n        }\n        return ret;\n    }\n}\n\nexport default Module;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/core/Module.js\n **/","'use strict';\n\nimport { TYPES } from '../core/Constants';\nimport Module from '../core/Module';\n\nclass SoundSource extends Module {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.defaultLineInProperty = 'frequency';\n    }\n\n    setDetune () {\n        if (this.main && this.main.detune) {\n            this.main.detune.value = this.detune;\n        }\n    }\n\n    noteOn () {\n        this.main.start(0);\n    }\n\n    noteOff (release) {\n        this.main.stop(release);\n    }\n\n    getLineIn (sourceType, source) {\n        if (sourceType === TYPES.MODULATOR) {\n            return this.main[source.target];\n        } else {\n            return this.main[this.defaultLineInProperty];\n        }\n    }\n}\n\nexport default SoundSource;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/core/SoundSource.js\n **/","'use strict';\n\nexport { default as Master } from './Master';\nexport { default as Envelope } from './Envelope';\nexport { default as Pan } from './Pan';\n\n//SOUNDSOURCES\nexport { default as Oscillator } from './SoundSources/Oscillator';\nexport { default as Modulator } from './SoundSources/Modulator';\nexport { default as Noise } from './SoundSources/Noise';\n\n//EFFECTS\nexport { default as Filter } from './Effects/Filter';\nexport { default as Delay } from './Effects/Delay';\nexport { default as PingPongDelay } from './Effects/PingPongDelay';\nexport { default as Tremolo } from './Effects/Tremolo';\nexport { default as Overdrive } from './Effects/Overdrive';\nexport { default as Bitcrusher } from './Effects/Bitcrusher';\nexport { default as MoogFilter } from './Effects/MoogFilter';\n\n//TODO implement modules...\n\n// export { default as WahWah } from './Effects/WahWah';\n// export { default as Cabinet } from './Effects/Cabinet';\n\n//Sampler\n//Convolver\n//Compressor\n//Phaser\n//Chorus\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/index.js\n **/","'use strict';\n\nexport { default as DefaultProps } from './DefaultProps';\n\n//CONTROLS\nexport { default as ModulatorProps } from './ModulatorProps';\nexport { default as EnvelopeProps } from './EnvelopeProps';\nexport { default as PanProps } from './PanProps';\n\n//SOUNDSOURCES\nexport { default as OscillatorProps } from './OscillatorProps';\nexport { default as NoiseProps } from './NoiseProps';\n\n//EFFECTS\nexport { default as FilterProps } from './FilterProps';\nexport { default as DelayProps } from './DelayProps';\nexport { default as PingPongDelayProps } from './PingPongDelayProps';\nexport { default as TremoloProps } from './TremoloProps';\nexport { default as OverdriveProps } from './OverdriveProps';\nexport { default as BitcrusherProps } from './BitcrusherProps';\nexport { default as MoogFilterProps } from './MoogFilterProps';\n\n//TODO implement properties for modules...\n\n// export { default as WahWahProps } from './WahWahProps';\n// export { default as CabinetProps } from './CabinetProps';\n\n//Sampler\n//Convolver\n//Compressor\n//Phaser\n//Chorus\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/index.js\n **/","import * as Modules from './src/modules';\nimport * as Props from './src/properties';\nimport { CONST, TYPES } from './src/core/Constants';\nimport Synth from './src/Synth';\n\nconst\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'],\n    methods = Object.keys(Modules);\nlet synth;\n\n/**\n * ElectroPhone Library.\n * @example\n * const AudioCtx = window.AudioContext || window.webkitAudioContext;\n * const synth = new ElectroPhone(new AudioCtx(), { spectrum: false });\n */\nclass ElectroPhone {\n    /**\n     * Create a playable web synthesizer instance.\n     * @param {AudioContext} audioContext - Web Audio Context instance.\n     * @param {ElectroPhoneProperties} [properties] - synth properties.\n     */\n    constructor (audioContext, props) {\n        const properties = props || {};\n        synth = new Synth(audioContext, properties);\n        this.isPlaying = false;\n    }\n\n    /**\n     * Returns current synth modules configuration object.\n     * @return {Object} current synth modules configuration.\n     * @property {Object} master - the master ModuleProperties.\n     * @property {Object} adsr - the adsr ModuleProperties.\n     * @property {ModuleProperties} <module_id> - one ModuleProperties for each created module.\n     */\n    getModules () {\n        return {\n            ...synth.modulesConfig\n        };\n    }\n\n    /**\n     * Create a new synth module.\n     * @param {String} id - the module identifier.\n     * @param {String} type - the type of module.\n     * @param {Object} properties - module properties.\n     * @return {ElectroPhone}\n     * @throws {Error} throw error when module with id is already created.\n     */\n    create (id, type, properties) {\n        const currentModule = this.getModules()[id];\n        if (currentModule) {\n            throw new Error('Module ' + id + ' already created. Use update method instead.');\n        }\n        synth.module(type, id, properties);\n        return this;\n    }\n\n    /**\n     * Update the synth module by id.\n     * @param {String} id - the module identifier.\n     * @param {Object} properties - module properties.\n     * @return {ElectroPhone}\n     * @throws {Error} throw error when module with id is not found.\n     */\n    update (id, properties) {\n        const currentModule = this.getModules()[id];\n        if (!currentModule) {\n            throw new Error('Module ' + id + ' not found. Use create method instead.');\n        }\n        synth.module(currentModule.type, id, properties);\n        return this;\n    }\n\n    /**\n     * Update the master module.\n     * @param {Object} properties - master properties.\n     * @return {ElectroPhone}\n     */\n    master (properties) {\n        synth.module(TYPES.MASTER, CONST.MASTER, properties);\n        return this;\n    }\n\n    /**\n     * Update the ADSR module.\n     * @param {Object} properties - ADSR (Envelope) properties\n     * @return {ElectroPhone}\n     */\n    adsr (properties) {\n        synth.module(TYPES.ENVELOPE, CONST.ADSR, properties);\n        return this;\n    }\n\n    /**\n     * Destroy the synth module by id.\n     * @param {String} id - the module identifier.\n     * @return {ElectroPhone}\n     * @throws {Error} throw error when module with id is not found.\n     */\n    destroy (id) {\n        const currentModule = this.getModules()[id];\n        if (!currentModule) {\n            throw new Error('Module ' + id + ' not found.');\n        }\n        synth.destroyModule(id);\n        return this;\n    }\n\n    /**\n     * Start playing the input frequency.\n     * @param {Number} frequency - the frequency value.\n     * @return {ElectroPhone}\n     */\n    play (frequency) {\n        if (+frequency >= 0) {\n            synth.play(frequency);\n            this.isPlaying = true;\n        }\n        return this;\n    }\n\n    /**\n     * Stop playing the input frequency.\n     * @param {Number} frequency - the frequency value.\n     * @return {ElectroPhone}\n     */\n    stop (frequency) {\n        if (+frequency >= 0) {\n            synth.stop(frequency);\n            this.isPlaying = false;\n        }\n        return this;\n    }\n\n    /**\n     * Link two modules, connect source module to target module.\n     * @param {String} source - the source module id.\n     * @param {String} target - the target module id.\n     * @return {ElectroPhone}\n     * @throws {Error} throw error when source is master.\n     * @throws {Error} throw error when source module is not found.\n     * @throws {Error} throw error when target module is not found.\n     */\n    link (source, target) {\n        if (source === CONST.MASTER) {\n            throw new Error('Module master can\\'t be linked to any modules.');\n        }\n        if (!synth.modulesConfig[source]) {\n            throw new Error('Source module ' + source + ' not found.');\n        }\n\n        if (!synth.modulesConfig[target]) {\n            throw new Error('Target module ' + target + ' not found.');\n        }\n        synth.modulesConfig[source].props.link = target;\n        return this;\n    }\n\n    /**\n     * Get module properties by type.\n     * @param {String} moduleType - module='' type, taken from ElectroPhone.TYPES.\n     * @return {Array}\n     */\n    static getModuleProperties (moduleType = '') {\n        const moduleProps = Props[moduleType + 'Props'] || {};\n\n        return [\n            ...Object.keys(moduleProps).map(prop => ({ ...moduleProps[prop], name: prop })),\n            ...Object.keys(Props.DefaultProps).map(prop => ({ ...Props.DefaultProps[prop], name: prop }))\n        ];\n    }\n\n    /**\n     * Describe all ElectroPhone modules with parameters configuration.\n     * @return {Array}\n     */\n    static describeModules () {\n        return [...methods]\n            .filter(e => e !== '__esModule')\n            .reduce((result, e) => {\n                return [\n                    ...result,\n                    {\n                        type: e,\n                        properties: ElectroPhone.getModuleProperties(e)\n                    }\n                ];\n            }, []);\n    }\n\n    /**\n     * Get frequency float value calculated from given note and octave.\n     * @param {String} note - note char indicator. sharp char for semi-tones.\n     * @param {Number} octave - octave number.\n     * @return {Number}\n     */\n    static getFrequency (note, octave) {\n        const\n            octaveD = parseInt(octave, 10) - 4,\n            noteD = notes.indexOf(note) - notes.indexOf('A'),\n            delta = 12 * octaveD,\n            exp = (noteD + delta),\n            freq = 440 * Math.pow(1.059463, exp);\n        return parseFloat(freq.toFixed(3)) || 0;\n    }\n\n    /**\n     * Get complete notes list.\n     * @return {Array}\n     */\n    static getNotes () {\n        return notes;\n    }\n}\n\nElectroPhone.CONST = CONST;\nElectroPhone.TYPES = TYPES;\n\nexport default ElectroPhone;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/ElectroPhone.js\n **/","import { CONST } from './core/Constants';\nimport Voice from './core/Voice';\n\n/**\n * Synth Class\n * @example\n * const AudioCtx = window.AudioContext || window.webkitAudioContext;\n * const synth = new Synth(new AudioCtx(), { spectrum: false });\n */\nclass Synth {\n\n    /**\n     * Create a synthesizer instance.\n     * @param {AudioContext} audioContext - Web Audio Context instance.\n     * @param {ElectroPhoneProperties} [properties] - synth properties.\n     */\n    constructor (audioContext, props) {\n        let properties = props || {};\n\n        this.audioContext = audioContext;\n        this.modulesConfig = {};\n        this.voices = {};\n        this.spectrum = properties.spectrum || false;\n        this.updateSpectrum = properties.updateSpectrum || null;\n        this.resetSpectrum = properties.resetSpectrum || null;\n\n        this.analyser = null;\n        this.javascriptNode = null;\n\n        if (this.audioContext && typeof this.audioContext.createGainNode === 'function') {\n            this.audioContext.createGain = this.audioContext.createGainNode;\n        }\n        if (this.audioContext && typeof this.audioContext.createDelayNode === 'function') {\n            this.audioContext.createDelay = this.audioContext.createDelayNode;\n        }\n\n        if (this.spectrum === true) {\n            this.createSpectrum();\n        }\n\n        this.module('Master', CONST.MASTER, {\n            level: 100\n        });\n\n        this.module('Envelope', CONST.ADSR, {\n            link: CONST.MASTER,\n            target: 'gain',\n            level: 100,\n            attack: null,\n            decay: 0.1,\n            sustain: 100,\n            release: 5\n        });\n\n    }\n\n    /**\n     * Create a spectrum node for the synth instance.\n     */\n    createSpectrum () {\n        var SMOOTHING = 0.8,\n            FFT_SIZE = 2048;\n\n        if (this.audioContext) {\n            this.javascriptNode = this.audioContext.createScriptProcessor(2048, 1, 1);\n            this.javascriptNode.connect(this.audioContext.destination);\n\n            this.analyser = this.audioContext.createAnalyser();\n            this.analyser.smoothingTimeConstant = SMOOTHING;\n            this.analyser.fftSize = FFT_SIZE;\n            this.analyser.minDecibels = -160;\n            this.analyser.maxDecibels = 0;\n\n            this.analyser.connect(this.audioContext.destination);\n        }\n    }\n\n    /**\n     * Module method to create | update modules.\n     * @param {String} type - the type of module.\n     * @param {String} label - the module identifier.\n     * @param {Object} props={} - module properties\n     */\n    module (type, label, props = {}) {\n        if (!type || type.constructor !== String) {\n            throw new Error('Synth Module :: missing type');\n        }\n\n        if (!label || label.constructor !== String) {\n            throw new Error('Synth Module :: missing label');\n        }\n\n        if (!this.modulesConfig[label]) {\n            this.addModule(type, label, props);\n        } else {\n            this.updateModule(label, props);\n        }\n    }\n\n    /**\n     * Add a new module.\n     * @param {String} type - the type of module.\n     * @param {String} label - the module identifier.\n     * @param {Object} props={} - module properties.\n     * @throws {Error} throw error when module with label is already created.\n     */\n    addModule (type, label, props = {}) {\n        if (this.modulesConfig[label]) {\n            throw new Error('Module ' + label + ' already created. Use updateModule method instead.');\n        }\n        this.modulesConfig[label] = {\n            type,\n            props\n        };\n    }\n\n    /**\n     * Update the module identified by label and update all running voices.\n     * @param {String} label - the module identifier.\n     * @param {Object} props={} - module properties.\n     * @throws {Error} throw error when module with label is not found.\n     */\n    updateModule (label, props = {}) {\n        if (!this.modulesConfig[label]) {\n            throw new Error('Module ' + label + ' not found. Use addModule method instead.');\n        }\n        Object.keys(props).forEach((e) => {\n            if (this.modulesConfig[label].props[e] !== undefined) {\n                this.modulesConfig[label].props[e] = props[e];\n            }\n        });\n\n        Object.keys(this.voices).forEach((e) => {\n            this.voices[e].updateModule(label, props);\n        });\n    }\n\n    /**\n     * Destroy the module identified by label and remove running voices.\n     * @param {String} label - the module identifier.\n     * @throws {Error} throw error when module with label is not found.\n     */\n    destroyModule (label) {\n        if (!this.modulesConfig[label]) {\n            throw new Error('Module ' + label + ' not found.');\n        }\n        delete this.modulesConfig[label];\n        Object.keys(this.voices).forEach((e) => {\n            this.voices[e].removeModule(label);\n        });\n    }\n\n    /**\n     * Start playing the input note and start spectrum data if necessary.\n     * @param {Number} note - the note frequency value.\n     */\n    play (note) {\n        let frequencyData,\n            freqBufferLength = (this.analyser && this.analyser.frequencyBinCount) ?\n                this.analyser.frequencyBinCount : 1024;\n\n        if (!this.voices[note]) {\n            this.voices[note] = new Voice(note, this.audioContext, this.modulesConfig, this.analyser);\n            this.voices[note].noteOn();\n        }\n        if (this.spectrum === true && this.javascriptNode) {\n\n            frequencyData = new Uint8Array(freqBufferLength);\n\n            this.javascriptNode.onaudioprocess = () => {\n                this.analyser.getByteFrequencyData(frequencyData);\n                if (this.updateSpectrum && typeof this.updateSpectrum === 'function') {\n                    this.updateSpectrum(frequencyData);\n                }\n            };\n        }\n    }\n\n    /**\n     * Stop playing the input note and stop spectrum data if necessary.\n     * @param {Number} note - the note frequency value.\n     */\n    stop (note) {\n        if (this.voices[note]) {\n            this.voices[note].noteOff();\n            this.voices[note] = undefined;\n            delete this.voices[note];\n        }\n        if (\n            Object.keys(this.voices).length === 0 &&\n            this.spectrum === true &&\n            this.javascriptNode\n        ) {\n            this.javascriptNode.onaudioprocess = null;\n            if (\n                this.resetSpectrum &&\n                typeof this.resetSpectrum === 'function'\n            ) {\n                this.resetSpectrum();\n            }\n        }\n    }\n}\n\nexport default Synth;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/Synth.js\n **/","'use strict';\n\nimport Tuna from 'tunajs';\n\nconst EffectManager = (audioContext) => new Tuna(audioContext);\n\nexport default EffectManager;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/core/EffectManager.js\n **/","import * as Modules from '../modules';\nimport SoundSource from './SoundSource';\nimport { TYPES } from './Constants';\n\n/**\n * Voice Class\n * @example\n * const v = new Voice(440, AudioContext, { master: { ... }, adsr: { ... } }, null);\n */\nclass Voice {\n\n    constructor (note, audioContext, modulesConfig, analyser) {\n        this.note = note;\n        this.modulesConfig = modulesConfig;\n        this.modules = {};\n        this.soundSources = [];\n        this.master = null;\n        this.analyser = analyser || null;\n\n        if (audioContext) {\n            this.setupModules(audioContext);\n            this.linkModules();\n        }\n    }\n\n    setupModules (audioContext) {\n        let modConf,\n            m;\n\n        Object.keys(this.modulesConfig).forEach((mod) => {\n            modConf = this.modulesConfig[mod];\n            if (modConf.type && modConf.props) {\n                m = new Modules[modConf.type](audioContext, modConf.props, modConf.type);\n                this.modules[mod] = {\n                    type: modConf.type,\n                    instance: m\n                };\n\n                if (m.instance instanceof SoundSource) {\n                    this.soundSources.push(m);\n                } else if (modConf.type === TYPES.MASTER) {\n                    this.master = m;\n                }\n            }\n        });\n    }\n\n    updateModule (moduleId, props) {\n        if (this.modules[moduleId] && this.modules[moduleId].instance) {\n            this.modules[moduleId].instance.updateProperties(props);\n        }\n    }\n\n    removeModule (moduleId) {\n        if (this.modules[moduleId] && this.modules[moduleId].instance) {\n            this.modules[moduleId].instance.disconnect();\n        }\n    }\n\n    linkModules () {\n        Object.keys(this.modules).forEach((mod) => {\n            let currentModule = this.modules[mod].instance,\n                currentModuleType = this.modules[mod].type,\n                destinationModule,\n                source,\n                dest;\n\n            if (currentModule.link) {\n                destinationModule = this.modules[currentModule.link];\n                if (destinationModule && destinationModule.instance) {\n                    source = currentModule.getLineOut();\n                    dest = destinationModule.instance.getLineIn(currentModuleType, currentModule);\n                    //console.log(mod, source, currentModule.link, dest);\n                    if (source && dest) {\n                        source.connect(dest);\n                    }\n                }\n            }\n        });\n\n        this.master.lineOut(this.analyser);\n    }\n\n    noteOn () {\n        let m,\n            dest;\n\n        Object.keys(this.modules).forEach((e) => {\n            m = this.modules[e].instance;\n\n            if (typeof m.setEnvelope === 'function') {\n                dest = (this.modules[m.link]) ? this.modules[m.link].instance : null;\n                m.setEnvelope(dest);\n            }\n            if (typeof m.setNote === 'function') {\n                m.setNote(+this.note);\n            }\n        });\n        Object.keys(this.modules).forEach((e) => {\n            m = this.modules[e].instance;\n            if (m && typeof m.noteOn === 'function') {\n                m.noteOn();\n            }\n        });\n    }\n\n    noteOff () {\n        let release = 0,\n            adsr = (this.modules.adsr) ? this.modules.adsr.instance : null,\n            m,\n            dest;\n\n        if (adsr) {\n            release = adsr.getReleaseTime();\n        }\n\n        Object.keys(this.modules).forEach((e) => {\n            m = this.modules[e].instance;\n            if (m && typeof m.resetEnvelope === 'function') {\n                dest = (this.modules[m.link]) ? this.modules[m.link].instance : null;\n                m.resetEnvelope(dest);\n            }\n        });\n        Object.keys(this.modules).forEach((e) => {\n            m = this.modules[e].instance;\n            if (m && typeof m.noteOff === 'function') {\n                m.noteOff(release);\n            }\n        });\n    }\n\n}\n\nexport default Voice;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/core/Voice.js\n **/","'use strict';\n\nimport Effect from '../../core/Effect';\n\nclass Bitcrusher extends Effect {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.setMainEffect('Bitcrusher', 'output');\n        this.setMainProperties({\n            bits: this.bits,\n            normfreq: this.normfreq,\n            bufferSize: this.bufferSize\n        });\n    }\n\n}\n\nexport default Bitcrusher;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/Effects/Bitcrusher.js\n **/","'use strict';\n\nimport Effect from '../../core/Effect';\n\nclass Delay extends Effect {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.setMainEffect('Delay', 'filter');\n        this.setMainProperties({\n            dryLevel: this.dry,\n            wetLevel: this.wet,\n            feedback: this.feedback,\n            cutoff: this.cutoff,\n            delayTime: this.delayTime,\n            bypass: this.bypass\n        });\n    }\n}\n\nexport default Delay;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/Effects/Delay.js\n **/","'use strict';\n\nimport Effect from '../../core/Effect';\n\nclass Filter extends Effect {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.setMainEffect('Filter', 'filter');\n        this.setMainProperties({\n            frequency: this.freq,\n            Q: this.q,\n            gain: this.filterGain,\n            filterType: this.filterType,\n            bypass: this.bypass\n        });\n    }\n}\n\nexport default Filter;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/Effects/Filter.js\n **/","'use strict';\n\nimport Effect from '../../core/Effect';\n\nclass MoogFilter extends Effect {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.setMainEffect('MoogFilter', 'output');\n        this.setMainProperties({\n            cutoff: this.cutoff,\n            resonance: this.resonance,\n            bufferSize: this.bufferSize\n        });\n    }\n}\n\nexport default MoogFilter;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/Effects/MoogFilter.js\n **/","'use strict';\n\nimport Effect from '../../core/Effect';\n\nclass Overdrive extends Effect {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.setMainEffect('Overdrive', 'output');\n        this.setMainProperties({\n            outputGain: this.outputGain,\n            drive: this.drive,\n            curveAmount: this.curveAmount,\n            algorithmIndex: this.algorithmIndex,\n            bypass: this.bypass\n        });\n    }\n}\n\nexport default Overdrive;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/Effects/Overdrive.js\n **/","'use strict';\n\nimport Effect from '../../core/Effect';\n\nclass PingPongDelay extends Effect {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.setMainEffect('PingPongDelay', 'delayLeft');\n        this.setMainProperties({\n            dryLevel: this.dry,\n            wetLevel: this.wet,\n            feedback: this.feedback,\n            delayTimeLeft: this.delayTimeLeft,\n            delayTimeRight: this.delayTimeRight,\n            bypass: this.bypass\n        });\n    }\n}\n\nexport default PingPongDelay;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/Effects/PingPongDelay.js\n **/","'use strict';\n\nimport Effect from '../../core/Effect';\n\nclass Tremolo extends Effect {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.setMainEffect('Tremolo', 'output');\n        this.setMainProperties({\n            intensity: this.intensity,\n            rate: this.rate,\n            stereoPhase: this.stereoPhase,\n            bypass: this.bypass\n        });\n    }\n}\n\nexport default Tremolo;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/Effects/Tremolo.js\n **/","import Module from '../core/Module';\n\nclass Envelope extends Module {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n    }\n\n    createGain () {\n        return false;\n    }\n\n    getReleaseTime () {\n        let now = this.audioContext.currentTime,\n            release;\n\n        if (this.release) {\n            release = now + (this.release / 10.0);\n        } else {\n            release = now + 0.2;\n        }\n\n        return release;\n    }\n\n    setEnvelope (dest) {\n        let now = this.audioContext.currentTime,\n            envelope = this.level % 101,\n            attackLevel,\n            sustainLevel,\n            attackEnd = (this.attack / 20.0),\n            t;\n\n        if (this.target === 'gain') {\n            attackLevel = envelope / 100;\n            sustainLevel = this.sustain / 100.0;\n        } else {\n            attackLevel = envelope * 72;  // Range: 0-7200: 6-octave range\n            sustainLevel = attackLevel * this.sustain / 100.0; // range: 0-7200\n        }\n\n        if (!attackEnd) {\n            attackEnd = 0.05; // tweak to get target decay to work properly\n        }\n\n        if (dest && typeof dest.getEnvelopeTarget === 'function') {\n            t = dest.getEnvelopeTarget(this.target);\n\n            if (t && t.setValueAtTime && t.linearRampToValueAtTime && t.setTargetAtTime) {\n                t.setValueAtTime(0, now);\n                t.linearRampToValueAtTime(attackLevel, now + attackEnd);\n                t.setTargetAtTime(sustainLevel, now + attackEnd, (this.decay / 100.0));\n            }\n        }\n\n    }\n\n    resetEnvelope (dest) {\n        let now = this.audioContext.currentTime,\n            t;\n\n        if (dest && typeof dest.getEnvelopeTarget === 'function') {\n            t = dest.getEnvelopeTarget(this.target);\n\n            if (t && t.cancelScheduledValues && t.setValueAtTime && t.setTargetAtTime) {\n                t.cancelScheduledValues(now);\n                if (this.target === 'gain') {\n                    t.setValueAtTime(t.value, now);\n                }\n                t.setTargetAtTime(0, now, (this.release / 100.0));\n            }\n        }\n    }\n\n    getLineOut () {\n        return false;\n    }\n}\n\nexport default Envelope;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/Envelope.js\n **/","import Module from '../core/Module';\n\nclass Master extends Module {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.main = this.audioContext.createGain();\n        this.link = null;\n    }\n\n    getLineIn () {\n        return this.main;\n    }\n\n    lineOut (analyser) {\n        this.main.connect(this.envelope);\n        if (analyser) {\n            this.gain.connect(analyser);\n        } else {\n            this.gain.connect(this.audioContext.destination);\n        }\n    }\n}\n\nexport default Master;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/Master.js\n **/","import Module from '../core/Module';\n\nclass Pan extends Module {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.main = this.audioContext.createStereoPanner();\n        this.main.pan.value = this.pan;\n        this.main.connect(this.envelope);\n    }\n}\n\nexport default Pan;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/Pan.js\n **/","import SoundSource from '../../core/SoundSource';\n\nclass Modulator extends SoundSource {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n        this.main = this.audioContext.createOscillator();\n        this.main.type = this.wave;\n        this.main.connect(this.envelope);\n    }\n\n    setNote () {\n        let f =  this.freq % 11;\n        this.main.frequency.value = f;\n    }\n}\n\nexport default Modulator;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/SoundSources/Modulator.js\n **/","import { CONST } from '../../core/Constants';\nimport SoundSource from '../../core/SoundSource';\n\nclass Noise extends SoundSource {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.defaultLineInProperty = 'detune';\n        this.main = this.audioContext.createBufferSource();\n        this.main.connect(this.envelope);\n\n        this.setDetune();\n        this.setColor();\n    }\n\n    setColor () {\n        switch (this.color) {\n            case CONST.NOISE_WHITE :\n                this.main.buffer = this.white();\n                break;\n            case CONST.NOISE_PINK :\n                this.main.buffer = this.pink();\n                break;\n            case CONST.NOISE_BROWN :\n                this.main.buffer = this.brown();\n                break;\n            default :\n                throw new Error('Invalid Noise color: ' + this.color);\n        }\n    }\n\n    white () {\n        let noiseBuffer = this.getNoiseBuffer(),\n            bufferSize = this.getBufferSize(),\n            output = noiseBuffer.getChannelData(0);\n\n        for (let i = 0; i < bufferSize; i++) {\n            output[i] = Math.random() * 2 - 1;\n        }\n\n        return noiseBuffer;\n    }\n\n    pink () {\n        let b0, b1, b2, b3, b4, b5, b6,\n            noiseBuffer = this.getNoiseBuffer(),\n            bufferSize = this.getBufferSize(),\n            output = noiseBuffer.getChannelData(0),\n            white;\n\n        b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\n        for (let i = 0; i < bufferSize; i++) {\n            white = Math.random() * 2 - 1;\n\n            b0 = 0.99886 * b0 + white * 0.0555179;\n            b1 = 0.99332 * b1 + white * 0.0750759;\n            b2 = 0.96900 * b2 + white * 0.1538520;\n            b3 = 0.86650 * b3 + white * 0.3104856;\n            b4 = 0.55000 * b4 + white * 0.5329522;\n            b5 = -0.7616 * b5 - white * 0.0168980;\n\n            output[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n            output[i] *= 0.11;\n            b6 = white * 0.115926;\n        }\n\n        return noiseBuffer;\n    }\n\n    brown () {\n        let noiseBuffer = this.getNoiseBuffer(),\n            bufferSize = this.getBufferSize(),\n            output = noiseBuffer.getChannelData(0),\n            lastOut = 0.0,\n            white;\n\n        for (let i = 0; i < bufferSize; i++) {\n            white = white = Math.random() * 2 - 1;\n\n            output[i] = (lastOut + (0.02 * white)) / 1.02;\n            lastOut = output[i];\n            output[i] *= 3.5;\n        }\n\n        return noiseBuffer;\n    }\n\n    getBufferSize () {\n        return 2 * this.audioContext.sampleRate;\n    }\n\n    getNoiseBuffer () {\n        let bufferSize = this.getBufferSize(),\n            noiseBuffer = this.audioContext.createBuffer(1, bufferSize, this.audioContext.sampleRate);\n        return noiseBuffer;\n    }\n\n    setNote () {\n        this.main.loop = true;\n    }\n}\n\nexport default Noise;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/SoundSources/Noise.js\n **/","import SoundSource from '../../core/SoundSource';\n\nclass Oscillator extends SoundSource {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.main = this.audioContext.createOscillator();\n        this.main.type = this.wave;\n        this.main.connect(this.envelope);\n\n        this.setDetune();\n    }\n\n    setNote (note) {\n        this.main.frequency.value = note;\n    }\n}\n\nexport default Oscillator;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/SoundSources/Oscillator.js\n **/","'use strict';\n\nconst BitcrusherProps = {\n    bits: {\n        type: 'number',\n        bounds: [1, 16],\n        defaultValue: 4\n    },\n    normfreq: {\n        type: 'number',\n        bounds: [0, 1],\n        step: 0.1,\n        defaultValue: 0.1\n    },\n    bufferSize: {\n        type: 'number',\n        bounds: [256, 16384],\n        defaultValue: 4096\n    },\n    bypass: {\n        type: 'number',\n        bounds: [0, 1],\n        defaultValue: 0\n    }\n};\n\nexport default BitcrusherProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/BitcrusherProps.js\n **/","'use strict';\n\nconst DefaultProps = {\n    link: {\n        type: 'string',\n        defaultValue: ''\n    },\n    level: {\n        type: 'number',\n        bounds: [0, 100],\n        defaultValue: 100\n    }\n};\n\nexport default DefaultProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/DefaultProps.js\n **/","'use strict';\n\nconst DelayProps = {\n    dry: {\n        type: 'number',\n        bounds: [0, 1],\n        step: 0.1,\n        defaultValue: 1\n    },\n    wet: {\n        type: 'number',\n        bounds: [0, 1],\n        step: 0.1,\n        defaultValue: 0.5\n    },\n    feedback: {\n        type: 'number',\n        bounds: [0, 0.9],\n        step: 0.1,\n        defaultValue: 0.4\n    },\n    cutoff: {\n        type: 'number',\n        bounds: [20, 20000],\n        defaultValue: 440\n    },\n    delayTime: {\n        type: 'number',\n        bounds: [20, 1000],\n        defaultValue: 100\n    },\n    bypass: {\n        type: 'number',\n        bounds: [0, 1],\n        defaultValue: 0\n    }\n};\n\nexport default DelayProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/DelayProps.js\n **/","'use strict';\n\nimport { CONST } from '../core/Constants';\n\nconst EnvelopeProps = {\n    target: {\n        type: 'string',\n        bounds: [\n            CONST.ENVELOPE_TARGET_GAIN,\n            CONST.ENVELOPE_TARGET_FREQ,\n            CONST.ENVELOPE_TARGET_DETUNE\n        ],\n        defaultValue: CONST.ENVELOPE_TARGET_GAIN\n    },\n    attack: {\n        type: 'number',\n        bounds: [0, 100],\n        defaultValue: 0\n    },\n    decay: {\n        type: 'number',\n        bounds: [1, 100],\n        defaultValue: 1\n    },\n    sustain: {\n        type: 'number',\n        bounds: [0, 100],\n        defaultValue: 100\n    },\n    release: {\n        type: 'number',\n        bounds: [0, 100],\n        defaultValue: 5\n    }\n};\n\nexport default EnvelopeProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/EnvelopeProps.js\n **/","'use strict';\n\nimport { CONST } from '../core/Constants';\n\nconst FilterProps = {\n    freq: {\n        type: 'number',\n        bounds: [20, 20000],\n        defaultValue: 440\n    },\n    q: {\n        type: 'number',\n        bounds: [0, 100],\n        defaultValue: 10\n    },\n    filterGain: {\n        type: 'number',\n        bounds: [-40, 40],\n        defaultValue: 0\n    },\n    filterType: {\n        type: 'string',\n        bounds: [\n            CONST.FILTER_ALLPASS,\n            CONST.FILTER_BANDPASS,\n            CONST.FILTER_HIGHPASS,\n            CONST.FILTER_HIGHSHELF,\n            CONST.FILTER_LOWPASS,\n            CONST.FILTER_LOWSHELF,\n            CONST.FILTER_NOTCH,\n            CONST.FILTER_PEAKING\n        ],\n        defaultValue: CONST.FILTER_LOWPASS\n    },\n    bypass: {\n        type: 'number',\n        bounds: [0, 1],\n        defaultValue: 0\n    }\n};\n\nexport default FilterProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/FilterProps.js\n **/","'use strict';\n\nimport { CONST } from '../core/Constants';\n\nconst ModulatorProps = {\n    freq: {\n        type: 'number',\n        bounds: [1, 100],\n        defaultValue: 5\n    },\n    target: {\n        type: 'string',\n        bounds: [\n            CONST.MODULATOR_TARGET_FREQ,\n            CONST.MODULATOR_TARGET_DETUNE\n        ],\n        defaultValue: CONST.MODULATOR_TARGET_FREQ\n    },\n    wave: {\n        type: 'string',\n        bounds: [\n            CONST.WAVE_SINE,\n            CONST.WAVE_SQUARE,\n            CONST.WAVE_SAWTOOTH,\n            CONST.WAVE_TRIANLGE,\n            CONST.WAVE_CUSTOM\n        ],\n        defaultValue: CONST.WAVE_SINE\n    }\n};\n\nexport default ModulatorProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/ModulatorProps.js\n **/","'use strict';\n\nconst MoogFilterProps = {\n    cutoff: {\n        type: 'number',\n        bounds: [0, 1],\n        step: 0.1,\n        defaultValue: 0.1\n    },\n    resonance: {\n        type: 'number',\n        bounds: [0, 4],\n        step: 0.1,\n        defaultValue: 3.5\n    },\n    bufferSize: {\n        type: 'number',\n        bounds: [256, 16384],\n        defaultValue: 4096\n    },\n    bypass: {\n        type: 'number',\n        bounds: [0, 1],\n        defaultValue: 0\n    }\n};\n\nexport default MoogFilterProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/MoogFilterProps.js\n **/","'use strict';\n\nimport { CONST } from '../core/Constants';\n\nconst NoiseProps = {\n    color: {\n        type: 'string',\n        bounds: [\n            CONST.NOISE_BROWN,\n            CONST.NOISE_PINK,\n            CONST.NOISE_WHITE\n        ],\n        defaultValue: CONST.NOISE_WHITE\n    },\n    detune: {\n        type: 'number',\n        bounds: [-1200, 1200],\n        defaultValue: 0\n    }\n};\n\nexport default NoiseProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/NoiseProps.js\n **/","'use strict';\n\nimport { CONST } from '../core/Constants';\n\nconst OscillatorProps = {\n    detune: {\n        type: 'number',\n        bounds: [-1200, 1200],\n        defaultValue: 0\n    },\n    wave: {\n        type: 'string',\n        bounds: [\n            CONST.WAVE_SINE,\n            CONST.WAVE_SQUARE,\n            CONST.WAVE_SAWTOOTH,\n            CONST.WAVE_TRIANLGE,\n            CONST.WAVE_CUSTOM\n        ],\n        defaultValue: CONST.WAVE_SINE\n    }\n};\n\nexport default OscillatorProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/OscillatorProps.js\n **/","'use strict';\n\nconst OverdriveProps = {\n    outputGain: {\n        type: 'number',\n        bounds: [0, 1],\n        step: 0.1,\n        defaultValue: 1\n    },\n    drive: {\n        type: 'number',\n        bounds: [0, 1],\n        step: 0.1,\n        defaultValue: 1\n    },\n    curveAmount: {\n        type: 'number',\n        bounds: [0, 1],\n        step: 0.1,\n        defaultValue: 0.7\n    },\n    algorithmIndex: {\n        type: 'number',\n        bounds: [0, 5],\n        defaultValue: 0\n    },\n    bypass: {\n        type: 'number',\n        bounds: [0, 1],\n        defaultValue: 0\n    }\n};\n\nexport default OverdriveProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/OverdriveProps.js\n **/","'use strict';\n\nconst PanProps = {\n    pan: {\n        type: 'number',\n        bounds: [-1, 1],\n        step: 0.1,\n        defaultValue: 0\n    }\n};\n\nexport default PanProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/PanProps.js\n **/","'use strict';\n\nconst PingPongDelayProps = {\n    wet: {\n        type: 'number',\n        bounds: [0, 1],\n        step: 0.1,\n        defaultValue: 0.5\n    },\n    feedback: {\n        type: 'number',\n        bounds: [0, 1],\n        step: 0.1,\n        defaultValue: 0.3\n    },\n    delayTimeLeft: {\n        type: 'number',\n        bounds: [1, 10000],\n        defaultValue: 200\n    },\n    delayTimeRight: {\n        type: 'number',\n        bounds: [1, 10000],\n        defaultValue: 400\n    },\n    bypass: {\n        type: 'number',\n        bounds: [0, 1],\n        defaultValue: 0\n    }\n};\n\nexport default PingPongDelayProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/PingPongDelayProps.js\n **/","'use strict';\n\nconst TremoloProps = {\n    intensity: {\n        type: 'number',\n        bounds: [0, 1],\n        step: 0.1,\n        defaultValue: 0.3\n    },\n    rate: {\n        type: 'number',\n        bounds: [0, 11],\n        step: 0.1,\n        defaultValue: 5\n    },\n    stereoPhase: {\n        type: 'number',\n        bounds: [0, 180],\n        defaultValue: 0\n    },\n    bypass: {\n        type: 'number',\n        bounds: [0, 1],\n        defaultValue: 0\n    }\n};\n\nexport default TremoloProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/TremoloProps.js\n **/","\"use strict\";\n\nvar WS_CURVE_SIZE = 4096;\nvar curveL = new Float32Array(WS_CURVE_SIZE);\nvar curveR = new Float32Array(WS_CURVE_SIZE);\n\n(function() {\n  for (var i = 0; i < WS_CURVE_SIZE; i++) {\n    curveL[i] = Math.cos((i / WS_CURVE_SIZE) * Math.PI * 0.5);\n    curveR[i] = Math.sin((i / WS_CURVE_SIZE) * Math.PI * 0.5);\n  }\n})();\n\nmodule.exports = {\n  L: curveL,\n  R: curveR,\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/stereo-panner-node/lib/curve.js\n ** module id = 37\n ** module chunks = 0 1\n **/","\"use strict\";\n\nvar curve = require(\"./curve\");\n\n/**\n *  StereoPannerImpl\n *  +--------------------------------+  +------------------------+\n *  | ChannelSplitter(inlet)         |  | BufferSourceNode(_dc1) |\n *  +--------------------------------+  | buffer: [ 1, 1 ]       |\n *    |                            |    | loop: true             |\n *    |                            |    +------------------------+\n *    |                            |       |\n *    |                            |  +----------------+\n *    |                            |  | GainNode(_pan) |\n *    |                            |  | gain: 0(pan)   |\n *    |                            |  +----------------+\n *    |                            |    |\n *    |    +-----------------------|----+\n *    |    |                       |    |\n *    |  +----------------------+  |  +----------------------+\n *    |  | WaveShaperNode(_wsL) |  |  | WaveShaperNode(_wsR) |\n *    |  | curve: curveL        |  |  | curve: curveR        |\n *    |  +----------------------+  |  +----------------------+\n *    |               |            |               |\n *    |               |            |               |\n *    |               |            |               |\n *  +--------------+  |          +--------------+  |\n *  | GainNode(_L) |  |          | GainNode(_R) |  |\n *  | gain: 0    <----+          | gain: 0    <----+\n *  +--------------+             +--------------+\n *    |                            |\n *  +--------------------------------+\n *  | ChannelMergerNode(outlet)      |\n *  +--------------------------------+\n */\nfunction StereoPannerImpl(audioContext) {\n  this.audioContext = audioContext;\n  this.inlet = audioContext.createChannelSplitter(2);\n  this._pan = audioContext.createGain();\n  this.pan = this._pan.gain;\n  this._wsL = audioContext.createWaveShaper();\n  this._wsR = audioContext.createWaveShaper();\n  this._L = audioContext.createGain();\n  this._R = audioContext.createGain();\n  this.outlet = audioContext.createChannelMerger(2);\n\n  this.inlet.channelCount = 2;\n  this.inlet.channelCountMode = \"explicit\";\n  this._pan.gain.value = 0;\n  this._wsL.curve = curve.L;\n  this._wsR.curve = curve.R;\n  this._L.gain.value = 0;\n  this._R.gain.value = 0;\n\n  this.inlet.connect(this._L, 0);\n  this.inlet.connect(this._R, 1);\n  this._L.connect(this.outlet, 0, 0);\n  this._R.connect(this.outlet, 0, 1);\n  this._pan.connect(this._wsL);\n  this._pan.connect(this._wsR);\n  this._wsL.connect(this._L.gain);\n  this._wsR.connect(this._R.gain);\n\n  this._isConnected = false;\n  this._dc1buffer = null;\n  this._dc1 = null;\n}\n\nStereoPannerImpl.prototype.connect = function(destination) {\n  var audioContext = this.audioContext;\n  if (!this._isConnected) {\n    this._isConnected = true;\n    this._dc1buffer = audioContext.createBuffer(1, 2, audioContext.sampleRate);\n    this._dc1buffer.getChannelData(0).set([ 1, 1 ]);\n\n    this._dc1 = audioContext.createBufferSource();\n    this._dc1.buffer = this._dc1buffer;\n    this._dc1.loop = true;\n    this._dc1.start(audioContext.currentTime);\n    this._dc1.connect(this._pan);\n  }\n  global.AudioNode.prototype.connect.call(this.outlet, destination);\n};\n\nStereoPannerImpl.prototype.disconnect = function() {\n  var audioContext = this.audioContext;\n  if (this._isConnected) {\n    this._isConnected = false;\n    this._dc1.stop(audioContext.currentTime);\n    this._dc1.disconnect();\n    this._dc1 = null;\n    this._dc1buffer = null;\n  }\n  global.AudioNode.prototype.disconnect.call(this.outlet);\n};\n\nmodule.exports = StereoPannerImpl;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/stereo-panner-node/lib/stereo-panner-impl.js\n ** module id = 38\n ** module chunks = 0 1\n **/","\"use strict\";\n\nvar StereoPannerImpl = require(\"./stereo-panner-impl\");\n\nfunction StereoPanner(audioContext) {\n  var impl = new StereoPannerImpl(audioContext);\n\n  Object.defineProperties(impl.inlet, {\n    pan: {\n      value: impl.pan,\n      enumerable: true\n    },\n    connect: {\n      value: function(node) {\n        return impl.connect(node);\n      }\n    },\n    disconnect: {\n      value: function() {\n        return impl.disconnect();\n      }\n    }\n  });\n\n  return impl.inlet;\n}\n\nmodule.exports = StereoPanner;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/stereo-panner-node/lib/stereo-panner-node.js\n ** module id = 39\n ** module chunks = 0 1\n **/","\"use strict\";\n\nvar AudioContext = global.AudioContext || global.webkitAudioContext;\nvar StereoPannerNode = require(\"stereo-panner-node\");\n\nif (AudioContext && !AudioContext.prototype.createStereoPanner) {\n  AudioContext.prototype.createStereoPanner = function() {\n    return new StereoPannerNode(this);\n  };\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/stereo-panner-shim/lib/stereo-panner-shim.js\n ** module id = 40\n ** module chunks = 0 1\n **/","/*\n    Copyright (c) 2012 DinahMoe AB & Oskar Eriksson\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy,\n    modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software\n    is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n(function(window) {\n    var userContext,\n        userInstance,\n        pipe = function(param, val) {\n            param.value = val;\n        },\n        Super = Object.create(null, {\n            activate: {\n                writable: true,\n                value: function(doActivate) {\n                    if (doActivate) {\n                        this.input.disconnect();\n                        this.input.connect(this.activateNode);\n                        if (this.activateCallback) {\n                            this.activateCallback(doActivate);\n                        }\n                    } else {\n                        this.input.disconnect();\n                        this.input.connect(this.output);\n                    }\n                }\n            },\n            bypass: {\n                get: function() {\n                    return this._bypass;\n                },\n                set: function(value) {\n                    if (this._lastBypassValue === value) {\n                        return;\n                    }\n                    this._bypass = value;\n                    this.activate(!value);\n                    this._lastBypassValue = value;\n                }\n            },\n            connect: {\n                value: function(target) {\n                    this.output.connect(target);\n                }\n            },\n            disconnect: {\n                value: function(target) {\n                    this.output.disconnect(target);\n                }\n            },\n            connectInOrder: {\n                value: function(nodeArray) {\n                    var i = nodeArray.length - 1;\n                    while (i--) {\n                        if (!nodeArray[i].connect) {\n                            return console.error(\"AudioNode.connectInOrder: TypeError: Not an AudioNode.\", nodeArray[i]);\n                        }\n                        if (nodeArray[i + 1].input) {\n                            nodeArray[i].connect(nodeArray[i + 1].input);\n                        } else {\n                            nodeArray[i].connect(nodeArray[i + 1]);\n                        }\n                    }\n                }\n            },\n            getDefaults: {\n                value: function() {\n                    var result = {};\n                    for (var key in this.defaults) {\n                        result[key] = this.defaults[key].value;\n                    }\n                    return result;\n                }\n            },\n            automate: {\n                value: function(property, value, duration, startTime) {\n                    var start = startTime ? ~~(startTime / 1000) : userContext.currentTime,\n                        dur = duration ? ~~(duration / 1000) : 0,\n                        _is = this.defaults[property],\n                        param = this[property],\n                        method;\n\n                    if (param) {\n                        if (_is.automatable) {\n                            if (!duration) {\n                                method = \"setValueAtTime\";\n                            } else {\n                                method = \"linearRampToValueAtTime\";\n                                param.cancelScheduledValues(start);\n                                param.setValueAtTime(param.value, start);\n                            }\n                            param[method](value, dur + start);\n                        } else {\n                            param = value;\n                        }\n                    } else {\n                        console.error(\"Invalid Property for \" + this.name);\n                    }\n                }\n            }\n        }),\n        FLOAT = \"float\",\n        BOOLEAN = \"boolean\",\n        STRING = \"string\",\n        INT = \"int\";\n\n    if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = Tuna;\n    } else if (typeof define === \"function\") {\n        window.define(\"Tuna\", definition);\n    } else {\n        window.Tuna = Tuna;\n    }\n\n    function definition() {\n        return Tuna;\n    }\n\n    function Tuna(context) {\n        if (!(this instanceof Tuna)) {\n            return new Tuna(context);\n        }\n        if (!window.AudioContext) {\n            window.AudioContext = window.webkitAudioContext;\n        }\n        if (!context) {\n            console.log(\"tuna.js: Missing audio context! Creating a new context for you.\");\n            context = window.AudioContext && (new window.AudioContext());\n        }\n        if (!context) {\n            throw new Error(\"Tuna cannot initialize because this environment does not support web audio.\");\n        }\n        connectify(context);\n        userContext = context;\n        userInstance = this;\n    }\n\n    function connectify(context) {\n        if (context.__connectified__ === true) return;\n\n        var gain = context.createGain(),\n            proto = Object.getPrototypeOf(Object.getPrototypeOf(gain)),\n            oconnect = proto.connect;\n\n        proto.connect = shimConnect;\n        context.__connectified__ = true; // Prevent overriding connect more than once\n\n        function shimConnect() {\n            var node = Array.prototype.shift.apply(arguments);\n            node = Super.isPrototypeOf ? (Super.isPrototypeOf(node) ? node.input : node) : (node.input || node);\n            arguments = Array.prototype.slice.call(arguments);\n            arguments.unshift(node);\n            oconnect.apply(this, arguments);\n            return node;\n        }\n    }\n\n    function dbToWAVolume(db) {\n        return Math.max(0, Math.round(100 * Math.pow(2, db / 6)) / 100);\n    }\n\n    function fmod(x, y) {\n        // http://kevin.vanzonneveld.net\n        // *     example 1: fmod(5.7, 1.3);\n        // *     returns 1: 0.5\n        var tmp, tmp2, p = 0,\n            pY = 0,\n            l = 0.0,\n            l2 = 0.0;\n\n        tmp = x.toExponential().match(/^.\\.?(.*)e(.+)$/);\n        p = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\n        tmp = y.toExponential().match(/^.\\.?(.*)e(.+)$/);\n        pY = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\n\n        if (pY > p) {\n            p = pY;\n        }\n\n        tmp2 = (x % y);\n\n        if (p < -100 || p > 20) {\n            // toFixed will give an out of bound error so we fix it like this:\n            l = Math.round(Math.log(tmp2) / Math.log(10));\n            l2 = Math.pow(10, l);\n\n            return (tmp2 / l2).toFixed(l - p) * l2;\n        } else {\n            return parseFloat(tmp2.toFixed(-p));\n        }\n    }\n\n    function sign(x) {\n        if (x === 0) {\n            return 1;\n        } else {\n            return Math.abs(x) / x;\n        }\n    }\n\n    function tanh(n) {\n        return (Math.exp(n) - Math.exp(-n)) / (Math.exp(n) + Math.exp(-n));\n    }\n\n    function initValue(userVal, defaultVal) {\n        return userVal === undefined ? defaultVal : userVal;\n    }\n\n    Tuna.prototype.Bitcrusher = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.bufferSize = properties.bufferSize || this.defaults.bufferSize.value;\n\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.processor = userContext.createScriptProcessor(this.bufferSize, 1, 1);\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.processor);\n        this.processor.connect(this.output);\n\n        var phaser = 0,\n            last = 0,\n            input, output, step, i, length;\n        this.processor.onaudioprocess = function(e) {\n            input = e.inputBuffer.getChannelData(0),\n            output = e.outputBuffer.getChannelData(0),\n            step = Math.pow(1 / 2, this.bits);\n            length = input.length;\n            for (i = 0; i < length; i++) {\n                phaser += this.normfreq;\n                if (phaser >= 1.0) {\n                    phaser -= 1.0;\n                    last = step * Math.floor(input[i] / step + 0.5);\n                }\n                output[i] = last;\n            }\n        };\n\n        this.bits = properties.bits || this.defaults.bits.value;\n        this.normfreq = initValue(properties.normfreq, this.defaults.normfreq.value);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Bitcrusher.prototype = Object.create(Super, {\n        name: {\n            value: \"Bitcrusher\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                bits: {\n                    value: 4,\n                    min: 1,\n                    max: 16,\n                    automatable: false,\n                    type: INT\n                },\n                bufferSize: {\n                    value: 4096,\n                    min: 256,\n                    max: 16384,\n                    automatable: false,\n                    type: INT\n                },\n                bypass: {\n                    value: true,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                normfreq: {\n                    value: 0.1,\n                    min: 0.0001,\n                    max: 1.0,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        bits: {\n            enumerable: true,\n            get: function() {\n                return this.processor.bits;\n            },\n            set: function(value) {\n                this.processor.bits = value;\n            }\n        },\n        normfreq: {\n            enumerable: true,\n            get: function() {\n                return this.processor.normfreq;\n            },\n            set: function(value) {\n                this.processor.normfreq = value;\n            }\n        }\n    });\n\n    Tuna.prototype.Cabinet = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.convolver = this.newConvolver(properties.impulsePath ||\n            \"../impulses/impulse_guitar.wav\");\n        this.makeupNode = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.convolver.input);\n        this.convolver.output.connect(this.makeupNode);\n        this.makeupNode.connect(this.output);\n\n        this.makeupGain = initValue(properties.makeupGain, this.defaults\n            .makeupGain);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Cabinet.prototype = Object.create(Super, {\n        name: {\n            value: \"Cabinet\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                makeupGain: {\n                    value: 1,\n                    min: 0,\n                    max: 20,\n                    automatable: true,\n                    type: FLOAT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        },\n        makeupGain: {\n            enumerable: true,\n            get: function() {\n                return this.makeupNode.gain;\n            },\n            set: function(value) {\n                this.makeupNode.gain.value = value;\n            }\n        },\n        newConvolver: {\n            value: function(impulsePath) {\n                return new userInstance.Convolver({\n                    impulse: impulsePath,\n                    dryLevel: 0,\n                    wetLevel: 1\n                });\n            }\n        }\n    });\n\n    Tuna.prototype.Chorus = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.attenuator = this.activateNode = userContext.createGain();\n        this.splitter = userContext.createChannelSplitter(2);\n        this.delayL = userContext.createDelay();\n        this.delayR = userContext.createDelay();\n        this.feedbackGainNodeLR = userContext.createGain();\n        this.feedbackGainNodeRL = userContext.createGain();\n        this.merger = userContext.createChannelMerger(2);\n        this.output = userContext.createGain();\n\n        this.lfoL = new userInstance.LFO({\n            target: this.delayL.delayTime,\n            callback: pipe\n        });\n        this.lfoR = new userInstance.LFO({\n            target: this.delayR.delayTime,\n            callback: pipe\n        });\n\n        this.input.connect(this.attenuator);\n        this.attenuator.connect(this.output);\n        this.attenuator.connect(this.splitter);\n        this.splitter.connect(this.delayL, 0);\n        this.splitter.connect(this.delayR, 1);\n        this.delayL.connect(this.feedbackGainNodeLR);\n        this.delayR.connect(this.feedbackGainNodeRL);\n        this.feedbackGainNodeLR.connect(this.delayR);\n        this.feedbackGainNodeRL.connect(this.delayL);\n        this.delayL.connect(this.merger, 0, 0);\n        this.delayR.connect(this.merger, 0, 1);\n        this.merger.connect(this.output);\n\n        this.feedback = initValue(properties.feedback, this.defaults.feedback\n            .value);\n        this.rate = initValue(properties.rate, this.defaults.rate.value);\n        this.delay = initValue(properties.delay, this.defaults.delay.value);\n        this.depth = initValue(properties.depth, this.defaults.depth.value);\n        this.lfoR.phase = Math.PI / 2;\n        this.attenuator.gain.value = 0.6934; // 1 / (10 ^ (((20 * log10(3)) / 3) / 20))\n        this.lfoL.activate(true);\n        this.lfoR.activate(true);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Chorus.prototype = Object.create(Super, {\n        name: {\n            value: \"Chorus\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                feedback: {\n                    value: 0.4,\n                    min: 0,\n                    max: 0.95,\n                    automatable: false,\n                    type: FLOAT\n                },\n                delay: {\n                    value: 0.0045,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                depth: {\n                    value: 0.7,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                rate: {\n                    value: 1.5,\n                    min: 0,\n                    max: 8,\n                    automatable: false,\n                    type: FLOAT\n                },\n                bypass: {\n                    value: true,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        },\n        delay: {\n            enumerable: true,\n            get: function() {\n                return this._delay;\n            },\n            set: function(value) {\n                this._delay = 0.0002 * (Math.pow(10, value) * 2);\n                this.lfoL.offset = this._delay;\n                this.lfoR.offset = this._delay;\n                this._depth = this._depth;\n            }\n        },\n        depth: {\n            enumerable: true,\n            get: function() {\n                return this._depth;\n            },\n            set: function(value) {\n                this._depth = value;\n                this.lfoL.oscillation = this._depth * this._delay;\n                this.lfoR.oscillation = this._depth * this._delay;\n            }\n        },\n        feedback: {\n            enumerable: true,\n            get: function() {\n                return this._feedback;\n            },\n            set: function(value) {\n                this._feedback = value;\n                this.feedbackGainNodeLR.gain.value = this._feedback;\n                this.feedbackGainNodeRL.gain.value = this._feedback;\n            }\n        },\n        rate: {\n            enumerable: true,\n            get: function() {\n                return this._rate;\n            },\n            set: function(value) {\n                this._rate = value;\n                this.lfoL.frequency = this._rate;\n                this.lfoR.frequency = this._rate;\n            }\n        }\n    });\n\n    Tuna.prototype.Compressor = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.compNode = this.activateNode = userContext.createDynamicsCompressor();\n        this.makeupNode = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.compNode.connect(this.makeupNode);\n        this.makeupNode.connect(this.output);\n\n        this.automakeup = initValue(properties.automakeup, this.defaults\n            .automakeup\n            .value);\n        this.makeupGain = properties.makeupGain || this.defaults.makeupGain\n            .value;\n        this.threshold = initValue(properties.threshold, this.defaults.threshold\n            .value);\n        this.release = properties.release || this.defaults.release.value;\n        this.attack = initValue(properties.attack, this.defaults.attack\n            .value);\n        this.ratio = properties.ratio || this.defaults.ratio.value;\n        this.knee = initValue(properties.knee, this.defaults.knee.value);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Compressor.prototype = Object.create(Super, {\n        name: {\n            value: \"Compressor\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                threshold: {\n                    value: -20,\n                    min: -60,\n                    max: 0,\n                    automatable: true,\n                    type: FLOAT\n                },\n                release: {\n                    value: 250,\n                    min: 10,\n                    max: 2000,\n                    automatable: true,\n                    type: FLOAT\n                },\n                makeupGain: {\n                    value: 1,\n                    min: 1,\n                    max: 100,\n                    automatable: true,\n                    type: FLOAT\n                },\n                attack: {\n                    value: 1,\n                    min: 0,\n                    max: 1000,\n                    automatable: true,\n                    type: FLOAT\n                },\n                ratio: {\n                    value: 4,\n                    min: 1,\n                    max: 50,\n                    automatable: true,\n                    type: FLOAT\n                },\n                knee: {\n                    value: 5,\n                    min: 0,\n                    max: 40,\n                    automatable: true,\n                    type: FLOAT\n                },\n                automakeup: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                bypass: {\n                    value: true,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        },\n        computeMakeup: {\n            value: function() {\n                var magicCoefficient = 4,\n                    // raise me if the output is too hot\n                    c = this.compNode;\n                return -(c.threshold.value - c.threshold.value /\n                        c.ratio.value) /\n                    magicCoefficient;\n            }\n        },\n        automakeup: {\n            enumerable: true,\n            get: function() {\n                return this._automakeup;\n            },\n            set: function(value) {\n                this._automakeup = value;\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\n            }\n        },\n        threshold: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.threshold;\n            },\n            set: function(value) {\n                this.compNode.threshold.value = value;\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\n            }\n        },\n        ratio: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.ratio;\n            },\n            set: function(value) {\n                this.compNode.ratio.value = value;\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\n            }\n        },\n        knee: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.knee;\n            },\n            set: function(value) {\n                this.compNode.knee.value = value;\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\n            }\n        },\n        attack: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.attack;\n            },\n            set: function(value) {\n                this.compNode.attack.value = value / 1000;\n            }\n        },\n        release: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.release;\n            },\n            set: function(value) {\n                this.compNode.release = value / 1000;\n            }\n        },\n        makeupGain: {\n            enumerable: true,\n            get: function() {\n                return this.makeupNode.gain;\n            },\n            set: function(value) {\n                this.makeupNode.gain.value = dbToWAVolume(value);\n            }\n        }\n    });\n\n    Tuna.prototype.Convolver = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.convolver = userContext.createConvolver();\n        this.dry = userContext.createGain();\n        this.filterLow = userContext.createBiquadFilter();\n        this.filterHigh = userContext.createBiquadFilter();\n        this.wet = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.filterLow);\n        this.activateNode.connect(this.dry);\n        this.filterLow.connect(this.filterHigh);\n        this.filterHigh.connect(this.convolver);\n        this.convolver.connect(this.wet);\n        this.wet.connect(this.output);\n        this.dry.connect(this.output);\n\n        this.dryLevel = initValue(properties.dryLevel, this.defaults.dryLevel\n            .value);\n        this.wetLevel = initValue(properties.wetLevel, this.defaults.wetLevel\n            .value);\n        this.highCut = properties.highCut || this.defaults.highCut.value;\n        this.buffer = properties.impulse ||\n            \"../impulses/ir_rev_short.wav\";\n        this.lowCut = properties.lowCut || this.defaults.lowCut.value;\n        this.level = initValue(properties.level, this.defaults.level.value);\n        this.filterHigh.type = \"lowpass\";\n        this.filterLow.type = \"highpass\";\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Convolver.prototype = Object.create(Super, {\n        name: {\n            value: \"Convolver\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                highCut: {\n                    value: 22050,\n                    min: 20,\n                    max: 22050,\n                    automatable: true,\n                    type: FLOAT\n                },\n                lowCut: {\n                    value: 20,\n                    min: 20,\n                    max: 22050,\n                    automatable: true,\n                    type: FLOAT\n                },\n                dryLevel: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                },\n                wetLevel: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                },\n                level: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                }\n            }\n        },\n        lowCut: {\n            get: function() {\n                return this.filterLow.frequency;\n            },\n            set: function(value) {\n                this.filterLow.frequency.value = value;\n            }\n        },\n        highCut: {\n            get: function() {\n                return this.filterHigh.frequency;\n            },\n            set: function(value) {\n                this.filterHigh.frequency.value = value;\n            }\n        },\n        level: {\n            get: function() {\n                return this.output.gain;\n            },\n            set: function(value) {\n                this.output.gain.value = value;\n            }\n        },\n        dryLevel: {\n            get: function() {\n                return this.dry.gain\n            },\n            set: function(value) {\n                this.dry.gain.value = value;\n            }\n        },\n        wetLevel: {\n            get: function() {\n                return this.wet.gain;\n            },\n            set: function(value) {\n                this.wet.gain.value = value;\n            }\n        },\n        buffer: {\n            enumerable: false,\n            get: function() {\n                return this.convolver.buffer;\n            },\n            set: function(impulse) {\n                var convolver = this.convolver,\n                    xhr = new XMLHttpRequest();\n                if (!impulse) {\n                    console.log(\"Tuna.Convolver.setBuffer: Missing impulse path!\");\n                    return;\n                }\n                xhr.open(\"GET\", impulse, true);\n                xhr.responseType = \"arraybuffer\";\n                xhr.onreadystatechange = function() {\n                    if (xhr.readyState === 4) {\n                        if (xhr.status < 300 && xhr.status > 199 || xhr.status === 302) {\n                            userContext.decodeAudioData(xhr.response, function(buffer) {\n                                convolver.buffer = buffer;\n                            }, function(e) {\n                                if (e) console.log(\"Tuna.Convolver.setBuffer: Error decoding data\" + e);\n                            });\n                        }\n                    }\n                };\n                xhr.send(null);\n            }\n        }\n    });\n\n    Tuna.prototype.Delay = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.dry = userContext.createGain();\n        this.wet = userContext.createGain();\n        this.filter = userContext.createBiquadFilter();\n        this.delay = userContext.createDelay();\n        this.feedbackNode = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.delay);\n        this.activateNode.connect(this.dry);\n        this.delay.connect(this.filter);\n        this.filter.connect(this.feedbackNode);\n        this.feedbackNode.connect(this.delay);\n        this.feedbackNode.connect(this.wet);\n        this.wet.connect(this.output);\n        this.dry.connect(this.output);\n\n        this.delayTime = properties.delayTime || this.defaults.delayTime.value;\n        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\n        this.wetLevel = initValue(properties.wetLevel, this.defaults.wetLevel.value);\n        this.dryLevel = initValue(properties.dryLevel, this.defaults.dryLevel.value);\n        this.cutoff = properties.cutoff || this.defaults.cutoff.value;\n        this.filter.type = \"lowpass\";\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Delay.prototype = Object.create(Super, {\n        name: {\n            value: \"Delay\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                delayTime: {\n                    value: 100,\n                    min: 20,\n                    max: 1000,\n                    automatable: false,\n                    type: FLOAT\n                },\n                feedback: {\n                    value: 0.45,\n                    min: 0,\n                    max: 0.9,\n                    automatable: true,\n                    type: FLOAT\n                },\n                cutoff: {\n                    value: 20000,\n                    min: 20,\n                    max: 20000,\n                    automatable: true,\n                    type: FLOAT\n                },\n                wetLevel: {\n                    value: 0.5,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                },\n                dryLevel: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                }\n            }\n        },\n        delayTime: {\n            enumerable: true,\n            get: function() {\n                return this.delay.delayTime;\n            },\n            set: function(value) {\n                this.delay.delayTime.value = value / 1000;\n            }\n        },\n        wetLevel: {\n            enumerable: true,\n            get: function() {\n                return this.wet.gain;\n            },\n            set: function(value) {\n                this.wet.gain.value = value;\n            }\n        },\n        dryLevel: {\n            enumerable: true,\n            get: function() {\n                return this.dry.gain;\n            },\n            set: function(value) {\n                this.dry.gain.value = value;\n            }\n        },\n        feedback: {\n            enumerable: true,\n            get: function() {\n                return this.feedbackNode.gain;\n            },\n            set: function(value) {\n                this.feedbackNode.gain.value = value;\n            }\n        },\n        cutoff: {\n            enumerable: true,\n            get: function() {\n                return this.filter.frequency;\n            },\n            set: function(value) {\n                this.filter.frequency.value = value;\n            }\n        }\n    });\n\n    Tuna.prototype.Filter = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.filter = userContext.createBiquadFilter();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.filter);\n        this.filter.connect(this.output);\n\n        this.frequency = properties.frequency || this.defaults.frequency\n            .value;\n        this.Q = properties.resonance || this.defaults.Q.value;\n        this.filterType = initValue(properties.filterType, this.defaults\n            .filterType\n            .value);\n        this.gain = initValue(properties.gain, this.defaults.gain.value);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Filter.prototype = Object.create(Super, {\n        name: {\n            value: \"Filter\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                frequency: {\n                    value: 800,\n                    min: 20,\n                    max: 22050,\n                    automatable: true,\n                    type: FLOAT\n                },\n                Q: {\n                    value: 1,\n                    min: 0.001,\n                    max: 100,\n                    automatable: true,\n                    type: FLOAT\n                },\n                gain: {\n                    value: 0,\n                    min: -40,\n                    max: 40,\n                    automatable: true,\n                    type: FLOAT\n                },\n                bypass: {\n                    value: true,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                filterType: {\n                    value: \"lowpass\",\n                    automatable: false,\n                    type: STRING\n                }\n            }\n        },\n        filterType: {\n            enumerable: true,\n            get: function() {\n                return this.filter.type;\n            },\n            set: function(value) {\n                this.filter.type = value;\n            }\n        },\n        Q: {\n            enumerable: true,\n            get: function() {\n                return this.filter.Q;\n            },\n            set: function(value) {\n                this.filter.Q.value = value;\n            }\n        },\n        gain: {\n            enumerable: true,\n            get: function() {\n                return this.filter.gain;\n            },\n            set: function(value) {\n                this.filter.gain.value = value;\n            }\n        },\n        frequency: {\n            enumerable: true,\n            get: function() {\n                return this.filter.frequency;\n            },\n            set: function(value) {\n                this.filter.frequency.value = value;\n            }\n        }\n    });\n\n    Tuna.prototype.MoogFilter = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.bufferSize = properties.bufferSize || this.defaults.bufferSize\n            .value;\n\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.processor = userContext.createScriptProcessor(this.bufferSize,\n            1,\n            1);\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.processor);\n        this.processor.connect(this.output);\n\n        var in1, in2, in3, in4, out1, out2, out3, out4;\n        in1 = in2 = in3 = in4 = out1 = out2 = out3 = out4 = 0.0;\n        var input, output, f, fb, i, length;\n        this.processor.onaudioprocess = function(e) {\n            input = e.inputBuffer.getChannelData(0),\n                output = e.outputBuffer.getChannelData(0),\n                f = this.cutoff * 1.16,\n                inputFactor = 0.35013 * (f * f) * (f * f);\n            fb = this.resonance * (1.0 - 0.15 * f * f);\n            length = input.length;\n            for (i = 0; i < length; i++) {\n                input[i] -= out4 * fb;\n                input[i] *= inputFactor;\n                out1 = input[i] + 0.3 * in1 + (1 - f) * out1; // Pole 1\n                in1 = input[i];\n                out2 = out1 + 0.3 * in2 + (1 - f) * out2; // Pole 2\n                in2 = out1;\n                out3 = out2 + 0.3 * in3 + (1 - f) * out3; // Pole 3\n                in3 = out2;\n                out4 = out3 + 0.3 * in4 + (1 - f) * out4; // Pole 4\n                in4 = out3;\n                output[i] = out4;\n            }\n        };\n\n        this.cutoff = initValue(properties.cutoff, this.defaults.cutoff\n            .value);\n        this.resonance = initValue(properties.resonance, this.defaults.resonance\n            .value);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.MoogFilter.prototype = Object.create(Super, {\n        name: {\n            value: \"MoogFilter\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                bufferSize: {\n                    value: 4096,\n                    min: 256,\n                    max: 16384,\n                    automatable: false,\n                    type: INT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                cutoff: {\n                    value: 0.065,\n                    min: 0.0001,\n                    max: 1.0,\n                    automatable: false,\n                    type: FLOAT\n                },\n                resonance: {\n                    value: 3.5,\n                    min: 0.0,\n                    max: 4.0,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        cutoff: {\n            enumerable: true,\n            get: function() {\n                return this.processor.cutoff;\n            },\n            set: function(value) {\n                this.processor.cutoff = value;\n            }\n        },\n        resonance: {\n            enumerable: true,\n            get: function() {\n                return this.processor.resonance;\n            },\n            set: function(value) {\n                this.processor.resonance = value;\n            }\n        }\n    });\n\n    Tuna.prototype.Overdrive = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.inputDrive = userContext.createGain();\n        this.waveshaper = userContext.createWaveShaper();\n        this.outputDrive = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.inputDrive);\n        this.inputDrive.connect(this.waveshaper);\n        this.waveshaper.connect(this.outputDrive);\n        this.outputDrive.connect(this.output);\n\n        this.ws_table = new Float32Array(this.k_nSamples);\n        this.drive = initValue(properties.drive, this.defaults.drive.value);\n        this.outputGain = initValue(properties.outputGain, this.defaults\n            .outputGain\n            .value);\n        this.curveAmount = initValue(properties.curveAmount, this.defaults\n            .curveAmount\n            .value);\n        this.algorithmIndex = initValue(properties.algorithmIndex, this\n            .defaults\n            .algorithmIndex.value);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Overdrive.prototype = Object.create(Super, {\n        name: {\n            value: \"Overdrive\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                drive: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT,\n                    scaled: true\n                },\n                outputGain: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT,\n                    scaled: true\n                },\n                curveAmount: {\n                    value: 0.725,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                algorithmIndex: {\n                    value: 0,\n                    min: 0,\n                    max: 5,\n                    automatable: false,\n                    type: INT\n                }\n            }\n        },\n        k_nSamples: {\n            value: 8192\n        },\n        drive: {\n            get: function() {\n                return this.inputDrive.gain;\n            },\n            set: function(value) {\n                this._drive = value;\n            }\n        },\n        curveAmount: {\n            get: function() {\n                return this._curveAmount;\n            },\n            set: function(value) {\n                this._curveAmount = value;\n                if (this._algorithmIndex === undefined) {\n                    this._algorithmIndex = 0;\n                }\n                this.waveshaperAlgorithms[this._algorithmIndex]\n                    (this._curveAmount,\n                        this.k_nSamples, this.ws_table);\n                this.waveshaper.curve = this.ws_table;\n            }\n        },\n        outputGain: {\n            get: function() {\n                return this.outputDrive.gain;\n            },\n            set: function(value) {\n                this._outputGain = dbToWAVolume(value);\n            }\n        },\n        algorithmIndex: {\n            get: function() {\n                return this._algorithmIndex;\n            },\n            set: function(value) {\n                this._algorithmIndex = value;\n                this.curveAmount = this._curveAmount;\n            }\n        },\n        waveshaperAlgorithms: {\n            value: [\n                function(amount, n_samples, ws_table) {\n                    amount = Math.min(amount, 0.9999);\n                    var k = 2 * amount / (1 - amount),\n                        i, x;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        ws_table[i] = (1 + k) * x / (1 + k * Math.abs(x));\n                    }\n                },\n                function(amount, n_samples, ws_table) {\n                    var i, x, y;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        y = ((0.5 * Math.pow((x + 1.4), 2)) - 1) * y >= 0 ? 5.8 : 1.2;\n                        ws_table[i] = tanh(y);\n                    }\n                },\n                function(amount, n_samples, ws_table) {\n                    var i, x, y, a = 1 - amount;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        y = x < 0 ? -Math.pow(Math.abs(x), a + 0.04) : Math.pow(x, a);\n                        ws_table[i] = tanh(y * 2);\n                    }\n                },\n                function(amount, n_samples, ws_table) {\n                    var i, x, y, abx, a = 1 - amount > 0.99 ? 0.99 : 1 - amount;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        abx = Math.abs(x);\n                        if (abx < a) y = abx;\n                        else if (abx > a) y = a + (abx - a) / (1 + Math.pow((abx - a) / (1 - a), 2));\n                        else if (abx > 1) y = abx;\n                        ws_table[i] = sign(x) * y * (1 / ((a + 1) / 2));\n                    }\n                },\n                function(amount, n_samples, ws_table) { // fixed curve, amount doesn't do anything, the distortion is just from the drive\n                    var i, x;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        if (x < -0.08905) {\n                            ws_table[i] = (-3 / 4) * (1 - (Math.pow((1 - (Math.abs(x) - 0.032857)), 12)) + (1 / 3) * (Math.abs(x) -\n                                0.032847)) + 0.01;\n                        } else if (x >= -0.08905 && x < 0.320018) {\n                            ws_table[i] = (-6.153 * (x * x)) + 3.9375 * x;\n                        } else {\n                            ws_table[i] = 0.630035;\n                        }\n                    }\n                },\n                function(amount, n_samples, ws_table) {\n                    var a = 2 + Math.round(amount * 14),\n                        // we go from 2 to 16 bits, keep in mind for the UI\n                        bits = Math.round(Math.pow(2, a - 1)),\n                        // real number of quantization steps divided by 2\n                        i, x;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        ws_table[i] = Math.round(x * bits) / bits;\n                    }\n                }\n            ]\n        }\n    });\n\n    Tuna.prototype.Phaser = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.splitter = this.activateNode = userContext.createChannelSplitter(2);\n        this.filtersL = [];\n        this.filtersR = [];\n        this.feedbackGainNodeL = userContext.createGain();\n        this.feedbackGainNodeR = userContext.createGain();\n        this.merger = userContext.createChannelMerger(2);\n        this.filteredSignal = userContext.createGain();\n        this.output = userContext.createGain();\n        this.lfoL = new userInstance.LFO({\n            target: this.filtersL,\n            callback: this.callback\n        });\n        this.lfoR = new userInstance.LFO({\n            target: this.filtersR,\n            callback: this.callback\n        });\n\n        var i = this.stage;\n        while (i--) {\n            this.filtersL[i] = userContext.createBiquadFilter();\n            this.filtersR[i] = userContext.createBiquadFilter();\n            this.filtersL[i].type = \"allpass\";\n            this.filtersR[i].type = \"allpass\";\n        }\n        this.input.connect(this.splitter);\n        this.input.connect(this.output);\n        this.splitter.connect(this.filtersL[0], 0, 0);\n        this.splitter.connect(this.filtersR[0], 1, 0);\n        this.connectInOrder(this.filtersL);\n        this.connectInOrder(this.filtersR);\n        this.filtersL[this.stage - 1].connect(this.feedbackGainNodeL);\n        this.filtersL[this.stage - 1].connect(this.merger, 0, 0);\n        this.filtersR[this.stage - 1].connect(this.feedbackGainNodeR);\n        this.filtersR[this.stage - 1].connect(this.merger, 0, 1);\n        this.feedbackGainNodeL.connect(this.filtersL[0]);\n        this.feedbackGainNodeR.connect(this.filtersR[0]);\n        this.merger.connect(this.output);\n\n        this.rate = initValue(properties.rate, this.defaults.rate.value);\n        this.baseModulationFrequency = properties.baseModulationFrequency || this.defaults.baseModulationFrequency.value;\n        this.depth = initValue(properties.depth, this.defaults.depth.value);\n        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\n        this.stereoPhase = initValue(properties.stereoPhase, this.defaults.stereoPhase.value);\n\n        this.lfoL.activate(true);\n        this.lfoR.activate(true);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Phaser.prototype = Object.create(Super, {\n        name: {\n            value: \"Phaser\"\n        },\n        stage: {\n            value: 4\n        },\n        defaults: {\n            writable: true,\n            value: {\n                rate: {\n                    value: 0.1,\n                    min: 0,\n                    max: 8,\n                    automatable: false,\n                    type: FLOAT\n                },\n                depth: {\n                    value: 0.6,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                feedback: {\n                    value: 0.7,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                stereoPhase: {\n                    value: 40,\n                    min: 0,\n                    max: 180,\n                    automatable: false,\n                    type: FLOAT\n                },\n                baseModulationFrequency: {\n                    value: 700,\n                    min: 500,\n                    max: 1500,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        callback: {\n            value: function(filters, value) {\n                for (var stage = 0; stage < 4; stage++) {\n                    filters[stage].frequency.value = value;\n                }\n            }\n        },\n        depth: {\n            get: function() {\n                return this._depth;\n            },\n            set: function(value) {\n                this._depth = value;\n                this.lfoL.oscillation = this._baseModulationFrequency * this._depth;\n                this.lfoR.oscillation = this._baseModulationFrequency * this._depth;\n            }\n        },\n        rate: {\n            get: function() {\n                return this._rate;\n            },\n            set: function(value) {\n                this._rate = value;\n                this.lfoL.frequency = this._rate;\n                this.lfoR.frequency = this._rate;\n            }\n        },\n        baseModulationFrequency: {\n            enumerable: true,\n            get: function() {\n                return this._baseModulationFrequency;\n            },\n            set: function(value) {\n                this._baseModulationFrequency = value;\n                this.lfoL.offset = this._baseModulationFrequency;\n                this.lfoR.offset = this._baseModulationFrequency;\n                this._depth = this._depth;\n            }\n        },\n        feedback: {\n            get: function() {\n                return this._feedback;\n            },\n            set: function(value) {\n                this._feedback = value;\n                this.feedbackGainNodeL.gain.value = this._feedback;\n                this.feedbackGainNodeR.gain.value = this._feedback;\n            }\n        },\n        stereoPhase: {\n            get: function() {\n                return this._stereoPhase;\n            },\n            set: function(value) {\n                this._stereoPhase = value;\n                var newPhase = this.lfoL._phase + this._stereoPhase *\n                    Math.PI /\n                    180;\n                newPhase = fmod(newPhase, 2 * Math.PI);\n                this.lfoR._phase = newPhase;\n            }\n        }\n    });\n\n    Tuna.prototype.PingPongDelay = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.wetLevel = userContext.createGain();\n        this.stereoToMonoMix = userContext.createGain();\n        this.feedbackLevel = userContext.createGain();\n        this.output = userContext.createGain();\n        this.delayLeft = userContext.createDelay();\n        this.delayRight = userContext.createDelay();\n\n        this.activateNode = userContext.createGain();\n        this.splitter = userContext.createChannelSplitter(2);\n        this.merger = userContext.createChannelMerger(2);\n\n        this.activateNode.connect(this.splitter);\n        this.splitter.connect(this.stereoToMonoMix, 0, 0);\n        this.splitter.connect(this.stereoToMonoMix, 1, 0);\n        this.stereoToMonoMix.gain.value = .5;\n        this.stereoToMonoMix.connect(this.wetLevel);\n        this.wetLevel.connect(this.delayLeft);\n        this.feedbackLevel.connect(this.delayLeft);\n        this.delayLeft.connect(this.delayRight);\n        this.delayRight.connect(this.feedbackLevel);\n        this.delayLeft.connect(this.merger, 0, 0);\n        this.delayRight.connect(this.merger, 0, 1);\n        this.merger.connect(this.output);\n        this.activateNode.connect(this.output);\n\n        this.delayTimeLeft = properties.delayTimeLeft !== undefined ? properties.delayTimeLeft : this.defaults.delayTimeLeft.value;\n        this.delayTimeRight = properties.delayTimeRight !== undefined ? properties.delayTimeRight : this.defaults.delayTimeRight.value;\n        this.feedbackLevel.gain.value = properties.feedback !== undefined ? properties.feedback : this.defaults.feedback.value;\n        this.wetLevel.gain.value = properties.wetLevel !== undefined ? properties.wetLevel : this.defaults.wetLevel.value;\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.PingPongDelay.prototype = Object.create(Super, {\n        name: {\n            value: \"PingPongDelay\"\n        },\n        delayTimeLeft: {\n            enumerable: true,\n            get: function() {\n                return this._delayTimeLeft;\n            },\n            set: function(value) {\n                this._delayTimeLeft = value;\n                this.delayLeft.delayTime.value = value / 1000;\n            }\n        },\n        delayTimeRight: {\n            enumerable: true,\n            get: function() {\n                return this._delayTimeRight;\n            },\n            set: function(value) {\n                this._delayTimeRight = value;\n                this.delayRight.delayTime.value = value / 1000;\n            }\n        },\n        defaults: {\n            writable: true,\n            value: {\n                delayTimeLeft: {\n                    value: 200,\n                    min: 1,\n                    max: 10000,\n                    automatable: false,\n                    type: INT\n                },\n                delayTimeRight: {\n                    value: 400,\n                    min: 1,\n                    max: 10000,\n                    automatable: false,\n                    type: INT\n                },\n                feedback: {\n                    value: 0.3,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                wetLevel: {\n                    value: 0.5,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        }\n    });\n\n    Tuna.prototype.Tremolo = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.splitter = this.activateNode = userContext.createChannelSplitter(\n                2),\n            this.amplitudeL = userContext.createGain(), this.amplitudeR =\n            userContext.createGain(), this.merger = userContext.createChannelMerger(\n                2), this.output = userContext.createGain();\n        this.lfoL = new userInstance.LFO({\n            target: this.amplitudeL.gain,\n            callback: pipe\n        });\n        this.lfoR = new userInstance.LFO({\n            target: this.amplitudeR.gain,\n            callback: pipe\n        });\n\n        this.input.connect(this.splitter);\n        this.splitter.connect(this.amplitudeL, 0);\n        this.splitter.connect(this.amplitudeR, 1);\n        this.amplitudeL.connect(this.merger, 0, 0);\n        this.amplitudeR.connect(this.merger, 0, 1);\n        this.merger.connect(this.output);\n\n        this.rate = properties.rate || this.defaults.rate.value;\n        this.intensity = initValue(properties.intensity, this.defaults.intensity\n            .value);\n        this.stereoPhase = initValue(properties.stereoPhase, this.defaults\n            .stereoPhase\n            .value);\n\n        this.lfoL.offset = 1 - (this.intensity / 2);\n        this.lfoR.offset = 1 - (this.intensity / 2);\n        this.lfoL.phase = this.stereoPhase * Math.PI / 180;\n\n        this.lfoL.activate(true);\n        this.lfoR.activate(true);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Tremolo.prototype = Object.create(Super, {\n        name: {\n            value: \"Tremolo\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                intensity: {\n                    value: 0.3,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                stereoPhase: {\n                    value: 0,\n                    min: 0,\n                    max: 180,\n                    automatable: false,\n                    type: FLOAT\n                },\n                rate: {\n                    value: 5,\n                    min: 0.1,\n                    max: 11,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        intensity: {\n            enumerable: true,\n            get: function() {\n                return this._intensity;\n            },\n            set: function(value) {\n                this._intensity = value;\n                this.lfoL.offset = 1 - this._intensity / 2;\n                this.lfoR.offset = 1 - this._intensity / 2;\n                this.lfoL.oscillation = this._intensity;\n                this.lfoR.oscillation = this._intensity;\n            }\n        },\n        rate: {\n            enumerable: true,\n            get: function() {\n                return this._rate;\n            },\n            set: function(value) {\n                this._rate = value;\n                this.lfoL.frequency = this._rate;\n                this.lfoR.frequency = this._rate;\n            }\n        },\n        stereoPhase: {\n            enumerable: true,\n            get: function() {\n                return this._rate;\n            },\n            set: function(value) {\n                this._stereoPhase = value;\n                var newPhase = this.lfoL._phase + this._stereoPhase *\n                    Math.PI /\n                    180;\n                newPhase = fmod(newPhase, 2 * Math.PI);\n                this.lfoR.phase = newPhase;\n            }\n        }\n    });\n\n    Tuna.prototype.WahWah = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.envelopeFollower = new userInstance.EnvelopeFollower({\n            target: this,\n            callback: function(context, value) {\n                context.sweep = value;\n            }\n        });\n        this.filterBp = userContext.createBiquadFilter();\n        this.filterPeaking = userContext.createBiquadFilter();\n        this.output = userContext.createGain();\n\n        //Connect AudioNodes\n        this.activateNode.connect(this.filterBp);\n        this.filterBp.connect(this.filterPeaking);\n        this.filterPeaking.connect(this.output);\n\n        //Set Properties\n        this.init();\n        this.automode = initValue(properties.enableAutoMode, this.defaults\n            .automode\n            .value);\n        this.resonance = properties.resonance || this.defaults.resonance\n            .value;\n        this.sensitivity = initValue(properties.sensitivity, this.defaults\n            .sensitivity\n            .value);\n        this.baseFrequency = initValue(properties.baseFrequency, this.defaults\n            .baseFrequency\n            .value);\n        this.excursionOctaves = properties.excursionOctaves || this.defaults\n            .excursionOctaves\n            .value;\n        this.sweep = initValue(properties.sweep, this.defaults.sweep.value);\n\n        this.activateNode.gain.value = 2;\n        this.envelopeFollower.activate(true);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.WahWah.prototype = Object.create(Super, {\n        name: {\n            value: \"WahWah\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                automode: {\n                    value: true,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                baseFrequency: {\n                    value: 0.5,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                excursionOctaves: {\n                    value: 2,\n                    min: 1,\n                    max: 6,\n                    automatable: false,\n                    type: FLOAT\n                },\n                sweep: {\n                    value: 0.2,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                resonance: {\n                    value: 10,\n                    min: 1,\n                    max: 100,\n                    automatable: false,\n                    type: FLOAT\n                },\n                sensitivity: {\n                    value: 0.5,\n                    min: -1,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        activateCallback: {\n            value: function(value) {\n                this.automode = value;\n            }\n        },\n        automode: {\n            get: function() {\n                return this._automode;\n            },\n            set: function(value) {\n                this._automode = value;\n                if (value) {\n                    this.activateNode.connect(this.envelopeFollower.input);\n                    this.envelopeFollower.activate(true);\n                } else {\n                    this.envelopeFollower.activate(false);\n                    this.activateNode.disconnect();\n                    this.activateNode.connect(this.filterBp);\n                }\n            }\n        },\n        filterFreqTimeout: {\n            value: 0\n        },\n        setFilterFreq: {\n            value: function() {\n                try {\n                    this.filterBp.frequency.value = this._baseFrequency + this._excursionFrequency * this._sweep;\n                    this.filterPeaking.frequency.value = this._baseFrequency + this._excursionFrequency * this._sweep;\n                } catch (e) {\n                    clearTimeout(this.filterFreqTimeout);\n                    //put on the next cycle to let all init properties be set\n                    this.filterFreqTimeout = setTimeout(function() {\n                        this.setFilterFreq();\n                    }.bind(this), 0);\n                }\n            }\n        },\n        sweep: {\n            enumerable: true,\n            get: function() {\n                return this._sweep.value;\n            },\n            set: function(value) {\n                this._sweep = Math.pow(value > 1 ? 1 : value <\n                    0 ? 0 :\n                    value,\n                    this._sensitivity);\n                this.setFilterFreq();\n            }\n        },\n        baseFrequency: {\n            enumerable: true,\n            get: function() {\n                return this._baseFrequency;\n            },\n            set: function(value) {\n                this._baseFrequency = 50 * Math.pow(10, value *\n                    2);\n                this._excursionFrequency = Math.min(userContext\n                    .sampleRate /\n                    2,\n                    this.baseFrequency * Math.pow(2, this._excursionOctaves)\n                );\n                this.setFilterFreq();\n            }\n        },\n        excursionOctaves: {\n            enumerable: true,\n            get: function() {\n                return this._excursionOctaves;\n            },\n            set: function(value) {\n                this._excursionOctaves = value;\n                this._excursionFrequency = Math.min(userContext\n                    .sampleRate /\n                    2,\n                    this.baseFrequency * Math.pow(2, this._excursionOctaves)\n                );\n                this.setFilterFreq();\n            }\n        },\n        sensitivity: {\n            enumerable: true,\n            get: function() {\n                return this._sensitivity;\n            },\n            set: function(value) {\n                this._sensitivity = Math.pow(10, value);\n            }\n        },\n        resonance: {\n            enumerable: true,\n            get: function() {\n                return this._resonance;\n            },\n            set: function(value) {\n                this._resonance = value;\n                this.filterPeaking.Q = this._resonance;\n            }\n        },\n        init: {\n            value: function() {\n                this.output.gain.value = 1;\n                this.filterPeaking.type = \"peaking\";\n                this.filterBp.type = \"bandpass\";\n                this.filterPeaking.frequency.value = 100;\n                this.filterPeaking.gain.value = 20;\n                this.filterPeaking.Q.value = 5;\n                this.filterBp.frequency.value = 100;\n                this.filterBp.Q.value = 1;\n            }\n        }\n    });\n\n    Tuna.prototype.EnvelopeFollower = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.jsNode = this.output = userContext.createScriptProcessor(\n            this.buffersize,\n            1, 1);\n\n        this.input.connect(this.output);\n\n        this.attackTime = initValue(properties.attackTime, this.defaults\n            .attackTime\n            .value);\n        this.releaseTime = initValue(properties.releaseTime, this.defaults\n            .releaseTime\n            .value);\n        this._envelope = 0;\n        this.target = properties.target || {};\n        this.callback = properties.callback || function() {};\n    };\n    Tuna.prototype.EnvelopeFollower.prototype = Object.create(Super, {\n        name: {\n            value: \"EnvelopeFollower\"\n        },\n        defaults: {\n            value: {\n                attackTime: {\n                    value: 0.003,\n                    min: 0,\n                    max: 0.5,\n                    automatable: false,\n                    type: FLOAT\n                },\n                releaseTime: {\n                    value: 0.5,\n                    min: 0,\n                    max: 0.5,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        buffersize: {\n            value: 256\n        },\n        envelope: {\n            value: 0\n        },\n        sampleRate: {\n            value: 44100\n        },\n        attackTime: {\n            enumerable: true,\n            get: function() {\n                return this._attackTime;\n            },\n            set: function(value) {\n                this._attackTime = value;\n                this._attackC = Math.exp(-1 / this._attackTime *\n                    this.sampleRate /\n                    this.buffersize);\n            }\n        },\n        releaseTime: {\n            enumerable: true,\n            get: function() {\n                return this._releaseTime;\n            },\n            set: function(value) {\n                this._releaseTime = value;\n                this._releaseC = Math.exp(-1 / this._releaseTime *\n                    this.sampleRate /\n                    this.buffersize);\n            }\n        },\n        callback: {\n            get: function() {\n                return this._callback;\n            },\n            set: function(value) {\n                if (typeof value === \"function\") {\n                    this._callback = value;\n                } else {\n                    console.error(\"tuna.js: \" + this.name +\n                        \": Callback must be a function!\");\n                }\n            }\n        },\n        target: {\n            get: function() {\n                return this._target;\n            },\n            set: function(value) {\n                this._target = value;\n            }\n        },\n        activate: {\n            value: function(doActivate) {\n                this.activated = doActivate;\n                if (doActivate) {\n                    this.jsNode.connect(userContext.destination);\n                    this.jsNode.onaudioprocess = this.returnCompute(\n                        this);\n                } else {\n                    this.jsNode.disconnect();\n                    this.jsNode.onaudioprocess = null;\n                }\n            }\n        },\n        returnCompute: {\n            value: function(instance) {\n                return function(event) {\n                    instance.compute(event);\n                };\n            }\n        },\n        compute: {\n            value: function(event) {\n                var count = event.inputBuffer.getChannelData(0)\n                    .length,\n                    channels = event.inputBuffer.numberOfChannels,\n                    current, chan, rms, i;\n                chan = rms = i = 0;\n                if (channels > 1) { //need to mixdown\n                    for (i = 0; i < count; ++i) {\n                        for (; chan < channels; ++chan) {\n                            current = event.inputBuffer.getChannelData(chan)[i];\n                            rms += (current * current) / channels;\n                        }\n                    }\n                } else {\n                    for (i = 0; i < count; ++i) {\n                        current = event.inputBuffer.getChannelData(0)[i];\n                        rms += (current * current);\n                    }\n                }\n                rms = Math.sqrt(rms);\n\n                if (this._envelope < rms) {\n                    this._envelope *= this._attackC;\n                    this._envelope += (1 - this._attackC) * rms;\n                } else {\n                    this._envelope *= this._releaseC;\n                    this._envelope += (1 - this._releaseC) *\n                        rms;\n                }\n                this._callback(this._target, this._envelope);\n            }\n        }\n    });\n\n    Tuna.prototype.LFO = function(properties) {\n        //Instantiate AudioNode\n        this.output = userContext.createScriptProcessor(256, 1, 1);\n        this.activateNode = userContext.destination;\n\n        //Set Properties\n        this.frequency = initValue(properties.frequency, this.defaults.frequency\n            .value);\n        this.offset = initValue(properties.offset, this.defaults.offset.value);\n        this.oscillation = initValue(properties.oscillation, this.defaults\n            .oscillation\n            .value);\n        this.phase = initValue(properties.phase, this.defaults.phase.value);\n        this.target = properties.target || {};\n        this.output.onaudioprocess = this.callback(properties.callback ||\n            function() {});\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.LFO.prototype = Object.create(Super, {\n        name: {\n            value: \"LFO\"\n        },\n        bufferSize: {\n            value: 256\n        },\n        sampleRate: {\n            value: 44100\n        },\n        defaults: {\n            value: {\n                frequency: {\n                    value: 1,\n                    min: 0,\n                    max: 20,\n                    automatable: false,\n                    type: FLOAT\n                },\n                offset: {\n                    value: 0.85,\n                    min: 0,\n                    max: 22049,\n                    automatable: false,\n                    type: FLOAT\n                },\n                oscillation: {\n                    value: 0.3,\n                    min: -22050,\n                    max: 22050,\n                    automatable: false,\n                    type: FLOAT\n                },\n                phase: {\n                    value: 0,\n                    min: 0,\n                    max: 2 * Math.PI,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        frequency: {\n            get: function() {\n                return this._frequency;\n            },\n            set: function(value) {\n                this._frequency = value;\n                this._phaseInc = 2 * Math.PI * this._frequency *\n                    this.bufferSize /\n                    this.sampleRate;\n            }\n        },\n        offset: {\n            get: function() {\n                return this._offset;\n            },\n            set: function(value) {\n                this._offset = value;\n            }\n        },\n        oscillation: {\n            get: function() {\n                return this._oscillation;\n            },\n            set: function(value) {\n                this._oscillation = value;\n            }\n        },\n        phase: {\n            get: function() {\n                return this._phase;\n            },\n            set: function(value) {\n                this._phase = value;\n            }\n        },\n        target: {\n            get: function() {\n                return this._target;\n            },\n            set: function(value) {\n                this._target = value;\n            }\n        },\n        activate: {\n            value: function(doActivate) {\n                if (!doActivate) {\n                    this.output.disconnect(userContext.destination);\n                } else {\n                    this.output.connect(userContext.destination);\n                }\n            }\n        },\n        callback: {\n            value: function(callback) {\n                var that = this;\n                return function() {\n                    that._phase += that._phaseInc;\n                    if (that._phase > 2 * Math.PI) {\n                        that._phase = 0;\n                    }\n                    callback(that._target, that._offset +\n                        that._oscillation *\n                        Math.sin(that._phase));\n                };\n            }\n        }\n    });\n\n    Tuna.toString = Tuna.prototype.toString = function() {\n        return \"Please visit https://github.com/Theodeus/tuna/wiki for instructions on how to use Tuna.js\";\n    };\n})(this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/tunajs/tuna.js\n ** module id = 41\n ** module chunks = 0 1\n **/"],"sourceRoot":""}