{"version":3,"sources":["webpack:///webpack/bootstrap 2fe8b77f25fe2cd1119a","webpack:///./lib/index.js","webpack:///./lib/src/core/Constants.js","webpack:///./lib/src/core/Effect.js","webpack:///./lib/src/core/Module.js","webpack:///./lib/src/core/SoundSource.js","webpack:///./lib/src/modules/index.js","webpack:///./lib/src/properties/index.js","webpack:///./lib/WebSynth.js","webpack:///./lib/src/Synth.js","webpack:///./lib/src/core/EffectManager.js","webpack:///./lib/src/core/Voice.js","webpack:///./lib/src/modules/Effects/Bitcrusher.js","webpack:///./lib/src/modules/Effects/Delay.js","webpack:///./lib/src/modules/Effects/Filter.js","webpack:///./lib/src/modules/Effects/MoogFilter.js","webpack:///./lib/src/modules/Effects/Overdrive.js","webpack:///./lib/src/modules/Effects/PingPongDelay.js","webpack:///./lib/src/modules/Effects/Tremolo.js","webpack:///./lib/src/modules/Envelope.js","webpack:///./lib/src/modules/Master.js","webpack:///./lib/src/modules/Pan.js","webpack:///./lib/src/modules/SoundSources/Modulator.js","webpack:///./lib/src/modules/SoundSources/Noise.js","webpack:///./lib/src/modules/SoundSources/Oscillator.js","webpack:///./lib/src/properties/BitcrusherProps.js","webpack:///./lib/src/properties/DefaultProps.js","webpack:///./lib/src/properties/DelayProps.js","webpack:///./lib/src/properties/EnvelopeProps.js","webpack:///./lib/src/properties/FilterProps.js","webpack:///./lib/src/properties/ModulatorProps.js","webpack:///./lib/src/properties/MoogFilterProps.js","webpack:///./lib/src/properties/NoiseProps.js","webpack:///./lib/src/properties/OscillatorProps.js","webpack:///./lib/src/properties/OverdriveProps.js","webpack:///./lib/src/properties/PanProps.js","webpack:///./lib/src/properties/PingPongDelayProps.js","webpack:///./lib/src/properties/TremoloProps.js","webpack:///./~/stereo-panner-shim/lib/stereo-panner-shim.js","webpack:///./~/stereo-panner-shim/~/stereo-panner-node/lib/curve.js","webpack:///./~/stereo-panner-shim/~/stereo-panner-node/lib/stereo-panner-impl.js","webpack:///./~/stereo-panner-shim/~/stereo-panner-node/lib/stereo-panner-node.js","webpack:///./~/tunajs/tuna.js"],"names":["win","window","WebSynth","TYPES","MASTER","OSCILLATOR","NOISE","MODULATOR","ENVELOPE","PAN","FILTER","DELAY","PINGPONGDELAY","TREMOLO","OVERDRIVE","BITCRUSHER","MOOGFILTER","CONST","ADSR","NOISE_WHITE","NOISE_PINK","NOISE_BROWN","WAVE_SINE","WAVE_SQUARE","WAVE_SAWTOOTH","WAVE_TRIANLGE","WAVE_CUSTOM","FILTER_LOWPASS","FILTER_HIGHPASS","FILTER_BANDPASS","FILTER_LOWSHELF","FILTER_HIGHSHELF","FILTER_PEAKING","FILTER_NOTCH","FILTER_ALLPASS","MODULATOR_TARGET_FREQ","MODULATOR_TARGET_DETUNE","ENVELOPE_TARGET_GAIN","ENVELOPE_TARGET_FREQ","ENVELOPE_TARGET_DETUNE","Effect","audioContext","props","name","main","mainEffect","setMainEffect","type","effectManager","setMainProperties","Object","keys","forEach","e","createGain","getLineIn","sourceType","source","target","input","getLineOut","output","getEnvelopeTarget","ret","gain","filter","Props","Module","envelope","setupProperties","level","toString","properties","propsHandler","specificProps","moduleProperties","DefaultProps","setProperty","getRealProperties","propName","updateProperties","realProp","p","l","value","undefined","propKey","propVal","propConfig","defaultValue","connect","disconnect","SoundSource","defaultLineInProperty","setDetune","detune","noteOn","start","noteOff","release","stop","default","Modules","notes","methods","synth","isPlaying","getModules","modulesConfig","create","id","currentModule","Error","module","update","master","adsr","destroy","destroyModule","play","frequency","link","getModuleProperties","moduleType","moduleProps","map","prop","describeModules","reduce","result","getFrequency","note","octave","octaveD","parseInt","noteD","indexOf","delta","exp","freq","Math","pow","parseFloat","toFixed","getNotes","Synth","voices","spectrum","updateSpectrum","resetSpectrum","analyser","javascriptNode","createGainNode","createDelayNode","createDelay","createSpectrum","attack","decay","sustain","SMOOTHING","FFT_SIZE","createScriptProcessor","destination","createAnalyser","smoothingTimeConstant","fftSize","minDecibels","maxDecibels","label","constructor","String","addModule","updateModule","removeModule","frequencyData","freqBufferLength","frequencyBinCount","Uint8Array","onaudioprocess","getByteFrequencyData","length","EffectManager","Voice","modules","soundSources","setupModules","linkModules","modConf","m","mod","instance","push","moduleId","currentModuleType","destinationModule","dest","lineOut","setEnvelope","setNote","getReleaseTime","resetEnvelope","Bitcrusher","bits","normfreq","bufferSize","Delay","dryLevel","dry","wetLevel","wet","feedback","cutoff","delayTime","bypass","Filter","Q","q","filterGain","filterType","MoogFilter","resonance","Overdrive","outputGain","drive","curveAmount","algorithmIndex","PingPongDelay","delayTimeLeft","delayTimeRight","Tremolo","intensity","rate","stereoPhase","Envelope","now","currentTime","attackLevel","sustainLevel","attackEnd","t","setValueAtTime","linearRampToValueAtTime","setTargetAtTime","cancelScheduledValues","Master","Pan","createStereoPanner","pan","Modulator","createOscillator","wave","f","Noise","createBufferSource","setColor","color","buffer","white","pink","brown","noiseBuffer","getNoiseBuffer","getBufferSize","getChannelData","i","random","b0","b1","b2","b3","b4","b5","b6","lastOut","sampleRate","createBuffer","loop","Oscillator","BitcrusherProps","bounds","step","DelayProps","EnvelopeProps","FilterProps","ModulatorProps","MoogFilterProps","NoiseProps","OscillatorProps","OverdriveProps","PanProps","PingPongDelayProps","TremoloProps"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;ACtCA;;AACA;;;;;;AAEA,KAAMA,MAAMC,UAAU,EAAtB;AACAD,KAAIE,QAAJ;;;;;;;;ACJA;;;AAEA,KAAMC,QAAQ;AACNC,aAAQ,QADF;AAENC,iBAAY,YAFN;AAGNC,YAAO,OAHD;AAINC,gBAAW,WAJL;AAKNC,eAAU,UALJ;AAMNC,UAAK,KANC;AAONC,aAAQ,QAPF;AAQNC,YAAO,OARD;AASNC,oBAAe,eATT;AAUNC,cAAS,SAVH;AAWNC,gBAAW,WAXL;AAYNC,iBAAY,YAZN;AAaNC,iBAAY;AAbN,EAAd;AAAA,KAeIC,QAAQ;AACJb,aAAQ,QADJ;AAEJc,WAAM,MAFF;;AAIJC,kBAAa,OAJT;AAKJC,iBAAY,MALR;AAMJC,kBAAa,OANT;;AAQJC,gBAAW,MARP;AASJC,kBAAa,QATT;AAUJC,oBAAe,UAVX;AAWJC,oBAAe,UAXX;AAYJC,kBAAa,QAZT;;AAcJC,qBAAgB,SAdZ;AAeJC,sBAAiB,UAfb;AAgBJC,sBAAiB,UAhBb;AAiBJC,sBAAiB,UAjBb;AAkBJC,uBAAkB,WAlBd;AAmBJC,qBAAgB,SAnBZ;AAoBJC,mBAAc,OApBV;AAqBJC,qBAAgB,SArBZ;;AAuBJC,4BAAuB,WAvBnB;AAwBJC,8BAAyB,QAxBrB;;AA0BJC,2BAAsB,MA1BlB;AA2BJC,2BAAsB,WA3BlB;AA4BJC,6BAAwB;AA5BpB,EAfZ;;SA8CSpC,K,GAAAA,K;SAAOc,K,GAAAA,K;;;;;;;;;;AChDhB;;AACA;;;;AACA;;;;;;;;;;;;KAEMuB,M;;;AAEF,qBAAaC,YAAb,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AAAA;;AAAA,sDACpC,mBAAMF,YAAN,EAAoBC,KAApB,EAA2BC,IAA3B,CADoC;;AAEpC,eAAKC,IAAL,GAAY,IAAZ;AACA,eAAKC,UAAL,GAAkB,IAAlB;AAHoC;AAIvC;;sBAEDC,a,0BAAeC,I,EAAMF,U,EAAYH,K,EAAO;AACpC,aAAMM,gBAAgB,6BAAc,KAAKP,YAAnB,CAAtB;AACA,cAAKG,IAAL,GAAY,IAAII,cAAcD,IAAd,CAAJ,CAAwBL,KAAxB,CAAZ;AACA,cAAKG,UAAL,GAAkB,KAAKD,IAAL,CAAUC,UAAV,CAAlB;AACH,M;;sBAEDI,iB,8BAAmBP,K,EAAO;AAAA;;AACtBQ,gBAAOC,IAAP,CAAYT,KAAZ,EAAmBU,OAAnB,CAA2B,UAACC,CAAD,EAAO;AAC9B,iBAAI,OAAKT,IAAL,CAAUS,CAAV,CAAJ,EAAkB;AACd,wBAAKT,IAAL,CAAUS,CAAV,IAAeX,MAAMW,CAAN,CAAf;AACH;AACJ,UAJD;AAKH,M;;sBAEDC,U,yBAAc;AACV,gBAAO,KAAP;AACH,M;;sBAEDC,S,sBAAWC,U,EAAYC,M,EAAQ;AAC3B,aAAID,eAAe,iBAAMjD,SAAzB,EAAoC;AAChC,oBAAO,KAAKsC,UAAL,CAAgBY,OAAOC,MAAvB,CAAP;AACH,UAFD,MAEO;AACH,oBAAO,KAAKd,IAAL,CAAUe,KAAjB;AACH;AACJ,M;;sBAEDC,U,yBAAc;AACV,gBAAO,KAAKhB,IAAL,CAAUiB,MAAjB;AACH,M;;sBAEDC,iB,8BAAmBJ,M,EAAQ;AACvB,aAAIK,MAAM,IAAV;;AAEA,aAAIL,WAAW,MAAf,EAAuB;AACnBK,mBAAM,KAAKnB,IAAL,CAAUiB,MAAV,CAAiBG,IAAvB;AACH,UAFD,MAEO,IAAI,KAAKpB,IAAL,IAAa,KAAKC,UAAlB,IAAgC,KAAKA,UAAL,CAAgBa,MAAhB,CAApC,EAA6D;AAChEK,mBAAM,KAAKnB,IAAL,CAAUqB,MAAV,CAAiBP,MAAjB,CAAN;AACH;;AAED,gBAAOK,GAAP;AACH,M;;;;;mBAIUvB,M;;;;;;;;;;;;;;ACxDf;;KAAY0B,K;;;;;;KAENC,M;AAEF,qBAAa1B,YAAb,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AAAA;;AACpC,cAAKA,IAAL,GAAYA,IAAZ;AACA,cAAKF,YAAL,GAAoBA,YAApB;AACA,cAAKuB,IAAL,GAAY,IAAZ;AACA,cAAKI,QAAL,GAAgB,IAAhB;AACA,cAAKxB,IAAL,GAAY,IAAZ;;AAEA,cAAKyB,eAAL,CAAqB3B,KAArB;;AAEA,cAAKY,UAAL,CAAgB,KAAKgB,KAArB;AACH;;sBAEDC,Q,uBAAY;AACR,gBAAO,KAAK5B,IAAZ;AACH,M;;sBAED0B,e,4BAAiB3B,K,EAAO;AAAA;;AACpB,aAAI8B,aAAa9B,SAAS,EAA1B;AAAA,aACI+B,eAAe,KAAKF,QAAL,KAAkB,OADrC;AAAA,aAEIG,gBAAgBR,MAAMO,YAAN,CAFpB;AAAA,aAGIE,yBAHJ;;AAKAA,yCAAwBT,MAAMU,YAA9B,EAA+CF,aAA/C;AACAxB,gBAAOC,IAAP,CAAYwB,gBAAZ,EAA8BvB,OAA9B,CAAsC,UAACC,CAAD,EAAO;AACzC,mBAAKwB,WAAL,CAAiBxB,CAAjB,EAAoBmB,WAAWnB,CAAX,CAApB,EAAmCsB,iBAAiBtB,CAAjB,CAAnC;AACH,UAFD;AAGH,M;;sBAEDyB,iB,8BAAmBC,Q,EAAU;AACzB,iBAAQA,QAAR;AACI,kBAAK,OAAL;AAAe,wBAAO,MAAP;AACf,kBAAK,MAAL;AAAc,wBAAO,WAAP;AACd,kBAAK,MAAL;AAAc,wBAAO,MAAP;AACd,kBAAK,GAAL;AAAW,wBAAO,GAAP;AACX,kBAAK,MAAL;AAAc,wBAAO,IAAP;AACd;AAAU,wBAAOA,QAAP;AANd;AAQH,M;;sBAEDC,gB,6BAAkBtC,K,EAAO;AAAA;;AACrBQ,gBAAOC,IAAP,CAAYT,KAAZ,EAAmBU,OAAnB,CAA2B,aAAK;AAC5B,iBAAI6B,WAAW,OAAKH,iBAAL,CAAuBI,CAAvB,CAAf;;AAEA,iBAAI,OAAKtC,IAAL,IAAaqC,QAAb,IAAyB,OAAKC,CAAL,MAAYxC,MAAMwC,CAAN,CAAzC,EAAmD;AAC/C,qBAAID,aAAa,MAAb,IAAuB,OAAKjB,IAA5B,IAAoC,OAAKA,IAAL,CAAUA,IAAlD,EAAwD;AACpD,yBAAImB,IAAKzC,MAAMwC,CAAN,KAAY,CAAb,GAAkBxC,MAAMwC,CAAN,IAAW,GAA7B,GAAmC,GAA3C;AACA,4BAAKlB,IAAL,CAAUA,IAAV,CAAeoB,KAAf,GAAuBD,IAAI,GAA3B;AACH,kBAHD,MAGO,IAAI,OAAKvC,IAAL,CAAUqC,QAAV,MAAwBI,SAAxB,IAAqC,OAAKzC,IAAL,CAAUqC,QAAV,EAAoBG,KAApB,KAA8BC,SAAvE,EAAkF;AACrF,4BAAKzC,IAAL,CAAUqC,QAAV,EAAoBG,KAApB,GAA4B1C,MAAMwC,CAAN,CAA5B;AACH,kBAFM,MAEA,IAAI,OAAKtC,IAAL,CAAUqC,QAAV,MAAwBI,SAA5B,EAAuC;AAC1C,4BAAKzC,IAAL,CAAUqC,QAAV,IAAsBvC,MAAMwC,CAAN,CAAtB;AACH;AACJ;AACJ,UAbD;AAcH,M;;sBAEDL,W,wBAAaS,O,EAASC,O,EAASC,U,EAAY;AACvC,cAAKF,OAAL,IAAgB,IAAhB;AACA,aAAIE,WAAWzC,IAAX,IAAmB,QAAOwC,OAAP,yCAAOA,OAAP,OAAmBC,WAAWzC,IAArD,EAA2D;AACvD,kBAAKuC,OAAL,IAAgBC,OAAhB;AACH,UAFD,MAEO,IAAIC,WAAWC,YAAX,KAA4BJ,SAAhC,EAA2C;AAC9C,kBAAKC,OAAL,IAAgBE,WAAWC,YAA3B;AACH;AACJ,M;;sBAEDnC,U,uBAAYgB,K,EAAO;AACf,aAAIa,IAAKb,SAAS,CAAV,GAAgBA,QAAQ,GAAxB,GAA8B,GAAtC;AACA,cAAKN,IAAL,GAAY,KAAKvB,YAAL,CAAkBa,UAAlB,EAAZ;AACA,cAAKc,QAAL,GAAgB,KAAK3B,YAAL,CAAkBa,UAAlB,EAAhB;AACA,cAAKU,IAAL,CAAUA,IAAV,CAAeoB,KAAf,GAAuBD,IAAI,GAA3B;AACA,cAAKf,QAAL,CAAcJ,IAAd,CAAmBoB,KAAnB,GAA2B,CAA3B;;AAEA,cAAKhB,QAAL,CAAcsB,OAAd,CAAsB,KAAK1B,IAA3B;AACH,M;;sBAED2B,U,yBAAc;AACV,cAAK3B,IAAL,CAAU2B,UAAV;AACH,M;;sBAEDpC,S,wBAAa;AACT,gBAAO,KAAKX,IAAZ;AACH,M;;sBAEDgB,U,yBAAc;AACV,gBAAO,KAAKI,IAAZ;AACH,M;;sBAEDF,iB,8BAAmBJ,M,EAAQ;AACvB,aAAIK,MAAM,IAAV;;AAEA,aAAI,KAAKnB,IAAL,IAAa,KAAKA,IAAL,CAAUc,MAAV,CAAjB,EAAoC;AAChCK,mBAAM,KAAKnB,IAAL,CAAUc,MAAV,CAAN;AACH,UAFD,MAEO,IAAIA,WAAW,MAAX,IAAqB,KAAKM,IAA9B,EAAoC;AACvCD,mBAAM,KAAKK,QAAL,CAAcJ,IAApB;AACH;AACD,gBAAOD,GAAP;AACH,M;;;;;mBAGUI,M;;;;;;ACvGf;;;;AAEA;;AACA;;;;;;;;;;;;KAEMyB,W;;;AAEF,0BAAanD,YAAb,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AAAA;;AAAA,sDACpC,mBAAMF,YAAN,EAAoBC,KAApB,EAA2BC,IAA3B,CADoC;;AAGpC,eAAKkD,qBAAL,GAA6B,WAA7B;AAHoC;AAIvC;;2BAEDC,S,wBAAa;AACT,aAAI,KAAKlD,IAAL,IAAa,KAAKA,IAAL,CAAUmD,MAA3B,EAAmC;AAC/B,kBAAKnD,IAAL,CAAUmD,MAAV,CAAiBX,KAAjB,GAAyB,KAAKW,MAA9B;AACH;AACJ,M;;2BAEDC,M,qBAAU;AACN,cAAKpD,IAAL,CAAUqD,KAAV,CAAgB,CAAhB;AACH,M;;2BAEDC,O,oBAASC,O,EAAS;AACd,cAAKvD,IAAL,CAAUwD,IAAV,CAAeD,OAAf;AACH,M;;2BAED5C,S,sBAAWC,U,EAAYC,M,EAAQ;AAC3B,aAAID,eAAe,iBAAMjD,SAAzB,EAAoC;AAChC,oBAAO,KAAKqC,IAAL,CAAUa,OAAOC,MAAjB,CAAP;AACH,UAFD,MAEO;AACH,oBAAO,KAAKd,IAAL,CAAU,KAAKiD,qBAAf,CAAP;AACH;AACJ,M;;;;;mBAGUD,W;;;;;;ACpCf;;;;;;;;;4CAESS,O;;;;;;;;;8CACAA,O;;;;;;;;;yCACAA,O;;;;;;;;;gDAGAA,O;;;;;;;;;+CACAA,O;;;;;;;;;2CACAA,O;;;;;;;;;4CAGAA,O;;;;;;;;;2CACAA,O;;;;;;;;;mDACAA,O;;;;;;;;;6CACAA,O;;;;;;;;;+CACAA,O;;;;;;;;;gDACAA,O;;;;;;;;;gDACAA,O;;;;;;;;;;AClBT;;;;;;;;;kDAESA,O;;;;;;;;;oDAGAA,O;;;;;;;;;mDACAA,O;;;;;;;;;8CACAA,O;;;;;;;;;qDAGAA,O;;;;;;;;;gDACAA,O;;;;;;;;;iDAGAA,O;;;;;;;;;gDACAA,O;;;;;;;;;wDACAA,O;;;;;;;;;kDACAA,O;;;;;;;;;oDACAA,O;;;;;;;;;qDACAA,O;;;;;;;;;qDACAA,O;;;;;;;;;;;;;;;;ACpBT;;KAAYC,O;;AACZ;;KAAYpC,K;;AACZ;;AACA;;;;;;;;;;AAEA,KACIqC,QAAQ,CAAC,GAAD,EAAM,IAAN,EAAY,GAAZ,EAAiB,IAAjB,EAAuB,GAAvB,EAA4B,GAA5B,EAAiC,IAAjC,EAAuC,GAAvC,EAA4C,IAA5C,EAAkD,GAAlD,EAAuD,IAAvD,EAA6D,GAA7D,CADZ;AAAA,KAEIC,UAAUtD,OAAOC,IAAP,CAAYmD,OAAZ,CAFd;AAGA,KAAIG,cAAJ;;AAEA;;;;;;;KAMMvG,Q;AACF;;;;;AAKA,uBAAauC,YAAb,EAA2BC,KAA3B,EAAkC;AAAA;;AAC9B,aAAM8B,aAAa9B,SAAS,EAA5B;AACA+D,iBAAQ,oBAAUhE,YAAV,EAAwB+B,UAAxB,CAAR;AACA,cAAKkC,SAAL,GAAiB,KAAjB;AACH;;AAED;;;;;;;;;wBAOAC,U,yBAAc;AACV,6BACOF,MAAMG,aADb;AAGH,M;;AAED;;;;;;;;;;wBAQAC,M,mBAAQC,E,EAAI/D,I,EAAMyB,U,EAAY;AAC1B,aAAMuC,gBAAgB,KAAKJ,UAAL,GAAkBG,EAAlB,CAAtB;AACA,aAAIC,aAAJ,EAAmB;AACf,mBAAM,IAAIC,KAAJ,CAAU,YAAYF,EAAZ,GAAiB,8CAA3B,CAAN;AACH;AACDL,eAAMQ,MAAN,CAAalE,IAAb,EAAmB+D,EAAnB,EAAuBtC,UAAvB;AACA,gBAAO,IAAP;AACH,M;;AAED;;;;;;;;;wBAOA0C,M,mBAAQJ,E,EAAItC,U,EAAY;AACpB,aAAMuC,gBAAgB,KAAKJ,UAAL,GAAkBG,EAAlB,CAAtB;AACA,aAAI,CAACC,aAAL,EAAoB;AAChB,mBAAM,IAAIC,KAAJ,CAAU,YAAYF,EAAZ,GAAiB,wCAA3B,CAAN;AACH;AACDL,eAAMQ,MAAN,CAAaF,cAAchE,IAA3B,EAAiC+D,EAAjC,EAAqCtC,UAArC;AACA,gBAAO,IAAP;AACH,M;;AAED;;;;;;;wBAKA2C,M,mBAAQ3C,U,EAAY;AAChBiC,eAAMQ,MAAN,CAAa,iBAAM7G,MAAnB,EAA2B,iBAAMA,MAAjC,EAAyCoE,UAAzC;AACA,gBAAO,IAAP;AACH,M;;AAED;;;;;;;wBAKA4C,I,iBAAM5C,U,EAAY;AACdiC,eAAMQ,MAAN,CAAa,iBAAMzG,QAAnB,EAA6B,iBAAMU,IAAnC,EAAyCsD,UAAzC;AACA,gBAAO,IAAP;AACH,M;;AAED;;;;;;;;wBAMA6C,O,oBAASP,E,EAAI;AACT,aAAMC,gBAAgB,KAAKJ,UAAL,GAAkBG,EAAlB,CAAtB;AACA,aAAI,CAACC,aAAL,EAAoB;AAChB,mBAAM,IAAIC,KAAJ,CAAU,YAAYF,EAAZ,GAAiB,aAA3B,CAAN;AACH;AACDL,eAAMa,aAAN,CAAoBR,EAApB;AACA,gBAAO,IAAP;AACH,M;;AAED;;;;;;;wBAKAS,I,iBAAMC,S,EAAW;AACb,aAAI,CAACA,SAAD,IAAc,CAAlB,EAAqB;AACjBf,mBAAMc,IAAN,CAAWC,SAAX;AACA,kBAAKd,SAAL,GAAiB,IAAjB;AACH;AACD,gBAAO,IAAP;AACH,M;;AAED;;;;;;;wBAKAN,I,iBAAMoB,S,EAAW;AACb,aAAI,CAACA,SAAD,IAAc,CAAlB,EAAqB;AACjBf,mBAAML,IAAN,CAAWoB,SAAX;AACA,kBAAKd,SAAL,GAAiB,KAAjB;AACH;AACD,gBAAO,IAAP;AACH,M;;AAED;;;;;;;;;;;wBASAe,I,iBAAMhE,M,EAAQC,M,EAAQ;AAClB,aAAID,WAAW,iBAAMrD,MAArB,EAA6B;AACzB,mBAAM,IAAI4G,KAAJ,CAAU,gDAAV,CAAN;AACH;AACD,aAAI,CAACP,MAAMG,aAAN,CAAoBnD,MAApB,CAAL,EAAkC;AAC9B,mBAAM,IAAIuD,KAAJ,CAAU,mBAAmBvD,MAAnB,GAA4B,aAAtC,CAAN;AACH;;AAED,aAAI,CAACgD,MAAMG,aAAN,CAAoBlD,MAApB,CAAL,EAAkC;AAC9B,mBAAM,IAAIsD,KAAJ,CAAU,mBAAmBtD,MAAnB,GAA4B,aAAtC,CAAN;AACH;AACD+C,eAAMG,aAAN,CAAoBnD,MAApB,EAA4Bf,KAA5B,CAAkC+E,IAAlC,GAAyC/D,MAAzC;AACA,gBAAO,IAAP;AACH,M;;AAED;;;;;;;cAKOgE,mB,kCAAsC;AAAA,aAAjBC,UAAiB,uEAAJ,EAAI;;AACzC,aAAMC,cAAc1D,MAAMyD,aAAa,OAAnB,KAA+B,EAAnD;;AAEA,0BACOzE,OAAOC,IAAP,CAAYyE,WAAZ,EAAyBC,GAAzB,CAA6B;AAAA,iCAAcD,YAAYE,IAAZ,CAAd,IAAiCnF,MAAMmF,IAAvC;AAAA,UAA7B,CADP,EAEO5E,OAAOC,IAAP,CAAYe,MAAMU,YAAlB,EAAgCiD,GAAhC,CAAoC;AAAA,iCAAc3D,MAAMU,YAAN,CAAmBkD,IAAnB,CAAd,IAAwCnF,MAAMmF,IAA9C;AAAA,UAApC,CAFP;AAIH,M;;AAED;;;;;;cAIOC,e,8BAAmB;AACtB,gBAAO,UAAIvB,OAAJ,EACFvC,MADE,CACK;AAAA,oBAAKZ,MAAM,YAAX;AAAA,UADL,EAEF2E,MAFE,CAEK,UAACC,MAAD,EAAS5E,CAAT,EAAe;AACnB,8BACO4E,MADP,GAEI;AACIlF,uBAAMM,CADV;AAEImB,6BAAYtE,SAASwH,mBAAT,CAA6BrE,CAA7B;AAFhB,cAFJ;AAOH,UAVE,EAUA,EAVA,CAAP;AAWH,M;;AAED;;;;;;;;cAMO6E,Y,yBAAcC,I,EAAMC,M,EAAQ;AAC/B,aACIC,UAAUC,SAASF,MAAT,EAAiB,EAAjB,IAAuB,CADrC;AAAA,aAEIG,QAAQhC,MAAMiC,OAAN,CAAcL,IAAd,IAAsB5B,MAAMiC,OAAN,CAAc,GAAd,CAFlC;AAAA,aAGIC,QAAQ,KAAKJ,OAHjB;AAAA,aAIIK,MAAOH,QAAQE,KAJnB;AAAA,aAKIE,OAAO,MAAMC,KAAKC,GAAL,CAAS,QAAT,EAAmBH,GAAnB,CALjB;AAMA,gBAAOI,WAAWH,KAAKI,OAAL,CAAa,CAAb,CAAX,KAA+B,CAAtC;AACH,M;;AAED;;;;;;cAIOC,Q,uBAAY;AACf,gBAAOzC,KAAP;AACH,M;;;;;AAGLrG,UAASe,KAAT;AACAf,UAASC,KAAT;;mBAEeD,Q;;;;;;;;;;AC3Nf;;AACA;;;;;;;;AAEA;;;;;;KAMM+I,K;;AAEF;;;;;AAKA,oBAAaxG,YAAb,EAA2BC,KAA3B,EAAkC;AAAA;;AAC9B,aAAI8B,aAAa9B,SAAS,EAA1B;;AAEA,cAAKD,YAAL,GAAoBA,YAApB;AACA,cAAKmE,aAAL,GAAqB,EAArB;AACA,cAAKsC,MAAL,GAAc,EAAd;AACA,cAAKC,QAAL,GAAgB3E,WAAW2E,QAAX,IAAuB,KAAvC;AACA,cAAKC,cAAL,GAAsB5E,WAAW4E,cAAX,IAA6B,IAAnD;AACA,cAAKC,aAAL,GAAqB7E,WAAW6E,aAAX,IAA4B,IAAjD;;AAEA,cAAKC,QAAL,GAAgB,IAAhB;AACA,cAAKC,cAAL,GAAsB,IAAtB;;AAEA,aAAI,KAAK9G,YAAL,IAAqB,OAAO,KAAKA,YAAL,CAAkB+G,cAAzB,KAA4C,UAArE,EAAiF;AAC7E,kBAAK/G,YAAL,CAAkBa,UAAlB,GAA+B,KAAKb,YAAL,CAAkB+G,cAAjD;AACH;AACD,aAAI,KAAK/G,YAAL,IAAqB,OAAO,KAAKA,YAAL,CAAkBgH,eAAzB,KAA6C,UAAtE,EAAkF;AAC9E,kBAAKhH,YAAL,CAAkBiH,WAAlB,GAAgC,KAAKjH,YAAL,CAAkBgH,eAAlD;AACH;;AAED,aAAI,KAAKN,QAAL,KAAkB,IAAtB,EAA4B;AACxB,kBAAKQ,cAAL;AACH;;AAED,cAAK1C,MAAL,CAAY,QAAZ,EAAsB,iBAAM7G,MAA5B,EAAoC;AAChCkE,oBAAO;AADyB,UAApC;;AAIA,cAAK2C,MAAL,CAAY,UAAZ,EAAwB,iBAAM/F,IAA9B,EAAoC;AAChCuG,mBAAM,iBAAMrH,MADoB;AAEhCsD,qBAAQ,MAFwB;AAGhCY,oBAAO,GAHyB;AAIhCsF,qBAAQ,IAJwB;AAKhCC,oBAAO,GALyB;AAMhCC,sBAAS,GANuB;AAOhC3D,sBAAS;AAPuB,UAApC;AAUH;;AAED;;;;;qBAGAwD,c,6BAAkB;AACd,aAAII,YAAY,GAAhB;AAAA,aACIC,WAAW,IADf;;AAGA,aAAI,KAAKvH,YAAT,EAAuB;AACnB,kBAAK8G,cAAL,GAAsB,KAAK9G,YAAL,CAAkBwH,qBAAlB,CAAwC,IAAxC,EAA8C,CAA9C,EAAiD,CAAjD,CAAtB;AACA,kBAAKV,cAAL,CAAoB7D,OAApB,CAA4B,KAAKjD,YAAL,CAAkByH,WAA9C;;AAEA,kBAAKZ,QAAL,GAAgB,KAAK7G,YAAL,CAAkB0H,cAAlB,EAAhB;AACA,kBAAKb,QAAL,CAAcc,qBAAd,GAAsCL,SAAtC;AACA,kBAAKT,QAAL,CAAce,OAAd,GAAwBL,QAAxB;AACA,kBAAKV,QAAL,CAAcgB,WAAd,GAA4B,CAAC,GAA7B;AACA,kBAAKhB,QAAL,CAAciB,WAAd,GAA4B,CAA5B;;AAEA,kBAAKjB,QAAL,CAAc5D,OAAd,CAAsB,KAAKjD,YAAL,CAAkByH,WAAxC;AACH;AACJ,M;;AAED;;;;;;;;qBAMAjD,M,mBAAQlE,I,EAAMyH,K,EAAmB;AAAA,aAAZ9H,KAAY,uEAAJ,EAAI;;AAC7B,aAAI,CAACK,IAAD,IAASA,KAAK0H,WAAL,KAAqBC,MAAlC,EAA0C;AACtC,mBAAM,IAAI1D,KAAJ,CAAU,8BAAV,CAAN;AACH;;AAED,aAAI,CAACwD,KAAD,IAAUA,MAAMC,WAAN,KAAsBC,MAApC,EAA4C;AACxC,mBAAM,IAAI1D,KAAJ,CAAU,+BAAV,CAAN;AACH;;AAED,aAAI,CAAC,KAAKJ,aAAL,CAAmB4D,KAAnB,CAAL,EAAgC;AAC5B,kBAAKG,SAAL,CAAe5H,IAAf,EAAqByH,KAArB,EAA4B9H,KAA5B;AACH,UAFD,MAEO;AACH,kBAAKkI,YAAL,CAAkBJ,KAAlB,EAAyB9H,KAAzB;AACH;AACJ,M;;AAED;;;;;;;;;qBAOAiI,S,sBAAW5H,I,EAAMyH,K,EAAmB;AAAA,aAAZ9H,KAAY,uEAAJ,EAAI;;AAChC,aAAI,KAAKkE,aAAL,CAAmB4D,KAAnB,CAAJ,EAA+B;AAC3B,mBAAM,IAAIxD,KAAJ,CAAU,YAAYwD,KAAZ,GAAoB,oDAA9B,CAAN;AACH;AACD,cAAK5D,aAAL,CAAmB4D,KAAnB,IAA4B;AACxBzH,uBADwB;AAExBL;AAFwB,UAA5B;AAIH,M;;AAED;;;;;;;;qBAMAkI,Y,yBAAcJ,K,EAAmB;AAAA;;AAAA,aAAZ9H,KAAY,uEAAJ,EAAI;;AAC7B,aAAI,CAAC,KAAKkE,aAAL,CAAmB4D,KAAnB,CAAL,EAAgC;AAC5B,mBAAM,IAAIxD,KAAJ,CAAU,YAAYwD,KAAZ,GAAoB,2CAA9B,CAAN;AACH;AACDtH,gBAAOC,IAAP,CAAYT,KAAZ,EAAmBU,OAAnB,CAA2B,UAACC,CAAD,EAAO;AAC9B,iBAAI,MAAKuD,aAAL,CAAmB4D,KAAnB,EAA0B9H,KAA1B,CAAgCW,CAAhC,MAAuCgC,SAA3C,EAAsD;AAClD,uBAAKuB,aAAL,CAAmB4D,KAAnB,EAA0B9H,KAA1B,CAAgCW,CAAhC,IAAqCX,MAAMW,CAAN,CAArC;AACH;AACJ,UAJD;;AAMAH,gBAAOC,IAAP,CAAY,KAAK+F,MAAjB,EAAyB9F,OAAzB,CAAiC,UAACC,CAAD,EAAO;AACpC,mBAAK6F,MAAL,CAAY7F,CAAZ,EAAeuH,YAAf,CAA4BJ,KAA5B,EAAmC9H,KAAnC;AACH,UAFD;AAGH,M;;AAED;;;;;;;qBAKA4E,a,0BAAekD,K,EAAO;AAAA;;AAClB,aAAI,CAAC,KAAK5D,aAAL,CAAmB4D,KAAnB,CAAL,EAAgC;AAC5B,mBAAM,IAAIxD,KAAJ,CAAU,YAAYwD,KAAZ,GAAoB,aAA9B,CAAN;AACH;AACD,gBAAO,KAAK5D,aAAL,CAAmB4D,KAAnB,CAAP;AACAtH,gBAAOC,IAAP,CAAY,KAAK+F,MAAjB,EAAyB9F,OAAzB,CAAiC,UAACC,CAAD,EAAO;AACpC,oBAAK6F,MAAL,CAAY7F,CAAZ,EAAewH,YAAf,CAA4BL,KAA5B;AACH,UAFD;AAGH,M;;AAED;;;;;;qBAIAjD,I,iBAAMY,I,EAAM;AAAA;;AACR,aAAI2C,sBAAJ;AAAA,aACIC,mBAAoB,KAAKzB,QAAL,IAAiB,KAAKA,QAAL,CAAc0B,iBAAhC,GACf,KAAK1B,QAAL,CAAc0B,iBADC,GACmB,IAF1C;;AAIA,aAAI,CAAC,KAAK9B,MAAL,CAAYf,IAAZ,CAAL,EAAwB;AACpB,kBAAKe,MAAL,CAAYf,IAAZ,IAAoB,oBAAUA,IAAV,EAAgB,KAAK1F,YAArB,EAAmC,KAAKmE,aAAxC,EAAuD,KAAK0C,QAA5D,CAApB;AACA,kBAAKJ,MAAL,CAAYf,IAAZ,EAAkBnC,MAAlB;AACH;AACD,aAAI,KAAKmD,QAAL,KAAkB,IAAlB,IAA0B,KAAKI,cAAnC,EAAmD;;AAE/CuB,6BAAgB,IAAIG,UAAJ,CAAeF,gBAAf,CAAhB;;AAEA,kBAAKxB,cAAL,CAAoB2B,cAApB,GAAqC,YAAM;AACvC,wBAAK5B,QAAL,CAAc6B,oBAAd,CAAmCL,aAAnC;AACA,qBAAI,OAAK1B,cAAL,IAAuB,OAAO,OAAKA,cAAZ,KAA+B,UAA1D,EAAsE;AAClE,4BAAKA,cAAL,CAAoB0B,aAApB;AACH;AACJ,cALD;AAMH;AACJ,M;;AAED;;;;;;qBAIA1E,I,iBAAM+B,I,EAAM;AACR,aAAI,KAAKe,MAAL,CAAYf,IAAZ,CAAJ,EAAuB;AACnB,kBAAKe,MAAL,CAAYf,IAAZ,EAAkBjC,OAAlB;AACA,kBAAKgD,MAAL,CAAYf,IAAZ,IAAoB9C,SAApB;AACA,oBAAO,KAAK6D,MAAL,CAAYf,IAAZ,CAAP;AACH;AACD,aACIjF,OAAOC,IAAP,CAAY,KAAK+F,MAAjB,EAAyBkC,MAAzB,KAAoC,CAApC,IACA,KAAKjC,QAAL,KAAkB,IADlB,IAEA,KAAKI,cAHT,EAIE;AACE,kBAAKA,cAAL,CAAoB2B,cAApB,GAAqC,IAArC;AACA,iBACI,KAAK7B,aAAL,IACA,OAAO,KAAKA,aAAZ,KAA8B,UAFlC,EAGE;AACE,sBAAKA,aAAL;AACH;AACJ;AACJ,M;;;;;mBAGUJ,K;;;;;;AC5Mf;;;;AAEA;;;;;;AAEA,KAAMoC,gBAAgB,SAAhBA,aAAgB,CAAC5I,YAAD;AAAA,UAAkB,qBAASA,YAAT,CAAlB;AAAA,EAAtB;;mBAEe4I,a;;;;;;;;;;ACNf;;KAAY/E,O;;AACZ;;;;AACA;;;;;;;;AAEA;;;;;KAKMgF,K;AAEF,oBAAanD,IAAb,EAAmB1F,YAAnB,EAAiCmE,aAAjC,EAAgD0C,QAAhD,EAA0D;AAAA;;AACtD,cAAKnB,IAAL,GAAYA,IAAZ;AACA,cAAKvB,aAAL,GAAqBA,aAArB;AACA,cAAK2E,OAAL,GAAe,EAAf;AACA,cAAKC,YAAL,GAAoB,EAApB;AACA,cAAKrE,MAAL,GAAc,IAAd;AACA,cAAKmC,QAAL,GAAgBA,YAAY,IAA5B;;AAEA,aAAI7G,YAAJ,EAAkB;AACd,kBAAKgJ,YAAL,CAAkBhJ,YAAlB;AACA,kBAAKiJ,WAAL;AACH;AACJ;;qBAEDD,Y,yBAAchJ,Y,EAAc;AAAA;;AACxB,aAAIkJ,gBAAJ;AAAA,aACIC,UADJ;;AAGA1I,gBAAOC,IAAP,CAAY,KAAKyD,aAAjB,EAAgCxD,OAAhC,CAAwC,UAACyI,GAAD,EAAS;AAC7CF,uBAAU,MAAK/E,aAAL,CAAmBiF,GAAnB,CAAV;AACA,iBAAIF,QAAQ5I,IAAR,IAAgB4I,QAAQjJ,KAA5B,EAAmC;AAC/BkJ,qBAAI,IAAItF,QAAQqF,QAAQ5I,IAAhB,CAAJ,CAA0BN,YAA1B,EAAwCkJ,QAAQjJ,KAAhD,EAAuDiJ,QAAQ5I,IAA/D,CAAJ;AACA,uBAAKwI,OAAL,CAAaM,GAAb,IAAoB;AAChB9I,2BAAM4I,QAAQ5I,IADE;AAEhB+I,+BAAUF;AAFM,kBAApB;;AAKA,qBAAIA,EAAEE,QAAF,iCAAJ,EAAuC;AACnC,2BAAKN,YAAL,CAAkBO,IAAlB,CAAuBH,CAAvB;AACH,kBAFD,MAEO,IAAID,QAAQ5I,IAAR,KAAiB,iBAAM3C,MAA3B,EAAmC;AACtC,2BAAK+G,MAAL,GAAcyE,CAAd;AACH;AACJ;AACJ,UAfD;AAgBH,M;;qBAEDhB,Y,yBAAcoB,Q,EAAUtJ,K,EAAO;AAC3B,aAAI,KAAK6I,OAAL,CAAaS,QAAb,KAA0B,KAAKT,OAAL,CAAaS,QAAb,EAAuBF,QAArD,EAA+D;AAC3D,kBAAKP,OAAL,CAAaS,QAAb,EAAuBF,QAAvB,CAAgC9G,gBAAhC,CAAiDtC,KAAjD;AACH;AACJ,M;;qBAEDmI,Y,yBAAcmB,Q,EAAU;AACpB,aAAI,KAAKT,OAAL,CAAaS,QAAb,KAA0B,KAAKT,OAAL,CAAaS,QAAb,EAAuBF,QAArD,EAA+D;AAC3D,kBAAKP,OAAL,CAAaS,QAAb,EAAuBF,QAAvB,CAAgCnG,UAAhC;AACH;AACJ,M;;qBAED+F,W,0BAAe;AAAA;;AACXxI,gBAAOC,IAAP,CAAY,KAAKoI,OAAjB,EAA0BnI,OAA1B,CAAkC,UAACyI,GAAD,EAAS;AACvC,iBAAI9E,gBAAgB,OAAKwE,OAAL,CAAaM,GAAb,EAAkBC,QAAtC;AAAA,iBACIG,oBAAoB,OAAKV,OAAL,CAAaM,GAAb,EAAkB9I,IAD1C;AAAA,iBAEImJ,0BAFJ;AAAA,iBAGIzI,eAHJ;AAAA,iBAII0I,aAJJ;;AAMA,iBAAIpF,cAAcU,IAAlB,EAAwB;AACpByE,qCAAoB,OAAKX,OAAL,CAAaxE,cAAcU,IAA3B,CAApB;AACA,qBAAIyE,qBAAqBA,kBAAkBJ,QAA3C,EAAqD;AACjDrI,8BAASsD,cAAcnD,UAAd,EAAT;AACAuI,4BAAOD,kBAAkBJ,QAAlB,CAA2BvI,SAA3B,CAAqC0I,iBAArC,EAAwDlF,aAAxD,CAAP;AACA;AACA,yBAAItD,UAAU0I,IAAd,EAAoB;AAChB1I,gCAAOiC,OAAP,CAAeyG,IAAf;AACH;AACJ;AACJ;AACJ,UAlBD;;AAoBA,cAAKhF,MAAL,CAAYiF,OAAZ,CAAoB,KAAK9C,QAAzB;AACH,M;;qBAEDtD,M,qBAAU;AAAA;;AACN,aAAI4F,UAAJ;AAAA,aACIO,aADJ;;AAGAjJ,gBAAOC,IAAP,CAAY,KAAKoI,OAAjB,EAA0BnI,OAA1B,CAAkC,UAACC,CAAD,EAAO;AACrCuI,iBAAI,OAAKL,OAAL,CAAalI,CAAb,EAAgByI,QAApB;;AAEA,iBAAI,OAAOF,EAAES,WAAT,KAAyB,UAA7B,EAAyC;AACrCF,wBAAQ,OAAKZ,OAAL,CAAaK,EAAEnE,IAAf,CAAD,GAAyB,OAAK8D,OAAL,CAAaK,EAAEnE,IAAf,EAAqBqE,QAA9C,GAAyD,IAAhE;AACAF,mBAAES,WAAF,CAAcF,IAAd;AACH;AACD,iBAAI,OAAOP,EAAEU,OAAT,KAAqB,UAAzB,EAAqC;AACjCV,mBAAEU,OAAF,CAAU,CAAC,OAAKnE,IAAhB;AACH;AACJ,UAVD;AAWAjF,gBAAOC,IAAP,CAAY,KAAKoI,OAAjB,EAA0BnI,OAA1B,CAAkC,UAACC,CAAD,EAAO;AACrCuI,iBAAI,OAAKL,OAAL,CAAalI,CAAb,EAAgByI,QAApB;AACA,iBAAIF,KAAK,OAAOA,EAAE5F,MAAT,KAAoB,UAA7B,EAAyC;AACrC4F,mBAAE5F,MAAF;AACH;AACJ,UALD;AAMH,M;;qBAEDE,O,sBAAW;AAAA;;AACP,aAAIC,UAAU,CAAd;AAAA,aACIiB,OAAQ,KAAKmE,OAAL,CAAanE,IAAd,GAAsB,KAAKmE,OAAL,CAAanE,IAAb,CAAkB0E,QAAxC,GAAmD,IAD9D;AAAA,aAEIF,UAFJ;AAAA,aAGIO,aAHJ;;AAKA,aAAI/E,IAAJ,EAAU;AACNjB,uBAAUiB,KAAKmF,cAAL,EAAV;AACH;;AAEDrJ,gBAAOC,IAAP,CAAY,KAAKoI,OAAjB,EAA0BnI,OAA1B,CAAkC,UAACC,CAAD,EAAO;AACrCuI,iBAAI,OAAKL,OAAL,CAAalI,CAAb,EAAgByI,QAApB;AACA,iBAAIF,KAAK,OAAOA,EAAEY,aAAT,KAA2B,UAApC,EAAgD;AAC5CL,wBAAQ,OAAKZ,OAAL,CAAaK,EAAEnE,IAAf,CAAD,GAAyB,OAAK8D,OAAL,CAAaK,EAAEnE,IAAf,EAAqBqE,QAA9C,GAAyD,IAAhE;AACAF,mBAAEY,aAAF,CAAgBL,IAAhB;AACH;AACJ,UAND;AAOAjJ,gBAAOC,IAAP,CAAY,KAAKoI,OAAjB,EAA0BnI,OAA1B,CAAkC,UAACC,CAAD,EAAO;AACrCuI,iBAAI,OAAKL,OAAL,CAAalI,CAAb,EAAgByI,QAApB;AACA,iBAAIF,KAAK,OAAOA,EAAE1F,OAAT,KAAqB,UAA9B,EAA0C;AACtC0F,mBAAE1F,OAAF,CAAUC,OAAV;AACH;AACJ,UALD;AAMH,M;;;;;mBAIUmF,K;;;;;;ACrIf;;;;AAEA;;;;;;;;;;;;KAEMmB,U;;;AAEF,yBAAahK,YAAb,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AAAA;;AAAA,sDACpC,mBAAMF,YAAN,EAAoBC,KAApB,EAA2BC,IAA3B,CADoC;;AAGpC,eAAKG,aAAL,CAAmB,YAAnB,EAAiC,QAAjC;AACA,eAAKG,iBAAL,CAAuB;AACnByJ,mBAAM,MAAKA,IADQ;AAEnBC,uBAAU,MAAKA,QAFI;AAGnBC,yBAAY,MAAKA;AAHE,UAAvB;AAJoC;AASvC;;;;;mBAIUH,U;;;;;;ACnBf;;;;AAEA;;;;;;;;;;;;KAEMI,K;;;AAEF,oBAAapK,YAAb,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AAAA;;AAAA,sDACpC,mBAAMF,YAAN,EAAoBC,KAApB,EAA2BC,IAA3B,CADoC;;AAGpC,eAAKG,aAAL,CAAmB,OAAnB,EAA4B,QAA5B;AACA,eAAKG,iBAAL,CAAuB;AACnB6J,uBAAU,MAAKC,GADI;AAEnBC,uBAAU,MAAKC,GAFI;AAGnBC,uBAAU,MAAKA,QAHI;AAInBC,qBAAQ,MAAKA,MAJM;AAKnBC,wBAAW,MAAKA,SALG;AAMnBC,qBAAQ,MAAKA;AANM,UAAvB;AAJoC;AAYvC;;;;;mBAGUR,K;;;;;;ACrBf;;;;AAEA;;;;;;;;;;;;KAEMS,M;;;AAEF,qBAAa7K,YAAb,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AAAA;;AAAA,sDACpC,mBAAMF,YAAN,EAAoBC,KAApB,EAA2BC,IAA3B,CADoC;;AAGpC,eAAKG,aAAL,CAAmB,QAAnB,EAA6B,QAA7B;AACA,eAAKG,iBAAL,CAAuB;AACnBuE,wBAAW,MAAKmB,IADG;AAEnB4E,gBAAG,MAAKC,CAFW;AAGnBxJ,mBAAM,MAAKyJ,UAHQ;AAInBC,yBAAY,MAAKA,UAJE;AAKnBL,qBAAQ,MAAKA;AALM,UAAvB;AAJoC;AAWvC;;;;;mBAGUC,M;;;;;;ACpBf;;;;AAEA;;;;;;;;;;;;KAEMK,U;;;AAEF,yBAAalL,YAAb,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AAAA;;AAAA,sDACpC,mBAAMF,YAAN,EAAoBC,KAApB,EAA2BC,IAA3B,CADoC;;AAGpC,eAAKG,aAAL,CAAmB,YAAnB,EAAiC,QAAjC;AACA,eAAKG,iBAAL,CAAuB;AACnBkK,qBAAQ,MAAKA,MADM;AAEnBS,wBAAW,MAAKA,SAFG;AAGnBhB,yBAAY,MAAKA;AAHE,UAAvB;AAJoC;AASvC;;;;;mBAGUe,U;;;;;;AClBf;;;;AAEA;;;;;;;;;;;;KAEME,S;;;AAEF,wBAAapL,YAAb,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AAAA;;AAAA,sDACpC,mBAAMF,YAAN,EAAoBC,KAApB,EAA2BC,IAA3B,CADoC;;AAGpC,eAAKG,aAAL,CAAmB,WAAnB,EAAgC,QAAhC;AACA,eAAKG,iBAAL,CAAuB;AACnB6K,yBAAY,MAAKA,UADE;AAEnBC,oBAAO,MAAKA,KAFO;AAGnBC,0BAAa,MAAKA,WAHC;AAInBC,6BAAgB,MAAKA,cAJF;AAKnBZ,qBAAQ,MAAKA;AALM,UAAvB;AAJoC;AAWvC;;;;;mBAGUQ,S;;;;;;ACpBf;;;;AAEA;;;;;;;;;;;;KAEMK,a;;;AAEF,4BAAazL,YAAb,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AAAA;;AAAA,sDACpC,mBAAMF,YAAN,EAAoBC,KAApB,EAA2BC,IAA3B,CADoC;;AAGpC,eAAKG,aAAL,CAAmB,eAAnB,EAAoC,WAApC;AACA,eAAKG,iBAAL,CAAuB;AACnB6J,uBAAU,MAAKC,GADI;AAEnBC,uBAAU,MAAKC,GAFI;AAGnBC,uBAAU,MAAKA,QAHI;AAInBiB,4BAAe,MAAKA,aAJD;AAKnBC,6BAAgB,MAAKA,cALF;AAMnBf,qBAAQ,MAAKA;AANM,UAAvB;AAJoC;AAYvC;;;;;mBAGUa,a;;;;;;ACrBf;;;;AAEA;;;;;;;;;;;;KAEMG,O;;;AAEF,sBAAa5L,YAAb,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AAAA;;AAAA,sDACpC,mBAAMF,YAAN,EAAoBC,KAApB,EAA2BC,IAA3B,CADoC;;AAGpC,eAAKG,aAAL,CAAmB,SAAnB,EAA8B,QAA9B;AACA,eAAKG,iBAAL,CAAuB;AACnBqL,wBAAW,MAAKA,SADG;AAEnBC,mBAAM,MAAKA,IAFQ;AAGnBC,0BAAa,MAAKA,WAHC;AAInBnB,qBAAQ,MAAKA;AAJM,UAAvB;AAJoC;AAUvC;;;;;mBAGUgB,O;;;;;;;;;;ACnBf;;;;;;;;;;;;KAEMI,Q;;;AAEF,uBAAahM,YAAb,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AAAA;;AAAA,iDACpC,mBAAMF,YAAN,EAAoBC,KAApB,EAA2BC,IAA3B,CADoC;AAEvC;;wBAEDW,U,yBAAc;AACV,gBAAO,KAAP;AACH,M;;wBAEDiJ,c,6BAAkB;AACd,aAAImC,MAAM,KAAKjM,YAAL,CAAkBkM,WAA5B;AAAA,aACIxI,gBADJ;;AAGA,aAAI,KAAKA,OAAT,EAAkB;AACdA,uBAAUuI,MAAO,KAAKvI,OAAL,GAAe,IAAhC;AACH,UAFD,MAEO;AACHA,uBAAUuI,MAAM,GAAhB;AACH;;AAED,gBAAOvI,OAAP;AACH,M;;wBAEDkG,W,wBAAaF,I,EAAM;AACf,aAAIuC,MAAM,KAAKjM,YAAL,CAAkBkM,WAA5B;AAAA,aACIvK,WAAW,KAAKE,KAAL,GAAa,GAD5B;AAAA,aAEIsK,oBAFJ;AAAA,aAGIC,qBAHJ;AAAA,aAIIC,YAAa,KAAKlF,MAAL,GAAc,IAJ/B;AAAA,aAKImF,UALJ;;AAOA,aAAI,KAAKrL,MAAL,KAAgB,MAApB,EAA4B;AACxBkL,2BAAcxK,WAAW,GAAzB;AACAyK,4BAAe,KAAK/E,OAAL,GAAe,KAA9B;AACH,UAHD,MAGO;AACH8E,2BAAcxK,WAAW,EAAzB,CADG,CAC2B;AAC9ByK,4BAAeD,cAAc,KAAK9E,OAAnB,GAA6B,KAA5C,CAFG,CAEgD;AACtD;;AAED,aAAI,CAACgF,SAAL,EAAgB;AACZA,yBAAY,IAAZ,CADY,CACM;AACrB;;AAED,aAAI3C,QAAQ,OAAOA,KAAKrI,iBAAZ,KAAkC,UAA9C,EAA0D;AACtDiL,iBAAI5C,KAAKrI,iBAAL,CAAuB,KAAKJ,MAA5B,CAAJ;;AAEA,iBAAIqL,KAAKA,EAAEC,cAAP,IAAyBD,EAAEE,uBAA3B,IAAsDF,EAAEG,eAA5D,EAA6E;AACzEH,mBAAEC,cAAF,CAAiB,CAAjB,EAAoBN,GAApB;AACAK,mBAAEE,uBAAF,CAA0BL,WAA1B,EAAuCF,MAAMI,SAA7C;AACAC,mBAAEG,eAAF,CAAkBL,YAAlB,EAAgCH,MAAMI,SAAtC,EAAkD,KAAKjF,KAAL,GAAa,KAA/D;AACH;AACJ;AAEJ,M;;wBAED2C,a,0BAAeL,I,EAAM;AACjB,aAAIuC,MAAM,KAAKjM,YAAL,CAAkBkM,WAA5B;AAAA,aACII,UADJ;;AAGA,aAAI5C,QAAQ,OAAOA,KAAKrI,iBAAZ,KAAkC,UAA9C,EAA0D;AACtDiL,iBAAI5C,KAAKrI,iBAAL,CAAuB,KAAKJ,MAA5B,CAAJ;;AAEA,iBAAIqL,KAAKA,EAAEI,qBAAP,IAAgCJ,EAAEC,cAAlC,IAAoDD,EAAEG,eAA1D,EAA2E;AACvEH,mBAAEI,qBAAF,CAAwBT,GAAxB;AACA,qBAAI,KAAKhL,MAAL,KAAgB,MAApB,EAA4B;AACxBqL,uBAAEC,cAAF,CAAiBD,EAAE3J,KAAnB,EAA0BsJ,GAA1B;AACH;AACDK,mBAAEG,eAAF,CAAkB,CAAlB,EAAqBR,GAArB,EAA2B,KAAKvI,OAAL,GAAe,KAA1C;AACH;AACJ;AACJ,M;;wBAEDvC,U,yBAAc;AACV,gBAAO,KAAP;AACH,M;;;;;mBAGU6K,Q;;;;;;;;;;AC/Ef;;;;;;;;;;;;KAEMW,M;;;AAEF,qBAAa3M,YAAb,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AAAA;;AAAA,sDACpC,mBAAMF,YAAN,EAAoBC,KAApB,EAA2BC,IAA3B,CADoC;;AAGpC,eAAKC,IAAL,GAAY,MAAKH,YAAL,CAAkBa,UAAlB,EAAZ;AACA,eAAKmE,IAAL,GAAY,IAAZ;AAJoC;AAKvC;;sBAEDlE,S,wBAAa;AACT,gBAAO,KAAKX,IAAZ;AACH,M;;sBAEDwJ,O,oBAAS9C,Q,EAAU;AACf,cAAK1G,IAAL,CAAU8C,OAAV,CAAkB,KAAKtB,QAAvB;AACA,aAAIkF,QAAJ,EAAc;AACV,kBAAKtF,IAAL,CAAU0B,OAAV,CAAkB4D,QAAlB;AACH,UAFD,MAEO;AACH,kBAAKtF,IAAL,CAAU0B,OAAV,CAAkB,KAAKjD,YAAL,CAAkByH,WAApC;AACH;AACJ,M;;;;;mBAGUkF,M;;;;;;;;;;ACzBf;;;;;;;;;;;;KAEMC,G;;;AAEF,kBAAa5M,YAAb,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AAAA;;AAAA,sDACpC,mBAAMF,YAAN,EAAoBC,KAApB,EAA2BC,IAA3B,CADoC;;AAGpC,eAAKC,IAAL,GAAY,MAAKH,YAAL,CAAkB6M,kBAAlB,EAAZ;AACA,eAAK1M,IAAL,CAAU2M,GAAV,CAAcnK,KAAd,GAAsB,MAAKmK,GAA3B;AACA,eAAK3M,IAAL,CAAU8C,OAAV,CAAkB,MAAKtB,QAAvB;AALoC;AAMvC;;;;;mBAGUiL,G;;;;;;;;;;ACbf;;;;;;;;;;;;KAEMG,S;;;AAEF,wBAAa/M,YAAb,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AAAA;;AAAA,sDACpC,wBAAMF,YAAN,EAAoBC,KAApB,EAA2BC,IAA3B,CADoC;;AAEpC,eAAKC,IAAL,GAAY,MAAKH,YAAL,CAAkBgN,gBAAlB,EAAZ;AACA,eAAK7M,IAAL,CAAUG,IAAV,GAAiB,MAAK2M,IAAtB;AACA,eAAK9M,IAAL,CAAU8C,OAAV,CAAkB,MAAKtB,QAAvB;AAJoC;AAKvC;;yBAEDkI,O,sBAAW;AACP,aAAIqD,IAAK,KAAKhH,IAAL,GAAY,EAArB;AACA,cAAK/F,IAAL,CAAU4E,SAAV,CAAoBpC,KAApB,GAA4BuK,CAA5B;AACH,M;;;;;mBAGUH,S;;;;;;;;;;ACjBf;;AACA;;;;;;;;;;;;KAEMI,K;;;AAEF,oBAAanN,YAAb,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AAAA;;AAAA,sDACpC,wBAAMF,YAAN,EAAoBC,KAApB,EAA2BC,IAA3B,CADoC;;AAGpC,eAAKkD,qBAAL,GAA6B,QAA7B;AACA,eAAKjD,IAAL,GAAY,MAAKH,YAAL,CAAkBoN,kBAAlB,EAAZ;AACA,eAAKjN,IAAL,CAAU8C,OAAV,CAAkB,MAAKtB,QAAvB;;AAEA,eAAK0B,SAAL;AACA,eAAKgK,QAAL;AARoC;AASvC;;qBAEDA,Q,uBAAY;AACR,iBAAQ,KAAKC,KAAb;AACI,kBAAK,iBAAM5O,WAAX;AACI,sBAAKyB,IAAL,CAAUoN,MAAV,GAAmB,KAAKC,KAAL,EAAnB;AACA;AACJ,kBAAK,iBAAM7O,UAAX;AACI,sBAAKwB,IAAL,CAAUoN,MAAV,GAAmB,KAAKE,IAAL,EAAnB;AACA;AACJ,kBAAK,iBAAM7O,WAAX;AACI,sBAAKuB,IAAL,CAAUoN,MAAV,GAAmB,KAAKG,KAAL,EAAnB;AACA;AACJ;AACI,uBAAM,IAAInJ,KAAJ,CAAU,0BAA0B,KAAK+I,KAAzC,CAAN;AAXR;AAaH,M;;qBAEDE,K,oBAAS;AACL,aAAIG,cAAc,KAAKC,cAAL,EAAlB;AAAA,aACIzD,aAAa,KAAK0D,aAAL,EADjB;AAAA,aAEIzM,SAASuM,YAAYG,cAAZ,CAA2B,CAA3B,CAFb;;AAIA,cAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI5D,UAApB,EAAgC4D,GAAhC,EAAqC;AACjC3M,oBAAO2M,CAAP,IAAY5H,KAAK6H,MAAL,KAAgB,CAAhB,GAAoB,CAAhC;AACH;;AAED,gBAAOL,WAAP;AACH,M;;qBAEDF,I,mBAAQ;AACJ,aAAIQ,WAAJ;AAAA,aAAQC,WAAR;AAAA,aAAYC,WAAZ;AAAA,aAAgBC,WAAhB;AAAA,aAAoBC,WAApB;AAAA,aAAwBC,WAAxB;AAAA,aAA4BC,WAA5B;AAAA,aACIZ,cAAc,KAAKC,cAAL,EADlB;AAAA,aAEIzD,aAAa,KAAK0D,aAAL,EAFjB;AAAA,aAGIzM,SAASuM,YAAYG,cAAZ,CAA2B,CAA3B,CAHb;AAAA,aAIIN,cAJJ;;AAMAS,cAAKC,KAAKC,KAAKC,KAAKC,KAAKC,KAAKC,KAAK,GAAnC;;AAEA,cAAK,IAAIR,IAAI,CAAb,EAAgBA,IAAI5D,UAApB,EAAgC4D,GAAhC,EAAqC;AACjCP,qBAAQrH,KAAK6H,MAAL,KAAgB,CAAhB,GAAoB,CAA5B;;AAEAC,kBAAK,UAAUA,EAAV,GAAeT,QAAQ,SAA5B;AACAU,kBAAK,UAAUA,EAAV,GAAeV,QAAQ,SAA5B;AACAW,kBAAK,UAAUA,EAAV,GAAeX,QAAQ,SAA5B;AACAY,kBAAK,UAAUA,EAAV,GAAeZ,QAAQ,SAA5B;AACAa,kBAAK,UAAUA,EAAV,GAAeb,QAAQ,SAA5B;AACAc,kBAAK,CAAC,MAAD,GAAUA,EAAV,GAAed,QAAQ,SAA5B;;AAEApM,oBAAO2M,CAAP,IAAYE,KAAKC,EAAL,GAAUC,EAAV,GAAeC,EAAf,GAAoBC,EAApB,GAAyBC,EAAzB,GAA8BC,EAA9B,GAAmCf,QAAQ,MAAvD;AACApM,oBAAO2M,CAAP,KAAa,IAAb;AACAQ,kBAAKf,QAAQ,QAAb;AACH;;AAED,gBAAOG,WAAP;AACH,M;;qBAEDD,K,oBAAS;AACL,aAAIC,cAAc,KAAKC,cAAL,EAAlB;AAAA,aACIzD,aAAa,KAAK0D,aAAL,EADjB;AAAA,aAEIzM,SAASuM,YAAYG,cAAZ,CAA2B,CAA3B,CAFb;AAAA,aAGIU,UAAU,GAHd;AAAA,aAIIhB,cAJJ;;AAMA,cAAK,IAAIO,IAAI,CAAb,EAAgBA,IAAI5D,UAApB,EAAgC4D,GAAhC,EAAqC;AACjCP,qBAAQA,QAAQrH,KAAK6H,MAAL,KAAgB,CAAhB,GAAoB,CAApC;;AAEA5M,oBAAO2M,CAAP,IAAY,CAACS,UAAW,OAAOhB,KAAnB,IAA6B,IAAzC;AACAgB,uBAAUpN,OAAO2M,CAAP,CAAV;AACA3M,oBAAO2M,CAAP,KAAa,GAAb;AACH;;AAED,gBAAOJ,WAAP;AACH,M;;qBAEDE,a,4BAAiB;AACb,gBAAO,IAAI,KAAK7N,YAAL,CAAkByO,UAA7B;AACH,M;;qBAEDb,c,6BAAkB;AACd,aAAIzD,aAAa,KAAK0D,aAAL,EAAjB;AAAA,aACIF,cAAc,KAAK3N,YAAL,CAAkB0O,YAAlB,CAA+B,CAA/B,EAAkCvE,UAAlC,EAA8C,KAAKnK,YAAL,CAAkByO,UAAhE,CADlB;AAEA,gBAAOd,WAAP;AACH,M;;qBAED9D,O,sBAAW;AACP,cAAK1J,IAAL,CAAUwO,IAAV,GAAiB,IAAjB;AACH,M;;;;;mBAGUxB,K;;;;;;;;;;ACxGf;;;;;;;;;;;;KAEMyB,U;;;AAEF,yBAAa5O,YAAb,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AAAA;;AAAA,sDACpC,wBAAMF,YAAN,EAAoBC,KAApB,EAA2BC,IAA3B,CADoC;;AAGpC,eAAKC,IAAL,GAAY,MAAKH,YAAL,CAAkBgN,gBAAlB,EAAZ;AACA,eAAK7M,IAAL,CAAUG,IAAV,GAAiB,MAAK2M,IAAtB;AACA,eAAK9M,IAAL,CAAU8C,OAAV,CAAkB,MAAKtB,QAAvB;;AAEA,eAAK0B,SAAL;AAPoC;AAQvC;;0BAEDwG,O,oBAASnE,I,EAAM;AACX,cAAKvF,IAAL,CAAU4E,SAAV,CAAoBpC,KAApB,GAA4B+C,IAA5B;AACH,M;;;;;mBAGUkJ,U;;;;;;ACnBf;;;AAEA,KAAMC,kBAAkB;AACpB5E,WAAM;AACF3J,eAAM,QADJ;AAEFwO,iBAAQ,CAAC,CAAD,EAAI,EAAJ,CAFN;AAGF9L,uBAAc;AAHZ,MADc;AAMpBkH,eAAU;AACN5J,eAAM,QADA;AAENwO,iBAAQ,CAAC,CAAD,EAAI,CAAJ,CAFF;AAGNC,eAAM,GAHA;AAIN/L,uBAAc;AAJR,MANU;AAYpBmH,iBAAY;AACR7J,eAAM,QADE;AAERwO,iBAAQ,CAAC,GAAD,EAAM,KAAN,CAFA;AAGR9L,uBAAc;AAHN,MAZQ;AAiBpB4H,aAAQ;AACJtK,eAAM,QADF;AAEJwO,iBAAQ,CAAC,CAAD,EAAI,CAAJ,CAFJ;AAGJ9L,uBAAc;AAHV;AAjBY,EAAxB;;mBAwBe6L,e;;;;;;AC1Bf;;;AAEA,KAAM1M,eAAe;AACjB6C,WAAM;AACF1E,eAAM,QADJ;AAEF0C,uBAAc;AAFZ,MADW;AAKjBnB,YAAO;AACHvB,eAAM,QADH;AAEHwO,iBAAQ,CAAC,CAAD,EAAI,GAAJ,CAFL;AAGH9L,uBAAc;AAHX;AALU,EAArB;;mBAYeb,Y;;;;;;ACdf;;;AAEA,KAAM6M,aAAa;AACf1E,UAAK;AACDhK,eAAM,QADL;AAEDwO,iBAAQ,CAAC,CAAD,EAAI,CAAJ,CAFP;AAGDC,eAAM,GAHL;AAID/L,uBAAc;AAJb,MADU;AAOfwH,UAAK;AACDlK,eAAM,QADL;AAEDwO,iBAAQ,CAAC,CAAD,EAAI,CAAJ,CAFP;AAGDC,eAAM,GAHL;AAID/L,uBAAc;AAJb,MAPU;AAafyH,eAAU;AACNnK,eAAM,QADA;AAENwO,iBAAQ,CAAC,CAAD,EAAI,GAAJ,CAFF;AAGNC,eAAM,GAHA;AAIN/L,uBAAc;AAJR,MAbK;AAmBf0H,aAAQ;AACJpK,eAAM,QADF;AAEJwO,iBAAQ,CAAC,EAAD,EAAK,KAAL,CAFJ;AAGJ9L,uBAAc;AAHV,MAnBO;AAwBf2H,gBAAW;AACPrK,eAAM,QADC;AAEPwO,iBAAQ,CAAC,EAAD,EAAK,IAAL,CAFD;AAGP9L,uBAAc;AAHP,MAxBI;AA6Bf4H,aAAQ;AACJtK,eAAM,QADF;AAEJwO,iBAAQ,CAAC,CAAD,EAAI,CAAJ,CAFJ;AAGJ9L,uBAAc;AAHV;AA7BO,EAAnB;;mBAoCegM,U;;;;;;ACtCf;;;;AAEA;;AAEA,KAAMC,gBAAgB;AAClBhO,aAAQ;AACJX,eAAM,QADF;AAEJwO,iBAAQ,CACJ,iBAAMlP,oBADF,EAEJ,iBAAMC,oBAFF,EAGJ,iBAAMC,sBAHF,CAFJ;AAOJkD,uBAAc,iBAAMpD;AAPhB,MADU;AAUlBuH,aAAQ;AACJ7G,eAAM,QADF;AAEJwO,iBAAQ,CAAC,CAAD,EAAI,GAAJ,CAFJ;AAGJ9L,uBAAc;AAHV,MAVU;AAelBoE,YAAO;AACH9G,eAAM,QADH;AAEHwO,iBAAQ,CAAC,CAAD,EAAI,GAAJ,CAFL;AAGH9L,uBAAc;AAHX,MAfW;AAoBlBqE,cAAS;AACL/G,eAAM,QADD;AAELwO,iBAAQ,CAAC,CAAD,EAAI,GAAJ,CAFH;AAGL9L,uBAAc;AAHT,MApBS;AAyBlBU,cAAS;AACLpD,eAAM,QADD;AAELwO,iBAAQ,CAAC,CAAD,EAAI,GAAJ,CAFH;AAGL9L,uBAAc;AAHT;AAzBS,EAAtB;;mBAgCeiM,a;;;;;;ACpCf;;;;AAEA;;AAEA,KAAMC,cAAc;AAChBhJ,WAAM;AACF5F,eAAM,QADJ;AAEFwO,iBAAQ,CAAC,EAAD,EAAK,KAAL,CAFN;AAGF9L,uBAAc;AAHZ,MADU;AAMhB+H,QAAG;AACCzK,eAAM,QADP;AAECwO,iBAAQ,CAAC,CAAD,EAAI,GAAJ,CAFT;AAGC9L,uBAAc;AAHf,MANa;AAWhBgI,iBAAY;AACR1K,eAAM,QADE;AAERwO,iBAAQ,CAAC,CAAC,EAAF,EAAM,EAAN,CAFA;AAGR9L,uBAAc;AAHN,MAXI;AAgBhBiI,iBAAY;AACR3K,eAAM,QADE;AAERwO,iBAAQ,CACJ,iBAAMrP,cADF,EAEJ,iBAAML,eAFF,EAGJ,iBAAMD,eAHF,EAIJ,iBAAMG,gBAJF,EAKJ,iBAAMJ,cALF,EAMJ,iBAAMG,eANF,EAOJ,iBAAMG,YAPF,EAQJ,iBAAMD,cARF,CAFA;AAYRyD,uBAAc,iBAAM9D;AAZZ,MAhBI;AA8BhB0L,aAAQ;AACJtK,eAAM,QADF;AAEJwO,iBAAQ,CAAC,CAAD,EAAI,CAAJ,CAFJ;AAGJ9L,uBAAc;AAHV;AA9BQ,EAApB;;mBAqCekM,W;;;;;;ACzCf;;;;AAEA;;AAEA,KAAMC,iBAAiB;AACnBjJ,WAAM;AACF5F,eAAM,QADJ;AAEFwO,iBAAQ,CAAC,CAAD,EAAI,GAAJ,CAFN;AAGF9L,uBAAc;AAHZ,MADa;AAMnB/B,aAAQ;AACJX,eAAM,QADF;AAEJwO,iBAAQ,CACJ,iBAAMpP,qBADF,EAEJ,iBAAMC,uBAFF,CAFJ;AAMJqD,uBAAc,iBAAMtD;AANhB,MANW;AAcnBuN,WAAM;AACF3M,eAAM,QADJ;AAEFwO,iBAAQ,CACJ,iBAAMjQ,SADF,EAEJ,iBAAMC,WAFF,EAGJ,iBAAMC,aAHF,EAIJ,iBAAMC,aAJF,EAKJ,iBAAMC,WALF,CAFN;AASF+D,uBAAc,iBAAMnE;AATlB;AAda,EAAvB;;mBA2BesQ,c;;;;;;AC/Bf;;;AAEA,KAAMC,kBAAkB;AACpB1E,aAAQ;AACJpK,eAAM,QADF;AAEJwO,iBAAQ,CAAC,CAAD,EAAI,CAAJ,CAFJ;AAGJC,eAAM,GAHF;AAIJ/L,uBAAc;AAJV,MADY;AAOpBmI,gBAAW;AACP7K,eAAM,QADC;AAEPwO,iBAAQ,CAAC,CAAD,EAAI,CAAJ,CAFD;AAGPC,eAAM,GAHC;AAIP/L,uBAAc;AAJP,MAPS;AAapBmH,iBAAY;AACR7J,eAAM,QADE;AAERwO,iBAAQ,CAAC,GAAD,EAAM,KAAN,CAFA;AAGR9L,uBAAc;AAHN,MAbQ;AAkBpB4H,aAAQ;AACJtK,eAAM,QADF;AAEJwO,iBAAQ,CAAC,CAAD,EAAI,CAAJ,CAFJ;AAGJ9L,uBAAc;AAHV;AAlBY,EAAxB;;mBAyBeoM,e;;;;;;AC3Bf;;;;AAEA;;AAEA,KAAMC,aAAa;AACf/B,YAAO;AACHhN,eAAM,QADH;AAEHwO,iBAAQ,CACJ,iBAAMlQ,WADF,EAEJ,iBAAMD,UAFF,EAGJ,iBAAMD,WAHF,CAFL;AAOHsE,uBAAc,iBAAMtE;AAPjB,MADQ;AAUf4E,aAAQ;AACJhD,eAAM,QADF;AAEJwO,iBAAQ,CAAC,CAAC,IAAF,EAAQ,IAAR,CAFJ;AAGJ9L,uBAAc;AAHV;AAVO,EAAnB;;mBAiBeqM,U;;;;;;ACrBf;;;;AAEA;;AAEA,KAAMC,kBAAkB;AACpBhM,aAAQ;AACJhD,eAAM,QADF;AAEJwO,iBAAQ,CAAC,CAAC,IAAF,EAAQ,IAAR,CAFJ;AAGJ9L,uBAAc;AAHV,MADY;AAMpBiK,WAAM;AACF3M,eAAM,QADJ;AAEFwO,iBAAQ,CACJ,iBAAMjQ,SADF,EAEJ,iBAAMC,WAFF,EAGJ,iBAAMC,aAHF,EAIJ,iBAAMC,aAJF,EAKJ,iBAAMC,WALF,CAFN;AASF+D,uBAAc,iBAAMnE;AATlB;AANc,EAAxB;;mBAmBeyQ,e;;;;;;ACvBf;;;AAEA,KAAMC,iBAAiB;AACnBlE,iBAAY;AACR/K,eAAM,QADE;AAERwO,iBAAQ,CAAC,CAAD,EAAI,CAAJ,CAFA;AAGRC,eAAM,GAHE;AAIR/L,uBAAc;AAJN,MADO;AAOnBsI,YAAO;AACHhL,eAAM,QADH;AAEHwO,iBAAQ,CAAC,CAAD,EAAI,CAAJ,CAFL;AAGHC,eAAM,GAHH;AAIH/L,uBAAc;AAJX,MAPY;AAanBuI,kBAAa;AACTjL,eAAM,QADG;AAETwO,iBAAQ,CAAC,CAAD,EAAI,CAAJ,CAFC;AAGTC,eAAM,GAHG;AAIT/L,uBAAc;AAJL,MAbM;AAmBnBwI,qBAAgB;AACZlL,eAAM,QADM;AAEZwO,iBAAQ,CAAC,CAAD,EAAI,CAAJ,CAFI;AAGZ9L,uBAAc;AAHF,MAnBG;AAwBnB4H,aAAQ;AACJtK,eAAM,QADF;AAEJwO,iBAAQ,CAAC,CAAD,EAAI,CAAJ,CAFJ;AAGJ9L,uBAAc;AAHV;AAxBW,EAAvB;;mBA+BeuM,c;;;;;;ACjCf;;;AAEA,KAAMC,WAAW;AACb1C,UAAK;AACDxM,eAAM,QADL;AAEDwO,iBAAQ,CAAC,CAAC,CAAF,EAAK,CAAL,CAFP;AAGDC,eAAM,GAHL;AAID/L,uBAAc;AAJb;AADQ,EAAjB;;mBASewM,Q;;;;;;ACXf;;;AAEA,KAAMC,qBAAqB;AACvBjF,UAAK;AACDlK,eAAM,QADL;AAEDwO,iBAAQ,CAAC,CAAD,EAAI,CAAJ,CAFP;AAGDC,eAAM,GAHL;AAID/L,uBAAc;AAJb,MADkB;AAOvByH,eAAU;AACNnK,eAAM,QADA;AAENwO,iBAAQ,CAAC,CAAD,EAAI,CAAJ,CAFF;AAGNC,eAAM,GAHA;AAIN/L,uBAAc;AAJR,MAPa;AAavB0I,oBAAe;AACXpL,eAAM,QADK;AAEXwO,iBAAQ,CAAC,CAAD,EAAI,KAAJ,CAFG;AAGX9L,uBAAc;AAHH,MAbQ;AAkBvB2I,qBAAgB;AACZrL,eAAM,QADM;AAEZwO,iBAAQ,CAAC,CAAD,EAAI,KAAJ,CAFI;AAGZ9L,uBAAc;AAHF,MAlBO;AAuBvB4H,aAAQ;AACJtK,eAAM,QADF;AAEJwO,iBAAQ,CAAC,CAAD,EAAI,CAAJ,CAFJ;AAGJ9L,uBAAc;AAHV;AAvBe,EAA3B;;mBA8BeyM,kB;;;;;;AChCf;;;AAEA,KAAMC,eAAe;AACjB7D,gBAAW;AACPvL,eAAM,QADC;AAEPwO,iBAAQ,CAAC,CAAD,EAAI,CAAJ,CAFD;AAGPC,eAAM,GAHC;AAIP/L,uBAAc;AAJP,MADM;AAOjB8I,WAAM;AACFxL,eAAM,QADJ;AAEFwO,iBAAQ,CAAC,CAAD,EAAI,EAAJ,CAFN;AAGFC,eAAM,GAHJ;AAIF/L,uBAAc;AAJZ,MAPW;AAajB+I,kBAAa;AACTzL,eAAM,QADG;AAETwO,iBAAQ,CAAC,CAAD,EAAI,GAAJ,CAFC;AAGT9L,uBAAc;AAHL,MAbI;AAkBjB4H,aAAQ;AACJtK,eAAM,QADF;AAEJwO,iBAAQ,CAAC,CAAD,EAAI,CAAJ,CAFJ;AAGJ9L,uBAAc;AAHV;AAlBS,EAArB;;mBAyBe0M,Y;;;;;;AC3Bf;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;ACTA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAiB,mBAAmB;AACpC;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;;;;;;;AChBA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AChGA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAG;;AAEH;AACA;;AAEA;;;;;;;AC3BA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAK;AACL;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,yCAAwC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAuB,YAAY;AACnC;AACA;AACA,8DAA6D;AAC7D;AACA,0DAAyD;AACzD;AACA,0DAAyD;AACzD;AACA,0DAAyD;AACzD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,gCAA+B,eAAe;AAC9C;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,gCAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,gCAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,gCAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,wDAAuD;AACvD;AACA,gCAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA,0BAAyB;AACzB;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,gCAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,oCAAmC,WAAW;AAC9C;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAmC;AACnC,gCAA+B,WAAW;AAC1C,+BAA8B,iBAAiB;AAC/C;AACA;AACA;AACA;AACA,kBAAiB;AACjB,gCAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;AACA;AACA,EAAC","file":"web-synth.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 2fe8b77f25fe2cd1119a\n **/","import 'stereo-panner-shim';\nimport WebSynth from './WebSynth';\n\nconst win = window || {};\nwin.WebSynth = WebSynth;\n\nexport default WebSynth;\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/index.js\n **/","'use strict';\n\nconst TYPES = {\n        MASTER: 'Master',\n        OSCILLATOR: 'Oscillator',\n        NOISE: 'Noise',\n        MODULATOR: 'Modulator',\n        ENVELOPE: 'Envelope',\n        PAN: 'Pan',\n        FILTER: 'Filter',\n        DELAY: 'Delay',\n        PINGPONGDELAY: 'PingPongDelay',\n        TREMOLO: 'Tremolo',\n        OVERDRIVE: 'Overdrive',\n        BITCRUSHER: 'Bitcrusher',\n        MOOGFILTER: 'MoogFilter'\n    },\n    CONST = {\n        MASTER: 'master',\n        ADSR: 'adsr',\n\n        NOISE_WHITE: 'white',\n        NOISE_PINK: 'pink',\n        NOISE_BROWN: 'brown',\n\n        WAVE_SINE: 'sine',\n        WAVE_SQUARE: 'square',\n        WAVE_SAWTOOTH: 'sawtooth',\n        WAVE_TRIANLGE: 'triangle',\n        WAVE_CUSTOM: 'custom',\n\n        FILTER_LOWPASS: 'lowpass',\n        FILTER_HIGHPASS: 'highpass',\n        FILTER_BANDPASS: 'bandpass',\n        FILTER_LOWSHELF: 'lowshelf',\n        FILTER_HIGHSHELF: 'highshelf',\n        FILTER_PEAKING: 'peaking',\n        FILTER_NOTCH: 'notch',\n        FILTER_ALLPASS: 'allpass',\n\n        MODULATOR_TARGET_FREQ: 'frequency',\n        MODULATOR_TARGET_DETUNE: 'detune',\n\n        ENVELOPE_TARGET_GAIN: 'gain',\n        ENVELOPE_TARGET_FREQ: 'frequency',\n        ENVELOPE_TARGET_DETUNE: 'detune'\n    };\n\nexport { TYPES, CONST };\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/core/Constants.js\n **/","import { TYPES } from '../core/Constants';\nimport Module from '../core/Module';\nimport EffectManager from './EffectManager';\n\nclass Effect extends Module {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n        this.main = null;\n        this.mainEffect = null;\n    }\n\n    setMainEffect (type, mainEffect, props) {\n        const effectManager = EffectManager(this.audioContext);\n        this.main = new effectManager[type](props);\n        this.mainEffect = this.main[mainEffect];\n    }\n\n    setMainProperties (props) {\n        Object.keys(props).forEach((e) => {\n            if (this.main[e]) {\n                this.main[e] = props[e];\n            }\n        });\n    }\n\n    createGain () {\n        return false;\n    }\n\n    getLineIn (sourceType, source) {\n        if (sourceType === TYPES.MODULATOR) {\n            return this.mainEffect[source.target];\n        } else {\n            return this.main.input;\n        }\n    }\n\n    getLineOut () {\n        return this.main.output;\n    }\n\n    getEnvelopeTarget (target) {\n        let ret = null;\n\n        if (target === 'gain') {\n            ret = this.main.output.gain;\n        } else if (this.main && this.mainEffect && this.mainEffect[target]) {\n            ret = this.main.filter[target];\n        }\n\n        return ret;\n    }\n\n}\n\nexport default Effect;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/core/Effect.js\n **/","import * as Props from '../properties';\n\nclass Module {\n\n    constructor (audioContext, props, name) {\n        this.name = name;\n        this.audioContext = audioContext;\n        this.gain = null;\n        this.envelope = null;\n        this.main = null;\n\n        this.setupProperties(props);\n\n        this.createGain(this.level);\n    }\n\n    toString () {\n        return this.name;\n    }\n\n    setupProperties (props) {\n        let properties = props || {},\n            propsHandler = this.toString() + 'Props',\n            specificProps = Props[propsHandler],\n            moduleProperties;\n\n        moduleProperties = { ...Props.DefaultProps, ...specificProps };\n        Object.keys(moduleProperties).forEach((e) => {\n            this.setProperty(e, properties[e], moduleProperties[e]);\n        });\n    }\n\n    getRealProperties (propName) {\n        switch (propName) {\n            case 'level' : return 'gain';\n            case 'freq' : return 'frequency';\n            case 'wave' : return 'type';\n            case 'q' : return 'Q';\n            case 'link' : return null;\n            default : return propName;\n        }\n    }\n\n    updateProperties (props) {\n        Object.keys(props).forEach(p => {\n            let realProp = this.getRealProperties(p);\n\n            if (this.main && realProp && this[p] !== props[p]) {\n                if (realProp === 'gain' && this.gain && this.gain.gain) {\n                    let l = (props[p] >= 0) ? props[p] % 101 : 100;\n                    this.gain.gain.value = l / 100;\n                } else if (this.main[realProp] !== undefined && this.main[realProp].value !== undefined) {\n                    this.main[realProp].value = props[p];\n                } else if (this.main[realProp] !== undefined) {\n                    this.main[realProp] = props[p];\n                }\n            }\n        });\n    }\n\n    setProperty (propKey, propVal, propConfig) {\n        this[propKey] = null;\n        if (propConfig.type && typeof propVal === propConfig.type) {\n            this[propKey] = propVal;\n        } else if (propConfig.defaultValue !== undefined) {\n            this[propKey] = propConfig.defaultValue;\n        }\n    }\n\n    createGain (level) {\n        let l = (level >= 0) ?  level % 101 : 100;\n        this.gain = this.audioContext.createGain();\n        this.envelope = this.audioContext.createGain();\n        this.gain.gain.value = l / 100;\n        this.envelope.gain.value = 1;\n\n        this.envelope.connect(this.gain);\n    }\n\n    disconnect () {\n        this.gain.disconnect();\n    }\n\n    getLineIn () {\n        return this.main;\n    }\n\n    getLineOut () {\n        return this.gain;\n    }\n\n    getEnvelopeTarget (target) {\n        let ret = null;\n\n        if (this.main && this.main[target]) {\n            ret = this.main[target];\n        } else if (target === 'gain' && this.gain) {\n            ret = this.envelope.gain;\n        }\n        return ret;\n    }\n}\n\nexport default Module;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/core/Module.js\n **/","'use strict';\n\nimport { TYPES } from '../core/Constants';\nimport Module from '../core/Module';\n\nclass SoundSource extends Module {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.defaultLineInProperty = 'frequency';\n    }\n\n    setDetune () {\n        if (this.main && this.main.detune) {\n            this.main.detune.value = this.detune;\n        }\n    }\n\n    noteOn () {\n        this.main.start(0);\n    }\n\n    noteOff (release) {\n        this.main.stop(release);\n    }\n\n    getLineIn (sourceType, source) {\n        if (sourceType === TYPES.MODULATOR) {\n            return this.main[source.target];\n        } else {\n            return this.main[this.defaultLineInProperty];\n        }\n    }\n}\n\nexport default SoundSource;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/core/SoundSource.js\n **/","'use strict';\n\nexport { default as Master } from './Master';\nexport { default as Envelope } from './Envelope';\nexport { default as Pan } from './Pan';\n\n//SOUNDSOURCES\nexport { default as Oscillator } from './SoundSources/Oscillator';\nexport { default as Modulator } from './SoundSources/Modulator';\nexport { default as Noise } from './SoundSources/Noise';\n\n//EFFECTS\nexport { default as Filter } from './Effects/Filter';\nexport { default as Delay } from './Effects/Delay';\nexport { default as PingPongDelay } from './Effects/PingPongDelay';\nexport { default as Tremolo } from './Effects/Tremolo';\nexport { default as Overdrive } from './Effects/Overdrive';\nexport { default as Bitcrusher } from './Effects/Bitcrusher';\nexport { default as MoogFilter } from './Effects/MoogFilter';\n\n//TODO implement modules...\n\n// export { default as WahWah } from './Effects/WahWah';\n// export { default as Cabinet } from './Effects/Cabinet';\n\n//Sampler\n//Convolver\n//Compressor\n//Phaser\n//Chorus\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/index.js\n **/","'use strict';\n\nexport { default as DefaultProps } from './DefaultProps';\n\n//CONTROLS\nexport { default as ModulatorProps } from './ModulatorProps';\nexport { default as EnvelopeProps } from './EnvelopeProps';\nexport { default as PanProps } from './PanProps';\n\n//SOUNDSOURCES\nexport { default as OscillatorProps } from './OscillatorProps';\nexport { default as NoiseProps } from './NoiseProps';\n\n//EFFECTS\nexport { default as FilterProps } from './FilterProps';\nexport { default as DelayProps } from './DelayProps';\nexport { default as PingPongDelayProps } from './PingPongDelayProps';\nexport { default as TremoloProps } from './TremoloProps';\nexport { default as OverdriveProps } from './OverdriveProps';\nexport { default as BitcrusherProps } from './BitcrusherProps';\nexport { default as MoogFilterProps } from './MoogFilterProps';\n\n//TODO implement modules...\n\n// export { default as WahWahProps } from './WahWahProps';\n// export { default as CabinetProps } from './CabinetProps';\n\n//Sampler\n//Convolver\n//Compressor\n//Phaser\n//Chorus\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/index.js\n **/","import * as Modules from './src/modules';\nimport * as Props from './src/properties';\nimport { CONST, TYPES } from './src/core/Constants';\nimport Synth from './src/Synth';\n\nconst\n    notes = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'],\n    methods = Object.keys(Modules);\nlet synth;\n\n/**\n * WebSynth Library.\n * @example\n * const AudioCtx = window.AudioContext || window.webkitAudioContext;\n * const synth = new WebSynth(new AudioCtx(), { spectrum: false });\n */\nclass WebSynth {\n    /**\n     * Create a playable web synthesizer instance.\n     * @param {AudioContext} audioContext - Web Audio Context instance.\n     * @param {WebSynthProperties} [properties] - synth properties.\n     */\n    constructor (audioContext, props) {\n        const properties = props || {};\n        synth = new Synth(audioContext, properties);\n        this.isPlaying = false;\n    }\n\n    /**\n     * Returns current synth modules configuration object.\n     * @return {Object} current synth modules configuration.\n     * @property {Object} master - the master ModuleProperties.\n     * @property {Object} adsr - the adsr ModuleProperties.\n     * @property {ModuleProperties} <module_id> - one ModuleProperties for each created module.\n     */\n    getModules () {\n        return {\n            ...synth.modulesConfig\n        };\n    }\n\n    /**\n     * Create a new synth module.\n     * @param {String} id - the module identifier.\n     * @param {String} type - the type of module.\n     * @param {Object} properties - module properties.\n     * @return {WebSynth}\n     * @throws {Error} throw error when module with id is already created.\n     */\n    create (id, type, properties) {\n        const currentModule = this.getModules()[id];\n        if (currentModule) {\n            throw new Error('Module ' + id + ' already created. Use update method instead.');\n        }\n        synth.module(type, id, properties);\n        return this;\n    }\n\n    /**\n     * Update the synth module by id.\n     * @param {String} id - the module identifier.\n     * @param {Object} properties - module properties.\n     * @return {WebSynth}\n     * @throws {Error} throw error when module with id is not found.\n     */\n    update (id, properties) {\n        const currentModule = this.getModules()[id];\n        if (!currentModule) {\n            throw new Error('Module ' + id + ' not found. Use create method instead.');\n        }\n        synth.module(currentModule.type, id, properties);\n        return this;\n    }\n\n    /**\n     * Update the master module.\n     * @param {Object} properties - master properties.\n     * @return {WebSynth}\n     */\n    master (properties) {\n        synth.module(TYPES.MASTER, CONST.MASTER, properties);\n        return this;\n    }\n\n    /**\n     * Update the ADSR module.\n     * @param {Object} properties - ADSR (Envelope) properties\n     * @return {WebSynth}\n     */\n    adsr (properties) {\n        synth.module(TYPES.ENVELOPE, CONST.ADSR, properties);\n        return this;\n    }\n\n    /**\n     * Destroy the synth module by id.\n     * @param {String} id - the module identifier.\n     * @return {WebSynth}\n     * @throws {Error} throw error when module with id is not found.\n     */\n    destroy (id) {\n        const currentModule = this.getModules()[id];\n        if (!currentModule) {\n            throw new Error('Module ' + id + ' not found.');\n        }\n        synth.destroyModule(id);\n        return this;\n    }\n\n    /**\n     * Start playing the input frequency.\n     * @param {Number} frequency - the frequency value.\n     * @return {WebSynth}\n     */\n    play (frequency) {\n        if (+frequency >= 0) {\n            synth.play(frequency);\n            this.isPlaying = true;\n        }\n        return this;\n    }\n\n    /**\n     * Stop playing the input frequency.\n     * @param {Number} frequency - the frequency value.\n     * @return {WebSynth}\n     */\n    stop (frequency) {\n        if (+frequency >= 0) {\n            synth.stop(frequency);\n            this.isPlaying = false;\n        }\n        return this;\n    }\n\n    /**\n     * Link two modules, connect source module to target module.\n     * @param {String} source - the source module id.\n     * @param {String} target - the target module id.\n     * @return {WebSynth}\n     * @throws {Error} throw error when source is master.\n     * @throws {Error} throw error when source module is not found.\n     * @throws {Error} throw error when target module is not found.\n     */\n    link (source, target) {\n        if (source === CONST.MASTER) {\n            throw new Error('Module master can\\'t be linked to any modules.');\n        }\n        if (!synth.modulesConfig[source]) {\n            throw new Error('Source module ' + source + ' not found.');\n        }\n\n        if (!synth.modulesConfig[target]) {\n            throw new Error('Target module ' + target + ' not found.');\n        }\n        synth.modulesConfig[source].props.link = target;\n        return this;\n    }\n\n    /**\n     * Get module properties by type.\n     * @param {String} moduleType - module='' type, taken from WebSynth.TYPES.\n     * @return {Array}\n     */\n    static getModuleProperties (moduleType = '') {\n        const moduleProps = Props[moduleType + 'Props'] || {};\n\n        return [\n            ...Object.keys(moduleProps).map(prop => ({ ...moduleProps[prop], name: prop })),\n            ...Object.keys(Props.DefaultProps).map(prop => ({ ...Props.DefaultProps[prop], name: prop }))\n        ];\n    }\n\n    /**\n     * Describe all WebSynth modules with parameters configuration.\n     * @return {Array}\n     */\n    static describeModules () {\n        return [...methods]\n            .filter(e => e !== '__esModule')\n            .reduce((result, e) => {\n                return [\n                    ...result,\n                    {\n                        type: e,\n                        properties: WebSynth.getModuleProperties(e)\n                    }\n                ];\n            }, []);\n    }\n\n    /**\n     * Get frequency float value calculated from given note and octave.\n     * @param {String} note - note char indicator. sharp char for semi-tones.\n     * @param {Number} octave - octave number.\n     * @return {Number}\n     */\n    static getFrequency (note, octave) {\n        const\n            octaveD = parseInt(octave, 10) - 4,\n            noteD = notes.indexOf(note) - notes.indexOf('A'),\n            delta = 12 * octaveD,\n            exp = (noteD + delta),\n            freq = 440 * Math.pow(1.059463, exp);\n        return parseFloat(freq.toFixed(3)) || 0;\n    }\n\n    /**\n     * Get complete notes list.\n     * @return {Array}\n     */\n    static getNotes () {\n        return notes;\n    }\n}\n\nWebSynth.CONST = CONST;\nWebSynth.TYPES = TYPES;\n\nexport default WebSynth;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/WebSynth.js\n **/","import { CONST } from './core/Constants';\nimport Voice from './core/Voice';\n\n/**\n * Synth Class\n * @example\n * const AudioCtx = window.AudioContext || window.webkitAudioContext;\n * const synth = new Synth(new AudioCtx(), { spectrum: false });\n */\nclass Synth {\n\n    /**\n     * Create a synthesizer instance.\n     * @param {AudioContext} audioContext - Web Audio Context instance.\n     * @param {WebSynthProperties} [properties] - synth properties.\n     */\n    constructor (audioContext, props) {\n        let properties = props || {};\n\n        this.audioContext = audioContext;\n        this.modulesConfig = {};\n        this.voices = {};\n        this.spectrum = properties.spectrum || false;\n        this.updateSpectrum = properties.updateSpectrum || null;\n        this.resetSpectrum = properties.resetSpectrum || null;\n\n        this.analyser = null;\n        this.javascriptNode = null;\n\n        if (this.audioContext && typeof this.audioContext.createGainNode === 'function') {\n            this.audioContext.createGain = this.audioContext.createGainNode;\n        }\n        if (this.audioContext && typeof this.audioContext.createDelayNode === 'function') {\n            this.audioContext.createDelay = this.audioContext.createDelayNode;\n        }\n\n        if (this.spectrum === true) {\n            this.createSpectrum();\n        }\n\n        this.module('Master', CONST.MASTER, {\n            level: 100\n        });\n\n        this.module('Envelope', CONST.ADSR, {\n            link: CONST.MASTER,\n            target: 'gain',\n            level: 100,\n            attack: null,\n            decay: 0.1,\n            sustain: 100,\n            release: 5\n        });\n\n    }\n\n    /**\n     * Create a spectrum node for the synth instance.\n     */\n    createSpectrum () {\n        var SMOOTHING = 0.8,\n            FFT_SIZE = 2048;\n\n        if (this.audioContext) {\n            this.javascriptNode = this.audioContext.createScriptProcessor(2048, 1, 1);\n            this.javascriptNode.connect(this.audioContext.destination);\n\n            this.analyser = this.audioContext.createAnalyser();\n            this.analyser.smoothingTimeConstant = SMOOTHING;\n            this.analyser.fftSize = FFT_SIZE;\n            this.analyser.minDecibels = -160;\n            this.analyser.maxDecibels = 0;\n\n            this.analyser.connect(this.audioContext.destination);\n        }\n    }\n\n    /**\n     * Module method to create | update modules.\n     * @param {String} type - the type of module.\n     * @param {String} label - the module identifier.\n     * @param {Object} props={} - module properties\n     */\n    module (type, label, props = {}) {\n        if (!type || type.constructor !== String) {\n            throw new Error('Synth Module :: missing type');\n        }\n\n        if (!label || label.constructor !== String) {\n            throw new Error('Synth Module :: missing label');\n        }\n\n        if (!this.modulesConfig[label]) {\n            this.addModule(type, label, props);\n        } else {\n            this.updateModule(label, props);\n        }\n    }\n\n    /**\n     * Add a new module.\n     * @param {String} type - the type of module.\n     * @param {String} label - the module identifier.\n     * @param {Object} props={} - module properties.\n     * @throws {Error} throw error when module with label is already created.\n     */\n    addModule (type, label, props = {}) {\n        if (this.modulesConfig[label]) {\n            throw new Error('Module ' + label + ' already created. Use updateModule method instead.');\n        }\n        this.modulesConfig[label] = {\n            type,\n            props\n        };\n    }\n\n    /**\n     * Update the module identified by label and update all running voices.\n     * @param {String} label - the module identifier.\n     * @param {Object} props={} - module properties.\n     * @throws {Error} throw error when module with label is not found.\n     */\n    updateModule (label, props = {}) {\n        if (!this.modulesConfig[label]) {\n            throw new Error('Module ' + label + ' not found. Use addModule method instead.');\n        }\n        Object.keys(props).forEach((e) => {\n            if (this.modulesConfig[label].props[e] !== undefined) {\n                this.modulesConfig[label].props[e] = props[e];\n            }\n        });\n\n        Object.keys(this.voices).forEach((e) => {\n            this.voices[e].updateModule(label, props);\n        });\n    }\n\n    /**\n     * Destroy the module identified by label and remove running voices.\n     * @param {String} label - the module identifier.\n     * @throws {Error} throw error when module with label is not found.\n     */\n    destroyModule (label) {\n        if (!this.modulesConfig[label]) {\n            throw new Error('Module ' + label + ' not found.');\n        }\n        delete this.modulesConfig[label];\n        Object.keys(this.voices).forEach((e) => {\n            this.voices[e].removeModule(label);\n        });\n    }\n\n    /**\n     * Start playing the input note and start spectrum data if necessary.\n     * @param {Number} note - the note frequency value.\n     */\n    play (note) {\n        let frequencyData,\n            freqBufferLength = (this.analyser && this.analyser.frequencyBinCount) ?\n                this.analyser.frequencyBinCount : 1024;\n\n        if (!this.voices[note]) {\n            this.voices[note] = new Voice(note, this.audioContext, this.modulesConfig, this.analyser);\n            this.voices[note].noteOn();\n        }\n        if (this.spectrum === true && this.javascriptNode) {\n\n            frequencyData = new Uint8Array(freqBufferLength);\n\n            this.javascriptNode.onaudioprocess = () => {\n                this.analyser.getByteFrequencyData(frequencyData);\n                if (this.updateSpectrum && typeof this.updateSpectrum === 'function') {\n                    this.updateSpectrum(frequencyData);\n                }\n            };\n        }\n    }\n\n    /**\n     * Stop playing the input note and stop spectrum data if necessary.\n     * @param {Number} note - the note frequency value.\n     */\n    stop (note) {\n        if (this.voices[note]) {\n            this.voices[note].noteOff();\n            this.voices[note] = undefined;\n            delete this.voices[note];\n        }\n        if (\n            Object.keys(this.voices).length === 0 &&\n            this.spectrum === true &&\n            this.javascriptNode\n        ) {\n            this.javascriptNode.onaudioprocess = null;\n            if (\n                this.resetSpectrum &&\n                typeof this.resetSpectrum === 'function'\n            ) {\n                this.resetSpectrum();\n            }\n        }\n    }\n}\n\nexport default Synth;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/Synth.js\n **/","'use strict';\n\nimport Tuna from 'tunajs';\n\nconst EffectManager = (audioContext) => new Tuna(audioContext);\n\nexport default EffectManager;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/core/EffectManager.js\n **/","import * as Modules from '../modules';\nimport SoundSource from './SoundSource';\nimport { TYPES } from './Constants';\n\n/**\n * Voice Class\n * @example\n * const v = new Voice(440, AudioContext, { master: { ... }, adsr: { ... } }, null);\n */\nclass Voice {\n\n    constructor (note, audioContext, modulesConfig, analyser) {\n        this.note = note;\n        this.modulesConfig = modulesConfig;\n        this.modules = {};\n        this.soundSources = [];\n        this.master = null;\n        this.analyser = analyser || null;\n\n        if (audioContext) {\n            this.setupModules(audioContext);\n            this.linkModules();\n        }\n    }\n\n    setupModules (audioContext) {\n        let modConf,\n            m;\n\n        Object.keys(this.modulesConfig).forEach((mod) => {\n            modConf = this.modulesConfig[mod];\n            if (modConf.type && modConf.props) {\n                m = new Modules[modConf.type](audioContext, modConf.props, modConf.type);\n                this.modules[mod] = {\n                    type: modConf.type,\n                    instance: m\n                };\n\n                if (m.instance instanceof SoundSource) {\n                    this.soundSources.push(m);\n                } else if (modConf.type === TYPES.MASTER) {\n                    this.master = m;\n                }\n            }\n        });\n    }\n\n    updateModule (moduleId, props) {\n        if (this.modules[moduleId] && this.modules[moduleId].instance) {\n            this.modules[moduleId].instance.updateProperties(props);\n        }\n    }\n\n    removeModule (moduleId) {\n        if (this.modules[moduleId] && this.modules[moduleId].instance) {\n            this.modules[moduleId].instance.disconnect();\n        }\n    }\n\n    linkModules () {\n        Object.keys(this.modules).forEach((mod) => {\n            let currentModule = this.modules[mod].instance,\n                currentModuleType = this.modules[mod].type,\n                destinationModule,\n                source,\n                dest;\n\n            if (currentModule.link) {\n                destinationModule = this.modules[currentModule.link];\n                if (destinationModule && destinationModule.instance) {\n                    source = currentModule.getLineOut();\n                    dest = destinationModule.instance.getLineIn(currentModuleType, currentModule);\n                    //console.log(mod, source, currentModule.link, dest);\n                    if (source && dest) {\n                        source.connect(dest);\n                    }\n                }\n            }\n        });\n\n        this.master.lineOut(this.analyser);\n    }\n\n    noteOn () {\n        let m,\n            dest;\n\n        Object.keys(this.modules).forEach((e) => {\n            m = this.modules[e].instance;\n\n            if (typeof m.setEnvelope === 'function') {\n                dest = (this.modules[m.link]) ? this.modules[m.link].instance : null;\n                m.setEnvelope(dest);\n            }\n            if (typeof m.setNote === 'function') {\n                m.setNote(+this.note);\n            }\n        });\n        Object.keys(this.modules).forEach((e) => {\n            m = this.modules[e].instance;\n            if (m && typeof m.noteOn === 'function') {\n                m.noteOn();\n            }\n        });\n    }\n\n    noteOff () {\n        let release = 0,\n            adsr = (this.modules.adsr) ? this.modules.adsr.instance : null,\n            m,\n            dest;\n\n        if (adsr) {\n            release = adsr.getReleaseTime();\n        }\n\n        Object.keys(this.modules).forEach((e) => {\n            m = this.modules[e].instance;\n            if (m && typeof m.resetEnvelope === 'function') {\n                dest = (this.modules[m.link]) ? this.modules[m.link].instance : null;\n                m.resetEnvelope(dest);\n            }\n        });\n        Object.keys(this.modules).forEach((e) => {\n            m = this.modules[e].instance;\n            if (m && typeof m.noteOff === 'function') {\n                m.noteOff(release);\n            }\n        });\n    }\n\n}\n\nexport default Voice;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/core/Voice.js\n **/","'use strict';\n\nimport Effect from '../../core/Effect';\n\nclass Bitcrusher extends Effect {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.setMainEffect('Bitcrusher', 'output');\n        this.setMainProperties({\n            bits: this.bits,\n            normfreq: this.normfreq,\n            bufferSize: this.bufferSize\n        });\n    }\n\n}\n\nexport default Bitcrusher;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/Effects/Bitcrusher.js\n **/","'use strict';\n\nimport Effect from '../../core/Effect';\n\nclass Delay extends Effect {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.setMainEffect('Delay', 'filter');\n        this.setMainProperties({\n            dryLevel: this.dry,\n            wetLevel: this.wet,\n            feedback: this.feedback,\n            cutoff: this.cutoff,\n            delayTime: this.delayTime,\n            bypass: this.bypass\n        });\n    }\n}\n\nexport default Delay;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/Effects/Delay.js\n **/","'use strict';\n\nimport Effect from '../../core/Effect';\n\nclass Filter extends Effect {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.setMainEffect('Filter', 'filter');\n        this.setMainProperties({\n            frequency: this.freq,\n            Q: this.q,\n            gain: this.filterGain,\n            filterType: this.filterType,\n            bypass: this.bypass\n        });\n    }\n}\n\nexport default Filter;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/Effects/Filter.js\n **/","'use strict';\n\nimport Effect from '../../core/Effect';\n\nclass MoogFilter extends Effect {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.setMainEffect('MoogFilter', 'output');\n        this.setMainProperties({\n            cutoff: this.cutoff,\n            resonance: this.resonance,\n            bufferSize: this.bufferSize\n        });\n    }\n}\n\nexport default MoogFilter;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/Effects/MoogFilter.js\n **/","'use strict';\n\nimport Effect from '../../core/Effect';\n\nclass Overdrive extends Effect {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.setMainEffect('Overdrive', 'output');\n        this.setMainProperties({\n            outputGain: this.outputGain,\n            drive: this.drive,\n            curveAmount: this.curveAmount,\n            algorithmIndex: this.algorithmIndex,\n            bypass: this.bypass\n        });\n    }\n}\n\nexport default Overdrive;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/Effects/Overdrive.js\n **/","'use strict';\n\nimport Effect from '../../core/Effect';\n\nclass PingPongDelay extends Effect {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.setMainEffect('PingPongDelay', 'delayLeft');\n        this.setMainProperties({\n            dryLevel: this.dry,\n            wetLevel: this.wet,\n            feedback: this.feedback,\n            delayTimeLeft: this.delayTimeLeft,\n            delayTimeRight: this.delayTimeRight,\n            bypass: this.bypass\n        });\n    }\n}\n\nexport default PingPongDelay;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/Effects/PingPongDelay.js\n **/","'use strict';\n\nimport Effect from '../../core/Effect';\n\nclass Tremolo extends Effect {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.setMainEffect('Tremolo', 'output');\n        this.setMainProperties({\n            intensity: this.intensity,\n            rate: this.rate,\n            stereoPhase: this.stereoPhase,\n            bypass: this.bypass\n        });\n    }\n}\n\nexport default Tremolo;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/Effects/Tremolo.js\n **/","import Module from '../core/Module';\n\nclass Envelope extends Module {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n    }\n\n    createGain () {\n        return false;\n    }\n\n    getReleaseTime () {\n        let now = this.audioContext.currentTime,\n            release;\n\n        if (this.release) {\n            release = now + (this.release / 10.0);\n        } else {\n            release = now + 0.2;\n        }\n\n        return release;\n    }\n\n    setEnvelope (dest) {\n        let now = this.audioContext.currentTime,\n            envelope = this.level % 101,\n            attackLevel,\n            sustainLevel,\n            attackEnd = (this.attack / 20.0),\n            t;\n\n        if (this.target === 'gain') {\n            attackLevel = envelope / 100;\n            sustainLevel = this.sustain / 100.0;\n        } else {\n            attackLevel = envelope * 72;  // Range: 0-7200: 6-octave range\n            sustainLevel = attackLevel * this.sustain / 100.0; // range: 0-7200\n        }\n\n        if (!attackEnd) {\n            attackEnd = 0.05; // tweak to get target decay to work properly\n        }\n\n        if (dest && typeof dest.getEnvelopeTarget === 'function') {\n            t = dest.getEnvelopeTarget(this.target);\n\n            if (t && t.setValueAtTime && t.linearRampToValueAtTime && t.setTargetAtTime) {\n                t.setValueAtTime(0, now);\n                t.linearRampToValueAtTime(attackLevel, now + attackEnd);\n                t.setTargetAtTime(sustainLevel, now + attackEnd, (this.decay / 100.0));\n            }\n        }\n\n    }\n\n    resetEnvelope (dest) {\n        let now = this.audioContext.currentTime,\n            t;\n\n        if (dest && typeof dest.getEnvelopeTarget === 'function') {\n            t = dest.getEnvelopeTarget(this.target);\n\n            if (t && t.cancelScheduledValues && t.setValueAtTime && t.setTargetAtTime) {\n                t.cancelScheduledValues(now);\n                if (this.target === 'gain') {\n                    t.setValueAtTime(t.value, now);\n                }\n                t.setTargetAtTime(0, now, (this.release / 100.0));\n            }\n        }\n    }\n\n    getLineOut () {\n        return false;\n    }\n}\n\nexport default Envelope;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/Envelope.js\n **/","import Module from '../core/Module';\n\nclass Master extends Module {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.main = this.audioContext.createGain();\n        this.link = null;\n    }\n\n    getLineIn () {\n        return this.main;\n    }\n\n    lineOut (analyser) {\n        this.main.connect(this.envelope);\n        if (analyser) {\n            this.gain.connect(analyser);\n        } else {\n            this.gain.connect(this.audioContext.destination);\n        }\n    }\n}\n\nexport default Master;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/Master.js\n **/","import Module from '../core/Module';\n\nclass Pan extends Module {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.main = this.audioContext.createStereoPanner();\n        this.main.pan.value = this.pan;\n        this.main.connect(this.envelope);\n    }\n}\n\nexport default Pan;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/Pan.js\n **/","import SoundSource from '../../core/SoundSource';\n\nclass Modulator extends SoundSource {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n        this.main = this.audioContext.createOscillator();\n        this.main.type = this.wave;\n        this.main.connect(this.envelope);\n    }\n\n    setNote () {\n        let f =  this.freq % 11;\n        this.main.frequency.value = f;\n    }\n}\n\nexport default Modulator;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/SoundSources/Modulator.js\n **/","import { CONST } from '../../core/Constants';\nimport SoundSource from '../../core/SoundSource';\n\nclass Noise extends SoundSource {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.defaultLineInProperty = 'detune';\n        this.main = this.audioContext.createBufferSource();\n        this.main.connect(this.envelope);\n\n        this.setDetune();\n        this.setColor();\n    }\n\n    setColor () {\n        switch (this.color) {\n            case CONST.NOISE_WHITE :\n                this.main.buffer = this.white();\n                break;\n            case CONST.NOISE_PINK :\n                this.main.buffer = this.pink();\n                break;\n            case CONST.NOISE_BROWN :\n                this.main.buffer = this.brown();\n                break;\n            default :\n                throw new Error('Invalid Noise color: ' + this.color);\n        }\n    }\n\n    white () {\n        let noiseBuffer = this.getNoiseBuffer(),\n            bufferSize = this.getBufferSize(),\n            output = noiseBuffer.getChannelData(0);\n\n        for (let i = 0; i < bufferSize; i++) {\n            output[i] = Math.random() * 2 - 1;\n        }\n\n        return noiseBuffer;\n    }\n\n    pink () {\n        let b0, b1, b2, b3, b4, b5, b6,\n            noiseBuffer = this.getNoiseBuffer(),\n            bufferSize = this.getBufferSize(),\n            output = noiseBuffer.getChannelData(0),\n            white;\n\n        b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\n        for (let i = 0; i < bufferSize; i++) {\n            white = Math.random() * 2 - 1;\n\n            b0 = 0.99886 * b0 + white * 0.0555179;\n            b1 = 0.99332 * b1 + white * 0.0750759;\n            b2 = 0.96900 * b2 + white * 0.1538520;\n            b3 = 0.86650 * b3 + white * 0.3104856;\n            b4 = 0.55000 * b4 + white * 0.5329522;\n            b5 = -0.7616 * b5 - white * 0.0168980;\n\n            output[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n            output[i] *= 0.11;\n            b6 = white * 0.115926;\n        }\n\n        return noiseBuffer;\n    }\n\n    brown () {\n        let noiseBuffer = this.getNoiseBuffer(),\n            bufferSize = this.getBufferSize(),\n            output = noiseBuffer.getChannelData(0),\n            lastOut = 0.0,\n            white;\n\n        for (let i = 0; i < bufferSize; i++) {\n            white = white = Math.random() * 2 - 1;\n\n            output[i] = (lastOut + (0.02 * white)) / 1.02;\n            lastOut = output[i];\n            output[i] *= 3.5;\n        }\n\n        return noiseBuffer;\n    }\n\n    getBufferSize () {\n        return 2 * this.audioContext.sampleRate;\n    }\n\n    getNoiseBuffer () {\n        let bufferSize = this.getBufferSize(),\n            noiseBuffer = this.audioContext.createBuffer(1, bufferSize, this.audioContext.sampleRate);\n        return noiseBuffer;\n    }\n\n    setNote () {\n        this.main.loop = true;\n    }\n}\n\nexport default Noise;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/SoundSources/Noise.js\n **/","import SoundSource from '../../core/SoundSource';\n\nclass Oscillator extends SoundSource {\n\n    constructor (audioContext, props, name) {\n        super(audioContext, props, name);\n\n        this.main = this.audioContext.createOscillator();\n        this.main.type = this.wave;\n        this.main.connect(this.envelope);\n\n        this.setDetune();\n    }\n\n    setNote (note) {\n        this.main.frequency.value = note;\n    }\n}\n\nexport default Oscillator;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/modules/SoundSources/Oscillator.js\n **/","'use strict';\n\nconst BitcrusherProps = {\n    bits: {\n        type: 'number',\n        bounds: [1, 16],\n        defaultValue: 4\n    },\n    normfreq: {\n        type: 'number',\n        bounds: [0, 1],\n        step: 0.1,\n        defaultValue: 0.1\n    },\n    bufferSize: {\n        type: 'number',\n        bounds: [256, 16384],\n        defaultValue: 4096\n    },\n    bypass: {\n        type: 'number',\n        bounds: [0, 1],\n        defaultValue: 0\n    }\n};\n\nexport default BitcrusherProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/BitcrusherProps.js\n **/","'use strict';\n\nconst DefaultProps = {\n    link: {\n        type: 'string',\n        defaultValue: ''\n    },\n    level: {\n        type: 'number',\n        bounds: [0, 100],\n        defaultValue: 100\n    }\n};\n\nexport default DefaultProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/DefaultProps.js\n **/","'use strict';\n\nconst DelayProps = {\n    dry: {\n        type: 'number',\n        bounds: [0, 1],\n        step: 0.1,\n        defaultValue: 1\n    },\n    wet: {\n        type: 'number',\n        bounds: [0, 1],\n        step: 0.1,\n        defaultValue: 0.5\n    },\n    feedback: {\n        type: 'number',\n        bounds: [0, 0.9],\n        step: 0.1,\n        defaultValue: 0.4\n    },\n    cutoff: {\n        type: 'number',\n        bounds: [20, 20000],\n        defaultValue: 440\n    },\n    delayTime: {\n        type: 'number',\n        bounds: [20, 1000],\n        defaultValue: 100\n    },\n    bypass: {\n        type: 'number',\n        bounds: [0, 1],\n        defaultValue: 0\n    }\n};\n\nexport default DelayProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/DelayProps.js\n **/","'use strict';\n\nimport { CONST } from '../core/Constants';\n\nconst EnvelopeProps = {\n    target: {\n        type: 'string',\n        bounds: [\n            CONST.ENVELOPE_TARGET_GAIN,\n            CONST.ENVELOPE_TARGET_FREQ,\n            CONST.ENVELOPE_TARGET_DETUNE\n        ],\n        defaultValue: CONST.ENVELOPE_TARGET_GAIN\n    },\n    attack: {\n        type: 'number',\n        bounds: [0, 100],\n        defaultValue: 0\n    },\n    decay: {\n        type: 'number',\n        bounds: [1, 100],\n        defaultValue: 1\n    },\n    sustain: {\n        type: 'number',\n        bounds: [0, 100],\n        defaultValue: 100\n    },\n    release: {\n        type: 'number',\n        bounds: [0, 100],\n        defaultValue: 5\n    }\n};\n\nexport default EnvelopeProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/EnvelopeProps.js\n **/","'use strict';\n\nimport { CONST } from '../core/Constants';\n\nconst FilterProps = {\n    freq: {\n        type: 'number',\n        bounds: [20, 20000],\n        defaultValue: 440\n    },\n    q: {\n        type: 'number',\n        bounds: [0, 100],\n        defaultValue: 10\n    },\n    filterGain: {\n        type: 'number',\n        bounds: [-40, 40],\n        defaultValue: 0\n    },\n    filterType: {\n        type: 'string',\n        bounds: [\n            CONST.FILTER_ALLPASS,\n            CONST.FILTER_BANDPASS,\n            CONST.FILTER_HIGHPASS,\n            CONST.FILTER_HIGHSHELF,\n            CONST.FILTER_LOWPASS,\n            CONST.FILTER_LOWSHELF,\n            CONST.FILTER_NOTCH,\n            CONST.FILTER_PEAKING\n        ],\n        defaultValue: CONST.FILTER_LOWPASS\n    },\n    bypass: {\n        type: 'number',\n        bounds: [0, 1],\n        defaultValue: 0\n    }\n};\n\nexport default FilterProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/FilterProps.js\n **/","'use strict';\n\nimport { CONST } from '../core/Constants';\n\nconst ModulatorProps = {\n    freq: {\n        type: 'number',\n        bounds: [1, 100],\n        defaultValue: 5\n    },\n    target: {\n        type: 'string',\n        bounds: [\n            CONST.MODULATOR_TARGET_FREQ,\n            CONST.MODULATOR_TARGET_DETUNE\n        ],\n        defaultValue: CONST.MODULATOR_TARGET_FREQ\n    },\n    wave: {\n        type: 'string',\n        bounds: [\n            CONST.WAVE_SINE,\n            CONST.WAVE_SQUARE,\n            CONST.WAVE_SAWTOOTH,\n            CONST.WAVE_TRIANLGE,\n            CONST.WAVE_CUSTOM\n        ],\n        defaultValue: CONST.WAVE_SINE\n    }\n};\n\nexport default ModulatorProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/ModulatorProps.js\n **/","'use strict';\n\nconst MoogFilterProps = {\n    cutoff: {\n        type: 'number',\n        bounds: [0, 1],\n        step: 0.1,\n        defaultValue: 0.1\n    },\n    resonance: {\n        type: 'number',\n        bounds: [0, 4],\n        step: 0.1,\n        defaultValue: 3.5\n    },\n    bufferSize: {\n        type: 'number',\n        bounds: [256, 16384],\n        defaultValue: 4096\n    },\n    bypass: {\n        type: 'number',\n        bounds: [0, 1],\n        defaultValue: 0\n    }\n};\n\nexport default MoogFilterProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/MoogFilterProps.js\n **/","'use strict';\n\nimport { CONST } from '../core/Constants';\n\nconst NoiseProps = {\n    color: {\n        type: 'string',\n        bounds: [\n            CONST.NOISE_BROWN,\n            CONST.NOISE_PINK,\n            CONST.NOISE_WHITE\n        ],\n        defaultValue: CONST.NOISE_WHITE\n    },\n    detune: {\n        type: 'number',\n        bounds: [-1200, 1200],\n        defaultValue: 0\n    }\n};\n\nexport default NoiseProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/NoiseProps.js\n **/","'use strict';\n\nimport { CONST } from '../core/Constants';\n\nconst OscillatorProps = {\n    detune: {\n        type: 'number',\n        bounds: [-1200, 1200],\n        defaultValue: 0\n    },\n    wave: {\n        type: 'string',\n        bounds: [\n            CONST.WAVE_SINE,\n            CONST.WAVE_SQUARE,\n            CONST.WAVE_SAWTOOTH,\n            CONST.WAVE_TRIANLGE,\n            CONST.WAVE_CUSTOM\n        ],\n        defaultValue: CONST.WAVE_SINE\n    }\n};\n\nexport default OscillatorProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/OscillatorProps.js\n **/","'use strict';\n\nconst OverdriveProps = {\n    outputGain: {\n        type: 'number',\n        bounds: [0, 1],\n        step: 0.1,\n        defaultValue: 1\n    },\n    drive: {\n        type: 'number',\n        bounds: [0, 1],\n        step: 0.1,\n        defaultValue: 1\n    },\n    curveAmount: {\n        type: 'number',\n        bounds: [0, 1],\n        step: 0.1,\n        defaultValue: 0.7\n    },\n    algorithmIndex: {\n        type: 'number',\n        bounds: [0, 5],\n        defaultValue: 0\n    },\n    bypass: {\n        type: 'number',\n        bounds: [0, 1],\n        defaultValue: 0\n    }\n};\n\nexport default OverdriveProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/OverdriveProps.js\n **/","'use strict';\n\nconst PanProps = {\n    pan: {\n        type: 'number',\n        bounds: [-1, 1],\n        step: 0.1,\n        defaultValue: 0\n    }\n};\n\nexport default PanProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/PanProps.js\n **/","'use strict';\n\nconst PingPongDelayProps = {\n    wet: {\n        type: 'number',\n        bounds: [0, 1],\n        step: 0.1,\n        defaultValue: 0.5\n    },\n    feedback: {\n        type: 'number',\n        bounds: [0, 1],\n        step: 0.1,\n        defaultValue: 0.3\n    },\n    delayTimeLeft: {\n        type: 'number',\n        bounds: [1, 10000],\n        defaultValue: 200\n    },\n    delayTimeRight: {\n        type: 'number',\n        bounds: [1, 10000],\n        defaultValue: 400\n    },\n    bypass: {\n        type: 'number',\n        bounds: [0, 1],\n        defaultValue: 0\n    }\n};\n\nexport default PingPongDelayProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/PingPongDelayProps.js\n **/","'use strict';\n\nconst TremoloProps = {\n    intensity: {\n        type: 'number',\n        bounds: [0, 1],\n        step: 0.1,\n        defaultValue: 0.3\n    },\n    rate: {\n        type: 'number',\n        bounds: [0, 11],\n        step: 0.1,\n        defaultValue: 5\n    },\n    stereoPhase: {\n        type: 'number',\n        bounds: [0, 180],\n        defaultValue: 0\n    },\n    bypass: {\n        type: 'number',\n        bounds: [0, 1],\n        defaultValue: 0\n    }\n};\n\nexport default TremoloProps;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/src/properties/TremoloProps.js\n **/","\"use strict\";\n\nvar AudioContext = global.AudioContext || global.webkitAudioContext;\nvar StereoPannerNode = require(\"stereo-panner-node\");\n\nif (AudioContext && !AudioContext.prototype.createStereoPanner) {\n  AudioContext.prototype.createStereoPanner = function() {\n    return new StereoPannerNode(this);\n  };\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/stereo-panner-shim/lib/stereo-panner-shim.js\n ** module id = 37\n ** module chunks = 0\n **/","\"use strict\";\n\nvar WS_CURVE_SIZE = 4096;\nvar curveL = new Float32Array(WS_CURVE_SIZE);\nvar curveR = new Float32Array(WS_CURVE_SIZE);\n\n(function() {\n  for (var i = 0; i < WS_CURVE_SIZE; i++) {\n    curveL[i] = Math.cos((i / WS_CURVE_SIZE) * Math.PI * 0.5);\n    curveR[i] = Math.sin((i / WS_CURVE_SIZE) * Math.PI * 0.5);\n  }\n})();\n\nmodule.exports = {\n  L: curveL,\n  R: curveR,\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/stereo-panner-shim/~/stereo-panner-node/lib/curve.js\n ** module id = 38\n ** module chunks = 0\n **/","\"use strict\";\n\nvar curve = require(\"./curve\");\n\n/**\n *  StereoPannerImpl\n *  +--------------------------------+  +------------------------+\n *  | ChannelSplitter(inlet)         |  | BufferSourceNode(_dc1) |\n *  +--------------------------------+  | buffer: [ 1, 1 ]       |\n *    |                            |    | loop: true             |\n *    |                            |    +------------------------+\n *    |                            |       |\n *    |                            |  +----------------+\n *    |                            |  | GainNode(_pan) |\n *    |                            |  | gain: 0(pan)   |\n *    |                            |  +----------------+\n *    |                            |    |\n *    |    +-----------------------|----+\n *    |    |                       |    |\n *    |  +----------------------+  |  +----------------------+\n *    |  | WaveShaperNode(_wsL) |  |  | WaveShaperNode(_wsR) |\n *    |  | curve: curveL        |  |  | curve: curveR        |\n *    |  +----------------------+  |  +----------------------+\n *    |               |            |               |\n *    |               |            |               |\n *    |               |            |               |\n *  +--------------+  |          +--------------+  |\n *  | GainNode(_L) |  |          | GainNode(_R) |  |\n *  | gain: 0    <----+          | gain: 0    <----+\n *  +--------------+             +--------------+\n *    |                            |\n *  +--------------------------------+\n *  | ChannelMergerNode(outlet)      |\n *  +--------------------------------+\n */\nfunction StereoPannerImpl(audioContext) {\n  this.audioContext = audioContext;\n  this.inlet = audioContext.createChannelSplitter(2);\n  this._pan = audioContext.createGain();\n  this.pan = this._pan.gain;\n  this._wsL = audioContext.createWaveShaper();\n  this._wsR = audioContext.createWaveShaper();\n  this._L = audioContext.createGain();\n  this._R = audioContext.createGain();\n  this.outlet = audioContext.createChannelMerger(2);\n\n  this.inlet.channelCount = 2;\n  this.inlet.channelCountMode = \"explicit\";\n  this._pan.gain.value = 0;\n  this._wsL.curve = curve.L;\n  this._wsR.curve = curve.R;\n  this._L.gain.value = 0;\n  this._R.gain.value = 0;\n\n  this.inlet.connect(this._L, 0);\n  this.inlet.connect(this._R, 1);\n  this._L.connect(this.outlet, 0, 0);\n  this._R.connect(this.outlet, 0, 1);\n  this._pan.connect(this._wsL);\n  this._pan.connect(this._wsR);\n  this._wsL.connect(this._L.gain);\n  this._wsR.connect(this._R.gain);\n\n  this._isConnected = false;\n  this._dc1buffer = null;\n  this._dc1 = null;\n}\n\nStereoPannerImpl.prototype.connect = function(destination) {\n  var audioContext = this.audioContext;\n  if (!this._isConnected) {\n    this._isConnected = true;\n    this._dc1buffer = audioContext.createBuffer(1, 2, audioContext.sampleRate);\n    this._dc1buffer.getChannelData(0).set([ 1, 1 ]);\n\n    this._dc1 = audioContext.createBufferSource();\n    this._dc1.buffer = this._dc1buffer;\n    this._dc1.loop = true;\n    this._dc1.start(audioContext.currentTime);\n    this._dc1.connect(this._pan);\n  }\n  global.AudioNode.prototype.connect.call(this.outlet, destination);\n};\n\nStereoPannerImpl.prototype.disconnect = function() {\n  var audioContext = this.audioContext;\n  if (this._isConnected) {\n    this._isConnected = false;\n    this._dc1.stop(audioContext.currentTime);\n    this._dc1.disconnect();\n    this._dc1 = null;\n    this._dc1buffer = null;\n  }\n  global.AudioNode.prototype.disconnect.call(this.outlet);\n};\n\nmodule.exports = StereoPannerImpl;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/stereo-panner-shim/~/stereo-panner-node/lib/stereo-panner-impl.js\n ** module id = 39\n ** module chunks = 0\n **/","\"use strict\";\n\nvar StereoPannerImpl = require(\"./stereo-panner-impl\");\n\nfunction StereoPanner(audioContext) {\n  var impl = new StereoPannerImpl(audioContext);\n\n  Object.defineProperties(impl.inlet, {\n    pan: {\n      value: impl.pan,\n      enumerable: true\n    },\n    connect: {\n      value: function(node) {\n        return impl.connect(node);\n      }\n    },\n    disconnect: {\n      value: function() {\n        return impl.disconnect();\n      }\n    }\n  });\n\n  return impl.inlet;\n}\n\nmodule.exports = StereoPanner;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/stereo-panner-shim/~/stereo-panner-node/lib/stereo-panner-node.js\n ** module id = 40\n ** module chunks = 0\n **/","/*\n    Copyright (c) 2012 DinahMoe AB & Oskar Eriksson\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation\n    files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy,\n    modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software\n    is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\n    OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n(function(window) {\n    var userContext,\n        userInstance,\n        pipe = function(param, val) {\n            param.value = val;\n        },\n        Super = Object.create(null, {\n            activate: {\n                writable: true,\n                value: function(doActivate) {\n                    if (doActivate) {\n                        this.input.disconnect();\n                        this.input.connect(this.activateNode);\n                        if (this.activateCallback) {\n                            this.activateCallback(doActivate);\n                        }\n                    } else {\n                        this.input.disconnect();\n                        this.input.connect(this.output);\n                    }\n                }\n            },\n            bypass: {\n                get: function() {\n                    return this._bypass;\n                },\n                set: function(value) {\n                    if (this._lastBypassValue === value) {\n                        return;\n                    }\n                    this._bypass = value;\n                    this.activate(!value);\n                    this._lastBypassValue = value;\n                }\n            },\n            connect: {\n                value: function(target) {\n                    this.output.connect(target);\n                }\n            },\n            disconnect: {\n                value: function(target) {\n                    this.output.disconnect(target);\n                }\n            },\n            connectInOrder: {\n                value: function(nodeArray) {\n                    var i = nodeArray.length - 1;\n                    while (i--) {\n                        if (!nodeArray[i].connect) {\n                            return console.error(\"AudioNode.connectInOrder: TypeError: Not an AudioNode.\", nodeArray[i]);\n                        }\n                        if (nodeArray[i + 1].input) {\n                            nodeArray[i].connect(nodeArray[i + 1].input);\n                        } else {\n                            nodeArray[i].connect(nodeArray[i + 1]);\n                        }\n                    }\n                }\n            },\n            getDefaults: {\n                value: function() {\n                    var result = {};\n                    for (var key in this.defaults) {\n                        result[key] = this.defaults[key].value;\n                    }\n                    return result;\n                }\n            },\n            automate: {\n                value: function(property, value, duration, startTime) {\n                    var start = startTime ? ~~(startTime / 1000) : userContext.currentTime,\n                        dur = duration ? ~~(duration / 1000) : 0,\n                        _is = this.defaults[property],\n                        param = this[property],\n                        method;\n\n                    if (param) {\n                        if (_is.automatable) {\n                            if (!duration) {\n                                method = \"setValueAtTime\";\n                            } else {\n                                method = \"linearRampToValueAtTime\";\n                                param.cancelScheduledValues(start);\n                                param.setValueAtTime(param.value, start);\n                            }\n                            param[method](value, dur + start);\n                        } else {\n                            param = value;\n                        }\n                    } else {\n                        console.error(\"Invalid Property for \" + this.name);\n                    }\n                }\n            }\n        }),\n        FLOAT = \"float\",\n        BOOLEAN = \"boolean\",\n        STRING = \"string\",\n        INT = \"int\";\n\n    if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = Tuna;\n    } else if (typeof define === \"function\") {\n        window.define(\"Tuna\", definition);\n    } else {\n        window.Tuna = Tuna;\n    }\n\n    function definition() {\n        return Tuna;\n    }\n\n    function Tuna(context) {\n        if (!(this instanceof Tuna)) {\n            return new Tuna(context);\n        }\n        if (!window.AudioContext) {\n            window.AudioContext = window.webkitAudioContext;\n        }\n        if (!context) {\n            console.log(\"tuna.js: Missing audio context! Creating a new context for you.\");\n            context = window.AudioContext && (new window.AudioContext());\n        }\n        if (!context) {\n            throw new Error(\"Tuna cannot initialize because this environment does not support web audio.\");\n        }\n        connectify(context);\n        userContext = context;\n        userInstance = this;\n    }\n\n    function connectify(context) {\n        if (context.__connectified__ === true) return;\n\n        var gain = context.createGain(),\n            proto = Object.getPrototypeOf(Object.getPrototypeOf(gain)),\n            oconnect = proto.connect;\n\n        proto.connect = shimConnect;\n        context.__connectified__ = true; // Prevent overriding connect more than once\n\n        function shimConnect() {\n            var node = Array.prototype.shift.apply(arguments);\n            node = Super.isPrototypeOf ? (Super.isPrototypeOf(node) ? node.input : node) : (node.input || node);\n            arguments = Array.prototype.slice.call(arguments);\n            arguments.unshift(node);\n            oconnect.apply(this, arguments);\n            return node;\n        }\n    }\n\n    function dbToWAVolume(db) {\n        return Math.max(0, Math.round(100 * Math.pow(2, db / 6)) / 100);\n    }\n\n    function fmod(x, y) {\n        // http://kevin.vanzonneveld.net\n        // *     example 1: fmod(5.7, 1.3);\n        // *     returns 1: 0.5\n        var tmp, tmp2, p = 0,\n            pY = 0,\n            l = 0.0,\n            l2 = 0.0;\n\n        tmp = x.toExponential().match(/^.\\.?(.*)e(.+)$/);\n        p = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\n        tmp = y.toExponential().match(/^.\\.?(.*)e(.+)$/);\n        pY = parseInt(tmp[2], 10) - (tmp[1] + \"\").length;\n\n        if (pY > p) {\n            p = pY;\n        }\n\n        tmp2 = (x % y);\n\n        if (p < -100 || p > 20) {\n            // toFixed will give an out of bound error so we fix it like this:\n            l = Math.round(Math.log(tmp2) / Math.log(10));\n            l2 = Math.pow(10, l);\n\n            return (tmp2 / l2).toFixed(l - p) * l2;\n        } else {\n            return parseFloat(tmp2.toFixed(-p));\n        }\n    }\n\n    function sign(x) {\n        if (x === 0) {\n            return 1;\n        } else {\n            return Math.abs(x) / x;\n        }\n    }\n\n    function tanh(n) {\n        return (Math.exp(n) - Math.exp(-n)) / (Math.exp(n) + Math.exp(-n));\n    }\n\n    function initValue(userVal, defaultVal) {\n        return userVal === undefined ? defaultVal : userVal;\n    }\n\n    Tuna.prototype.Bitcrusher = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.bufferSize = properties.bufferSize || this.defaults.bufferSize.value;\n\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.processor = userContext.createScriptProcessor(this.bufferSize, 1, 1);\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.processor);\n        this.processor.connect(this.output);\n\n        var phaser = 0,\n            last = 0,\n            input, output, step, i, length;\n        this.processor.onaudioprocess = function(e) {\n            input = e.inputBuffer.getChannelData(0),\n            output = e.outputBuffer.getChannelData(0),\n            step = Math.pow(1 / 2, this.bits);\n            length = input.length;\n            for (i = 0; i < length; i++) {\n                phaser += this.normfreq;\n                if (phaser >= 1.0) {\n                    phaser -= 1.0;\n                    last = step * Math.floor(input[i] / step + 0.5);\n                }\n                output[i] = last;\n            }\n        };\n\n        this.bits = properties.bits || this.defaults.bits.value;\n        this.normfreq = initValue(properties.normfreq, this.defaults.normfreq.value);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Bitcrusher.prototype = Object.create(Super, {\n        name: {\n            value: \"Bitcrusher\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                bits: {\n                    value: 4,\n                    min: 1,\n                    max: 16,\n                    automatable: false,\n                    type: INT\n                },\n                bufferSize: {\n                    value: 4096,\n                    min: 256,\n                    max: 16384,\n                    automatable: false,\n                    type: INT\n                },\n                bypass: {\n                    value: true,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                normfreq: {\n                    value: 0.1,\n                    min: 0.0001,\n                    max: 1.0,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        bits: {\n            enumerable: true,\n            get: function() {\n                return this.processor.bits;\n            },\n            set: function(value) {\n                this.processor.bits = value;\n            }\n        },\n        normfreq: {\n            enumerable: true,\n            get: function() {\n                return this.processor.normfreq;\n            },\n            set: function(value) {\n                this.processor.normfreq = value;\n            }\n        }\n    });\n\n    Tuna.prototype.Cabinet = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.convolver = this.newConvolver(properties.impulsePath ||\n            \"../impulses/impulse_guitar.wav\");\n        this.makeupNode = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.convolver.input);\n        this.convolver.output.connect(this.makeupNode);\n        this.makeupNode.connect(this.output);\n\n        this.makeupGain = initValue(properties.makeupGain, this.defaults\n            .makeupGain);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Cabinet.prototype = Object.create(Super, {\n        name: {\n            value: \"Cabinet\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                makeupGain: {\n                    value: 1,\n                    min: 0,\n                    max: 20,\n                    automatable: true,\n                    type: FLOAT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        },\n        makeupGain: {\n            enumerable: true,\n            get: function() {\n                return this.makeupNode.gain;\n            },\n            set: function(value) {\n                this.makeupNode.gain.value = value;\n            }\n        },\n        newConvolver: {\n            value: function(impulsePath) {\n                return new userInstance.Convolver({\n                    impulse: impulsePath,\n                    dryLevel: 0,\n                    wetLevel: 1\n                });\n            }\n        }\n    });\n\n    Tuna.prototype.Chorus = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.attenuator = this.activateNode = userContext.createGain();\n        this.splitter = userContext.createChannelSplitter(2);\n        this.delayL = userContext.createDelay();\n        this.delayR = userContext.createDelay();\n        this.feedbackGainNodeLR = userContext.createGain();\n        this.feedbackGainNodeRL = userContext.createGain();\n        this.merger = userContext.createChannelMerger(2);\n        this.output = userContext.createGain();\n\n        this.lfoL = new userInstance.LFO({\n            target: this.delayL.delayTime,\n            callback: pipe\n        });\n        this.lfoR = new userInstance.LFO({\n            target: this.delayR.delayTime,\n            callback: pipe\n        });\n\n        this.input.connect(this.attenuator);\n        this.attenuator.connect(this.output);\n        this.attenuator.connect(this.splitter);\n        this.splitter.connect(this.delayL, 0);\n        this.splitter.connect(this.delayR, 1);\n        this.delayL.connect(this.feedbackGainNodeLR);\n        this.delayR.connect(this.feedbackGainNodeRL);\n        this.feedbackGainNodeLR.connect(this.delayR);\n        this.feedbackGainNodeRL.connect(this.delayL);\n        this.delayL.connect(this.merger, 0, 0);\n        this.delayR.connect(this.merger, 0, 1);\n        this.merger.connect(this.output);\n\n        this.feedback = initValue(properties.feedback, this.defaults.feedback\n            .value);\n        this.rate = initValue(properties.rate, this.defaults.rate.value);\n        this.delay = initValue(properties.delay, this.defaults.delay.value);\n        this.depth = initValue(properties.depth, this.defaults.depth.value);\n        this.lfoR.phase = Math.PI / 2;\n        this.attenuator.gain.value = 0.6934; // 1 / (10 ^ (((20 * log10(3)) / 3) / 20))\n        this.lfoL.activate(true);\n        this.lfoR.activate(true);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Chorus.prototype = Object.create(Super, {\n        name: {\n            value: \"Chorus\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                feedback: {\n                    value: 0.4,\n                    min: 0,\n                    max: 0.95,\n                    automatable: false,\n                    type: FLOAT\n                },\n                delay: {\n                    value: 0.0045,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                depth: {\n                    value: 0.7,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                rate: {\n                    value: 1.5,\n                    min: 0,\n                    max: 8,\n                    automatable: false,\n                    type: FLOAT\n                },\n                bypass: {\n                    value: true,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        },\n        delay: {\n            enumerable: true,\n            get: function() {\n                return this._delay;\n            },\n            set: function(value) {\n                this._delay = 0.0002 * (Math.pow(10, value) * 2);\n                this.lfoL.offset = this._delay;\n                this.lfoR.offset = this._delay;\n                this._depth = this._depth;\n            }\n        },\n        depth: {\n            enumerable: true,\n            get: function() {\n                return this._depth;\n            },\n            set: function(value) {\n                this._depth = value;\n                this.lfoL.oscillation = this._depth * this._delay;\n                this.lfoR.oscillation = this._depth * this._delay;\n            }\n        },\n        feedback: {\n            enumerable: true,\n            get: function() {\n                return this._feedback;\n            },\n            set: function(value) {\n                this._feedback = value;\n                this.feedbackGainNodeLR.gain.value = this._feedback;\n                this.feedbackGainNodeRL.gain.value = this._feedback;\n            }\n        },\n        rate: {\n            enumerable: true,\n            get: function() {\n                return this._rate;\n            },\n            set: function(value) {\n                this._rate = value;\n                this.lfoL.frequency = this._rate;\n                this.lfoR.frequency = this._rate;\n            }\n        }\n    });\n\n    Tuna.prototype.Compressor = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.compNode = this.activateNode = userContext.createDynamicsCompressor();\n        this.makeupNode = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.compNode.connect(this.makeupNode);\n        this.makeupNode.connect(this.output);\n\n        this.automakeup = initValue(properties.automakeup, this.defaults\n            .automakeup\n            .value);\n        this.makeupGain = properties.makeupGain || this.defaults.makeupGain\n            .value;\n        this.threshold = initValue(properties.threshold, this.defaults.threshold\n            .value);\n        this.release = properties.release || this.defaults.release.value;\n        this.attack = initValue(properties.attack, this.defaults.attack\n            .value);\n        this.ratio = properties.ratio || this.defaults.ratio.value;\n        this.knee = initValue(properties.knee, this.defaults.knee.value);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Compressor.prototype = Object.create(Super, {\n        name: {\n            value: \"Compressor\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                threshold: {\n                    value: -20,\n                    min: -60,\n                    max: 0,\n                    automatable: true,\n                    type: FLOAT\n                },\n                release: {\n                    value: 250,\n                    min: 10,\n                    max: 2000,\n                    automatable: true,\n                    type: FLOAT\n                },\n                makeupGain: {\n                    value: 1,\n                    min: 1,\n                    max: 100,\n                    automatable: true,\n                    type: FLOAT\n                },\n                attack: {\n                    value: 1,\n                    min: 0,\n                    max: 1000,\n                    automatable: true,\n                    type: FLOAT\n                },\n                ratio: {\n                    value: 4,\n                    min: 1,\n                    max: 50,\n                    automatable: true,\n                    type: FLOAT\n                },\n                knee: {\n                    value: 5,\n                    min: 0,\n                    max: 40,\n                    automatable: true,\n                    type: FLOAT\n                },\n                automakeup: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                bypass: {\n                    value: true,\n                    automatable: false,\n                    type: BOOLEAN\n                }\n            }\n        },\n        computeMakeup: {\n            value: function() {\n                var magicCoefficient = 4,\n                    // raise me if the output is too hot\n                    c = this.compNode;\n                return -(c.threshold.value - c.threshold.value /\n                        c.ratio.value) /\n                    magicCoefficient;\n            }\n        },\n        automakeup: {\n            enumerable: true,\n            get: function() {\n                return this._automakeup;\n            },\n            set: function(value) {\n                this._automakeup = value;\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\n            }\n        },\n        threshold: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.threshold;\n            },\n            set: function(value) {\n                this.compNode.threshold.value = value;\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\n            }\n        },\n        ratio: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.ratio;\n            },\n            set: function(value) {\n                this.compNode.ratio.value = value;\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\n            }\n        },\n        knee: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.knee;\n            },\n            set: function(value) {\n                this.compNode.knee.value = value;\n                if (this._automakeup) this.makeupGain = this.computeMakeup();\n            }\n        },\n        attack: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.attack;\n            },\n            set: function(value) {\n                this.compNode.attack.value = value / 1000;\n            }\n        },\n        release: {\n            enumerable: true,\n            get: function() {\n                return this.compNode.release;\n            },\n            set: function(value) {\n                this.compNode.release = value / 1000;\n            }\n        },\n        makeupGain: {\n            enumerable: true,\n            get: function() {\n                return this.makeupNode.gain;\n            },\n            set: function(value) {\n                this.makeupNode.gain.value = dbToWAVolume(value);\n            }\n        }\n    });\n\n    Tuna.prototype.Convolver = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.convolver = userContext.createConvolver();\n        this.dry = userContext.createGain();\n        this.filterLow = userContext.createBiquadFilter();\n        this.filterHigh = userContext.createBiquadFilter();\n        this.wet = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.filterLow);\n        this.activateNode.connect(this.dry);\n        this.filterLow.connect(this.filterHigh);\n        this.filterHigh.connect(this.convolver);\n        this.convolver.connect(this.wet);\n        this.wet.connect(this.output);\n        this.dry.connect(this.output);\n\n        this.dryLevel = initValue(properties.dryLevel, this.defaults.dryLevel\n            .value);\n        this.wetLevel = initValue(properties.wetLevel, this.defaults.wetLevel\n            .value);\n        this.highCut = properties.highCut || this.defaults.highCut.value;\n        this.buffer = properties.impulse ||\n            \"../impulses/ir_rev_short.wav\";\n        this.lowCut = properties.lowCut || this.defaults.lowCut.value;\n        this.level = initValue(properties.level, this.defaults.level.value);\n        this.filterHigh.type = \"lowpass\";\n        this.filterLow.type = \"highpass\";\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Convolver.prototype = Object.create(Super, {\n        name: {\n            value: \"Convolver\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                highCut: {\n                    value: 22050,\n                    min: 20,\n                    max: 22050,\n                    automatable: true,\n                    type: FLOAT\n                },\n                lowCut: {\n                    value: 20,\n                    min: 20,\n                    max: 22050,\n                    automatable: true,\n                    type: FLOAT\n                },\n                dryLevel: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                },\n                wetLevel: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                },\n                level: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                }\n            }\n        },\n        lowCut: {\n            get: function() {\n                return this.filterLow.frequency;\n            },\n            set: function(value) {\n                this.filterLow.frequency.value = value;\n            }\n        },\n        highCut: {\n            get: function() {\n                return this.filterHigh.frequency;\n            },\n            set: function(value) {\n                this.filterHigh.frequency.value = value;\n            }\n        },\n        level: {\n            get: function() {\n                return this.output.gain;\n            },\n            set: function(value) {\n                this.output.gain.value = value;\n            }\n        },\n        dryLevel: {\n            get: function() {\n                return this.dry.gain\n            },\n            set: function(value) {\n                this.dry.gain.value = value;\n            }\n        },\n        wetLevel: {\n            get: function() {\n                return this.wet.gain;\n            },\n            set: function(value) {\n                this.wet.gain.value = value;\n            }\n        },\n        buffer: {\n            enumerable: false,\n            get: function() {\n                return this.convolver.buffer;\n            },\n            set: function(impulse) {\n                var convolver = this.convolver,\n                    xhr = new XMLHttpRequest();\n                if (!impulse) {\n                    console.log(\"Tuna.Convolver.setBuffer: Missing impulse path!\");\n                    return;\n                }\n                xhr.open(\"GET\", impulse, true);\n                xhr.responseType = \"arraybuffer\";\n                xhr.onreadystatechange = function() {\n                    if (xhr.readyState === 4) {\n                        if (xhr.status < 300 && xhr.status > 199 || xhr.status === 302) {\n                            userContext.decodeAudioData(xhr.response, function(buffer) {\n                                convolver.buffer = buffer;\n                            }, function(e) {\n                                if (e) console.log(\"Tuna.Convolver.setBuffer: Error decoding data\" + e);\n                            });\n                        }\n                    }\n                };\n                xhr.send(null);\n            }\n        }\n    });\n\n    Tuna.prototype.Delay = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.dry = userContext.createGain();\n        this.wet = userContext.createGain();\n        this.filter = userContext.createBiquadFilter();\n        this.delay = userContext.createDelay();\n        this.feedbackNode = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.delay);\n        this.activateNode.connect(this.dry);\n        this.delay.connect(this.filter);\n        this.filter.connect(this.feedbackNode);\n        this.feedbackNode.connect(this.delay);\n        this.feedbackNode.connect(this.wet);\n        this.wet.connect(this.output);\n        this.dry.connect(this.output);\n\n        this.delayTime = properties.delayTime || this.defaults.delayTime.value;\n        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\n        this.wetLevel = initValue(properties.wetLevel, this.defaults.wetLevel.value);\n        this.dryLevel = initValue(properties.dryLevel, this.defaults.dryLevel.value);\n        this.cutoff = properties.cutoff || this.defaults.cutoff.value;\n        this.filter.type = \"lowpass\";\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Delay.prototype = Object.create(Super, {\n        name: {\n            value: \"Delay\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                delayTime: {\n                    value: 100,\n                    min: 20,\n                    max: 1000,\n                    automatable: false,\n                    type: FLOAT\n                },\n                feedback: {\n                    value: 0.45,\n                    min: 0,\n                    max: 0.9,\n                    automatable: true,\n                    type: FLOAT\n                },\n                cutoff: {\n                    value: 20000,\n                    min: 20,\n                    max: 20000,\n                    automatable: true,\n                    type: FLOAT\n                },\n                wetLevel: {\n                    value: 0.5,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                },\n                dryLevel: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT\n                }\n            }\n        },\n        delayTime: {\n            enumerable: true,\n            get: function() {\n                return this.delay.delayTime;\n            },\n            set: function(value) {\n                this.delay.delayTime.value = value / 1000;\n            }\n        },\n        wetLevel: {\n            enumerable: true,\n            get: function() {\n                return this.wet.gain;\n            },\n            set: function(value) {\n                this.wet.gain.value = value;\n            }\n        },\n        dryLevel: {\n            enumerable: true,\n            get: function() {\n                return this.dry.gain;\n            },\n            set: function(value) {\n                this.dry.gain.value = value;\n            }\n        },\n        feedback: {\n            enumerable: true,\n            get: function() {\n                return this.feedbackNode.gain;\n            },\n            set: function(value) {\n                this.feedbackNode.gain.value = value;\n            }\n        },\n        cutoff: {\n            enumerable: true,\n            get: function() {\n                return this.filter.frequency;\n            },\n            set: function(value) {\n                this.filter.frequency.value = value;\n            }\n        }\n    });\n\n    Tuna.prototype.Filter = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.filter = userContext.createBiquadFilter();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.filter);\n        this.filter.connect(this.output);\n\n        this.frequency = properties.frequency || this.defaults.frequency\n            .value;\n        this.Q = properties.resonance || this.defaults.Q.value;\n        this.filterType = initValue(properties.filterType, this.defaults\n            .filterType\n            .value);\n        this.gain = initValue(properties.gain, this.defaults.gain.value);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Filter.prototype = Object.create(Super, {\n        name: {\n            value: \"Filter\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                frequency: {\n                    value: 800,\n                    min: 20,\n                    max: 22050,\n                    automatable: true,\n                    type: FLOAT\n                },\n                Q: {\n                    value: 1,\n                    min: 0.001,\n                    max: 100,\n                    automatable: true,\n                    type: FLOAT\n                },\n                gain: {\n                    value: 0,\n                    min: -40,\n                    max: 40,\n                    automatable: true,\n                    type: FLOAT\n                },\n                bypass: {\n                    value: true,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                filterType: {\n                    value: \"lowpass\",\n                    automatable: false,\n                    type: STRING\n                }\n            }\n        },\n        filterType: {\n            enumerable: true,\n            get: function() {\n                return this.filter.type;\n            },\n            set: function(value) {\n                this.filter.type = value;\n            }\n        },\n        Q: {\n            enumerable: true,\n            get: function() {\n                return this.filter.Q;\n            },\n            set: function(value) {\n                this.filter.Q.value = value;\n            }\n        },\n        gain: {\n            enumerable: true,\n            get: function() {\n                return this.filter.gain;\n            },\n            set: function(value) {\n                this.filter.gain.value = value;\n            }\n        },\n        frequency: {\n            enumerable: true,\n            get: function() {\n                return this.filter.frequency;\n            },\n            set: function(value) {\n                this.filter.frequency.value = value;\n            }\n        }\n    });\n\n    Tuna.prototype.MoogFilter = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.bufferSize = properties.bufferSize || this.defaults.bufferSize\n            .value;\n\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.processor = userContext.createScriptProcessor(this.bufferSize,\n            1,\n            1);\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.processor);\n        this.processor.connect(this.output);\n\n        var in1, in2, in3, in4, out1, out2, out3, out4;\n        in1 = in2 = in3 = in4 = out1 = out2 = out3 = out4 = 0.0;\n        var input, output, f, fb, i, length;\n        this.processor.onaudioprocess = function(e) {\n            input = e.inputBuffer.getChannelData(0),\n                output = e.outputBuffer.getChannelData(0),\n                f = this.cutoff * 1.16,\n                inputFactor = 0.35013 * (f * f) * (f * f);\n            fb = this.resonance * (1.0 - 0.15 * f * f);\n            length = input.length;\n            for (i = 0; i < length; i++) {\n                input[i] -= out4 * fb;\n                input[i] *= inputFactor;\n                out1 = input[i] + 0.3 * in1 + (1 - f) * out1; // Pole 1\n                in1 = input[i];\n                out2 = out1 + 0.3 * in2 + (1 - f) * out2; // Pole 2\n                in2 = out1;\n                out3 = out2 + 0.3 * in3 + (1 - f) * out3; // Pole 3\n                in3 = out2;\n                out4 = out3 + 0.3 * in4 + (1 - f) * out4; // Pole 4\n                in4 = out3;\n                output[i] = out4;\n            }\n        };\n\n        this.cutoff = initValue(properties.cutoff, this.defaults.cutoff\n            .value);\n        this.resonance = initValue(properties.resonance, this.defaults.resonance\n            .value);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.MoogFilter.prototype = Object.create(Super, {\n        name: {\n            value: \"MoogFilter\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                bufferSize: {\n                    value: 4096,\n                    min: 256,\n                    max: 16384,\n                    automatable: false,\n                    type: INT\n                },\n                bypass: {\n                    value: false,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                cutoff: {\n                    value: 0.065,\n                    min: 0.0001,\n                    max: 1.0,\n                    automatable: false,\n                    type: FLOAT\n                },\n                resonance: {\n                    value: 3.5,\n                    min: 0.0,\n                    max: 4.0,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        cutoff: {\n            enumerable: true,\n            get: function() {\n                return this.processor.cutoff;\n            },\n            set: function(value) {\n                this.processor.cutoff = value;\n            }\n        },\n        resonance: {\n            enumerable: true,\n            get: function() {\n                return this.processor.resonance;\n            },\n            set: function(value) {\n                this.processor.resonance = value;\n            }\n        }\n    });\n\n    Tuna.prototype.Overdrive = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.inputDrive = userContext.createGain();\n        this.waveshaper = userContext.createWaveShaper();\n        this.outputDrive = userContext.createGain();\n        this.output = userContext.createGain();\n\n        this.activateNode.connect(this.inputDrive);\n        this.inputDrive.connect(this.waveshaper);\n        this.waveshaper.connect(this.outputDrive);\n        this.outputDrive.connect(this.output);\n\n        this.ws_table = new Float32Array(this.k_nSamples);\n        this.drive = initValue(properties.drive, this.defaults.drive.value);\n        this.outputGain = initValue(properties.outputGain, this.defaults\n            .outputGain\n            .value);\n        this.curveAmount = initValue(properties.curveAmount, this.defaults\n            .curveAmount\n            .value);\n        this.algorithmIndex = initValue(properties.algorithmIndex, this\n            .defaults\n            .algorithmIndex.value);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Overdrive.prototype = Object.create(Super, {\n        name: {\n            value: \"Overdrive\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                drive: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT,\n                    scaled: true\n                },\n                outputGain: {\n                    value: 1,\n                    min: 0,\n                    max: 1,\n                    automatable: true,\n                    type: FLOAT,\n                    scaled: true\n                },\n                curveAmount: {\n                    value: 0.725,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                algorithmIndex: {\n                    value: 0,\n                    min: 0,\n                    max: 5,\n                    automatable: false,\n                    type: INT\n                }\n            }\n        },\n        k_nSamples: {\n            value: 8192\n        },\n        drive: {\n            get: function() {\n                return this.inputDrive.gain;\n            },\n            set: function(value) {\n                this._drive = value;\n            }\n        },\n        curveAmount: {\n            get: function() {\n                return this._curveAmount;\n            },\n            set: function(value) {\n                this._curveAmount = value;\n                if (this._algorithmIndex === undefined) {\n                    this._algorithmIndex = 0;\n                }\n                this.waveshaperAlgorithms[this._algorithmIndex]\n                    (this._curveAmount,\n                        this.k_nSamples, this.ws_table);\n                this.waveshaper.curve = this.ws_table;\n            }\n        },\n        outputGain: {\n            get: function() {\n                return this.outputDrive.gain;\n            },\n            set: function(value) {\n                this._outputGain = dbToWAVolume(value);\n            }\n        },\n        algorithmIndex: {\n            get: function() {\n                return this._algorithmIndex;\n            },\n            set: function(value) {\n                this._algorithmIndex = value;\n                this.curveAmount = this._curveAmount;\n            }\n        },\n        waveshaperAlgorithms: {\n            value: [\n                function(amount, n_samples, ws_table) {\n                    amount = Math.min(amount, 0.9999);\n                    var k = 2 * amount / (1 - amount),\n                        i, x;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        ws_table[i] = (1 + k) * x / (1 + k * Math.abs(x));\n                    }\n                },\n                function(amount, n_samples, ws_table) {\n                    var i, x, y;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        y = ((0.5 * Math.pow((x + 1.4), 2)) - 1) * y >= 0 ? 5.8 : 1.2;\n                        ws_table[i] = tanh(y);\n                    }\n                },\n                function(amount, n_samples, ws_table) {\n                    var i, x, y, a = 1 - amount;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        y = x < 0 ? -Math.pow(Math.abs(x), a + 0.04) : Math.pow(x, a);\n                        ws_table[i] = tanh(y * 2);\n                    }\n                },\n                function(amount, n_samples, ws_table) {\n                    var i, x, y, abx, a = 1 - amount > 0.99 ? 0.99 : 1 - amount;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        abx = Math.abs(x);\n                        if (abx < a) y = abx;\n                        else if (abx > a) y = a + (abx - a) / (1 + Math.pow((abx - a) / (1 - a), 2));\n                        else if (abx > 1) y = abx;\n                        ws_table[i] = sign(x) * y * (1 / ((a + 1) / 2));\n                    }\n                },\n                function(amount, n_samples, ws_table) { // fixed curve, amount doesn't do anything, the distortion is just from the drive\n                    var i, x;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        if (x < -0.08905) {\n                            ws_table[i] = (-3 / 4) * (1 - (Math.pow((1 - (Math.abs(x) - 0.032857)), 12)) + (1 / 3) * (Math.abs(x) -\n                                0.032847)) + 0.01;\n                        } else if (x >= -0.08905 && x < 0.320018) {\n                            ws_table[i] = (-6.153 * (x * x)) + 3.9375 * x;\n                        } else {\n                            ws_table[i] = 0.630035;\n                        }\n                    }\n                },\n                function(amount, n_samples, ws_table) {\n                    var a = 2 + Math.round(amount * 14),\n                        // we go from 2 to 16 bits, keep in mind for the UI\n                        bits = Math.round(Math.pow(2, a - 1)),\n                        // real number of quantization steps divided by 2\n                        i, x;\n                    for (i = 0; i < n_samples; i++) {\n                        x = i * 2 / n_samples - 1;\n                        ws_table[i] = Math.round(x * bits) / bits;\n                    }\n                }\n            ]\n        }\n    });\n\n    Tuna.prototype.Phaser = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.splitter = this.activateNode = userContext.createChannelSplitter(2);\n        this.filtersL = [];\n        this.filtersR = [];\n        this.feedbackGainNodeL = userContext.createGain();\n        this.feedbackGainNodeR = userContext.createGain();\n        this.merger = userContext.createChannelMerger(2);\n        this.filteredSignal = userContext.createGain();\n        this.output = userContext.createGain();\n        this.lfoL = new userInstance.LFO({\n            target: this.filtersL,\n            callback: this.callback\n        });\n        this.lfoR = new userInstance.LFO({\n            target: this.filtersR,\n            callback: this.callback\n        });\n\n        var i = this.stage;\n        while (i--) {\n            this.filtersL[i] = userContext.createBiquadFilter();\n            this.filtersR[i] = userContext.createBiquadFilter();\n            this.filtersL[i].type = \"allpass\";\n            this.filtersR[i].type = \"allpass\";\n        }\n        this.input.connect(this.splitter);\n        this.input.connect(this.output);\n        this.splitter.connect(this.filtersL[0], 0, 0);\n        this.splitter.connect(this.filtersR[0], 1, 0);\n        this.connectInOrder(this.filtersL);\n        this.connectInOrder(this.filtersR);\n        this.filtersL[this.stage - 1].connect(this.feedbackGainNodeL);\n        this.filtersL[this.stage - 1].connect(this.merger, 0, 0);\n        this.filtersR[this.stage - 1].connect(this.feedbackGainNodeR);\n        this.filtersR[this.stage - 1].connect(this.merger, 0, 1);\n        this.feedbackGainNodeL.connect(this.filtersL[0]);\n        this.feedbackGainNodeR.connect(this.filtersR[0]);\n        this.merger.connect(this.output);\n\n        this.rate = initValue(properties.rate, this.defaults.rate.value);\n        this.baseModulationFrequency = properties.baseModulationFrequency || this.defaults.baseModulationFrequency.value;\n        this.depth = initValue(properties.depth, this.defaults.depth.value);\n        this.feedback = initValue(properties.feedback, this.defaults.feedback.value);\n        this.stereoPhase = initValue(properties.stereoPhase, this.defaults.stereoPhase.value);\n\n        this.lfoL.activate(true);\n        this.lfoR.activate(true);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Phaser.prototype = Object.create(Super, {\n        name: {\n            value: \"Phaser\"\n        },\n        stage: {\n            value: 4\n        },\n        defaults: {\n            writable: true,\n            value: {\n                rate: {\n                    value: 0.1,\n                    min: 0,\n                    max: 8,\n                    automatable: false,\n                    type: FLOAT\n                },\n                depth: {\n                    value: 0.6,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                feedback: {\n                    value: 0.7,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                stereoPhase: {\n                    value: 40,\n                    min: 0,\n                    max: 180,\n                    automatable: false,\n                    type: FLOAT\n                },\n                baseModulationFrequency: {\n                    value: 700,\n                    min: 500,\n                    max: 1500,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        callback: {\n            value: function(filters, value) {\n                for (var stage = 0; stage < 4; stage++) {\n                    filters[stage].frequency.value = value;\n                }\n            }\n        },\n        depth: {\n            get: function() {\n                return this._depth;\n            },\n            set: function(value) {\n                this._depth = value;\n                this.lfoL.oscillation = this._baseModulationFrequency * this._depth;\n                this.lfoR.oscillation = this._baseModulationFrequency * this._depth;\n            }\n        },\n        rate: {\n            get: function() {\n                return this._rate;\n            },\n            set: function(value) {\n                this._rate = value;\n                this.lfoL.frequency = this._rate;\n                this.lfoR.frequency = this._rate;\n            }\n        },\n        baseModulationFrequency: {\n            enumerable: true,\n            get: function() {\n                return this._baseModulationFrequency;\n            },\n            set: function(value) {\n                this._baseModulationFrequency = value;\n                this.lfoL.offset = this._baseModulationFrequency;\n                this.lfoR.offset = this._baseModulationFrequency;\n                this._depth = this._depth;\n            }\n        },\n        feedback: {\n            get: function() {\n                return this._feedback;\n            },\n            set: function(value) {\n                this._feedback = value;\n                this.feedbackGainNodeL.gain.value = this._feedback;\n                this.feedbackGainNodeR.gain.value = this._feedback;\n            }\n        },\n        stereoPhase: {\n            get: function() {\n                return this._stereoPhase;\n            },\n            set: function(value) {\n                this._stereoPhase = value;\n                var newPhase = this.lfoL._phase + this._stereoPhase *\n                    Math.PI /\n                    180;\n                newPhase = fmod(newPhase, 2 * Math.PI);\n                this.lfoR._phase = newPhase;\n            }\n        }\n    });\n\n    Tuna.prototype.PingPongDelay = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.wetLevel = userContext.createGain();\n        this.stereoToMonoMix = userContext.createGain();\n        this.feedbackLevel = userContext.createGain();\n        this.output = userContext.createGain();\n        this.delayLeft = userContext.createDelay();\n        this.delayRight = userContext.createDelay();\n\n        this.activateNode = userContext.createGain();\n        this.splitter = userContext.createChannelSplitter(2);\n        this.merger = userContext.createChannelMerger(2);\n\n        this.activateNode.connect(this.splitter);\n        this.splitter.connect(this.stereoToMonoMix, 0, 0);\n        this.splitter.connect(this.stereoToMonoMix, 1, 0);\n        this.stereoToMonoMix.gain.value = .5;\n        this.stereoToMonoMix.connect(this.wetLevel);\n        this.wetLevel.connect(this.delayLeft);\n        this.feedbackLevel.connect(this.delayLeft);\n        this.delayLeft.connect(this.delayRight);\n        this.delayRight.connect(this.feedbackLevel);\n        this.delayLeft.connect(this.merger, 0, 0);\n        this.delayRight.connect(this.merger, 0, 1);\n        this.merger.connect(this.output);\n        this.activateNode.connect(this.output);\n\n        this.delayTimeLeft = properties.delayTimeLeft !== undefined ? properties.delayTimeLeft : this.defaults.delayTimeLeft.value;\n        this.delayTimeRight = properties.delayTimeRight !== undefined ? properties.delayTimeRight : this.defaults.delayTimeRight.value;\n        this.feedbackLevel.gain.value = properties.feedback !== undefined ? properties.feedback : this.defaults.feedback.value;\n        this.wetLevel.gain.value = properties.wetLevel !== undefined ? properties.wetLevel : this.defaults.wetLevel.value;\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.PingPongDelay.prototype = Object.create(Super, {\n        name: {\n            value: \"PingPongDelay\"\n        },\n        delayTimeLeft: {\n            enumerable: true,\n            get: function() {\n                return this._delayTimeLeft;\n            },\n            set: function(value) {\n                this._delayTimeLeft = value;\n                this.delayLeft.delayTime.value = value / 1000;\n            }\n        },\n        delayTimeRight: {\n            enumerable: true,\n            get: function() {\n                return this._delayTimeRight;\n            },\n            set: function(value) {\n                this._delayTimeRight = value;\n                this.delayRight.delayTime.value = value / 1000;\n            }\n        },\n        defaults: {\n            writable: true,\n            value: {\n                delayTimeLeft: {\n                    value: 200,\n                    min: 1,\n                    max: 10000,\n                    automatable: false,\n                    type: INT\n                },\n                delayTimeRight: {\n                    value: 400,\n                    min: 1,\n                    max: 10000,\n                    automatable: false,\n                    type: INT\n                },\n                feedback: {\n                    value: 0.3,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                wetLevel: {\n                    value: 0.5,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        }\n    });\n\n    Tuna.prototype.Tremolo = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.splitter = this.activateNode = userContext.createChannelSplitter(\n                2),\n            this.amplitudeL = userContext.createGain(), this.amplitudeR =\n            userContext.createGain(), this.merger = userContext.createChannelMerger(\n                2), this.output = userContext.createGain();\n        this.lfoL = new userInstance.LFO({\n            target: this.amplitudeL.gain,\n            callback: pipe\n        });\n        this.lfoR = new userInstance.LFO({\n            target: this.amplitudeR.gain,\n            callback: pipe\n        });\n\n        this.input.connect(this.splitter);\n        this.splitter.connect(this.amplitudeL, 0);\n        this.splitter.connect(this.amplitudeR, 1);\n        this.amplitudeL.connect(this.merger, 0, 0);\n        this.amplitudeR.connect(this.merger, 0, 1);\n        this.merger.connect(this.output);\n\n        this.rate = properties.rate || this.defaults.rate.value;\n        this.intensity = initValue(properties.intensity, this.defaults.intensity\n            .value);\n        this.stereoPhase = initValue(properties.stereoPhase, this.defaults\n            .stereoPhase\n            .value);\n\n        this.lfoL.offset = 1 - (this.intensity / 2);\n        this.lfoR.offset = 1 - (this.intensity / 2);\n        this.lfoL.phase = this.stereoPhase * Math.PI / 180;\n\n        this.lfoL.activate(true);\n        this.lfoR.activate(true);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.Tremolo.prototype = Object.create(Super, {\n        name: {\n            value: \"Tremolo\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                intensity: {\n                    value: 0.3,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                stereoPhase: {\n                    value: 0,\n                    min: 0,\n                    max: 180,\n                    automatable: false,\n                    type: FLOAT\n                },\n                rate: {\n                    value: 5,\n                    min: 0.1,\n                    max: 11,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        intensity: {\n            enumerable: true,\n            get: function() {\n                return this._intensity;\n            },\n            set: function(value) {\n                this._intensity = value;\n                this.lfoL.offset = 1 - this._intensity / 2;\n                this.lfoR.offset = 1 - this._intensity / 2;\n                this.lfoL.oscillation = this._intensity;\n                this.lfoR.oscillation = this._intensity;\n            }\n        },\n        rate: {\n            enumerable: true,\n            get: function() {\n                return this._rate;\n            },\n            set: function(value) {\n                this._rate = value;\n                this.lfoL.frequency = this._rate;\n                this.lfoR.frequency = this._rate;\n            }\n        },\n        stereoPhase: {\n            enumerable: true,\n            get: function() {\n                return this._rate;\n            },\n            set: function(value) {\n                this._stereoPhase = value;\n                var newPhase = this.lfoL._phase + this._stereoPhase *\n                    Math.PI /\n                    180;\n                newPhase = fmod(newPhase, 2 * Math.PI);\n                this.lfoR.phase = newPhase;\n            }\n        }\n    });\n\n    Tuna.prototype.WahWah = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.activateNode = userContext.createGain();\n        this.envelopeFollower = new userInstance.EnvelopeFollower({\n            target: this,\n            callback: function(context, value) {\n                context.sweep = value;\n            }\n        });\n        this.filterBp = userContext.createBiquadFilter();\n        this.filterPeaking = userContext.createBiquadFilter();\n        this.output = userContext.createGain();\n\n        //Connect AudioNodes\n        this.activateNode.connect(this.filterBp);\n        this.filterBp.connect(this.filterPeaking);\n        this.filterPeaking.connect(this.output);\n\n        //Set Properties\n        this.init();\n        this.automode = initValue(properties.enableAutoMode, this.defaults\n            .automode\n            .value);\n        this.resonance = properties.resonance || this.defaults.resonance\n            .value;\n        this.sensitivity = initValue(properties.sensitivity, this.defaults\n            .sensitivity\n            .value);\n        this.baseFrequency = initValue(properties.baseFrequency, this.defaults\n            .baseFrequency\n            .value);\n        this.excursionOctaves = properties.excursionOctaves || this.defaults\n            .excursionOctaves\n            .value;\n        this.sweep = initValue(properties.sweep, this.defaults.sweep.value);\n\n        this.activateNode.gain.value = 2;\n        this.envelopeFollower.activate(true);\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.WahWah.prototype = Object.create(Super, {\n        name: {\n            value: \"WahWah\"\n        },\n        defaults: {\n            writable: true,\n            value: {\n                automode: {\n                    value: true,\n                    automatable: false,\n                    type: BOOLEAN\n                },\n                baseFrequency: {\n                    value: 0.5,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                excursionOctaves: {\n                    value: 2,\n                    min: 1,\n                    max: 6,\n                    automatable: false,\n                    type: FLOAT\n                },\n                sweep: {\n                    value: 0.2,\n                    min: 0,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                },\n                resonance: {\n                    value: 10,\n                    min: 1,\n                    max: 100,\n                    automatable: false,\n                    type: FLOAT\n                },\n                sensitivity: {\n                    value: 0.5,\n                    min: -1,\n                    max: 1,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        activateCallback: {\n            value: function(value) {\n                this.automode = value;\n            }\n        },\n        automode: {\n            get: function() {\n                return this._automode;\n            },\n            set: function(value) {\n                this._automode = value;\n                if (value) {\n                    this.activateNode.connect(this.envelopeFollower.input);\n                    this.envelopeFollower.activate(true);\n                } else {\n                    this.envelopeFollower.activate(false);\n                    this.activateNode.disconnect();\n                    this.activateNode.connect(this.filterBp);\n                }\n            }\n        },\n        filterFreqTimeout: {\n            value: 0\n        },\n        setFilterFreq: {\n            value: function() {\n                try {\n                    this.filterBp.frequency.value = this._baseFrequency + this._excursionFrequency * this._sweep;\n                    this.filterPeaking.frequency.value = this._baseFrequency + this._excursionFrequency * this._sweep;\n                } catch (e) {\n                    clearTimeout(this.filterFreqTimeout);\n                    //put on the next cycle to let all init properties be set\n                    this.filterFreqTimeout = setTimeout(function() {\n                        this.setFilterFreq();\n                    }.bind(this), 0);\n                }\n            }\n        },\n        sweep: {\n            enumerable: true,\n            get: function() {\n                return this._sweep.value;\n            },\n            set: function(value) {\n                this._sweep = Math.pow(value > 1 ? 1 : value <\n                    0 ? 0 :\n                    value,\n                    this._sensitivity);\n                this.setFilterFreq();\n            }\n        },\n        baseFrequency: {\n            enumerable: true,\n            get: function() {\n                return this._baseFrequency;\n            },\n            set: function(value) {\n                this._baseFrequency = 50 * Math.pow(10, value *\n                    2);\n                this._excursionFrequency = Math.min(userContext\n                    .sampleRate /\n                    2,\n                    this.baseFrequency * Math.pow(2, this._excursionOctaves)\n                );\n                this.setFilterFreq();\n            }\n        },\n        excursionOctaves: {\n            enumerable: true,\n            get: function() {\n                return this._excursionOctaves;\n            },\n            set: function(value) {\n                this._excursionOctaves = value;\n                this._excursionFrequency = Math.min(userContext\n                    .sampleRate /\n                    2,\n                    this.baseFrequency * Math.pow(2, this._excursionOctaves)\n                );\n                this.setFilterFreq();\n            }\n        },\n        sensitivity: {\n            enumerable: true,\n            get: function() {\n                return this._sensitivity;\n            },\n            set: function(value) {\n                this._sensitivity = Math.pow(10, value);\n            }\n        },\n        resonance: {\n            enumerable: true,\n            get: function() {\n                return this._resonance;\n            },\n            set: function(value) {\n                this._resonance = value;\n                this.filterPeaking.Q = this._resonance;\n            }\n        },\n        init: {\n            value: function() {\n                this.output.gain.value = 1;\n                this.filterPeaking.type = \"peaking\";\n                this.filterBp.type = \"bandpass\";\n                this.filterPeaking.frequency.value = 100;\n                this.filterPeaking.gain.value = 20;\n                this.filterPeaking.Q.value = 5;\n                this.filterBp.frequency.value = 100;\n                this.filterBp.Q.value = 1;\n            }\n        }\n    });\n\n    Tuna.prototype.EnvelopeFollower = function(properties) {\n        if (!properties) {\n            properties = this.getDefaults();\n        }\n        this.input = userContext.createGain();\n        this.jsNode = this.output = userContext.createScriptProcessor(\n            this.buffersize,\n            1, 1);\n\n        this.input.connect(this.output);\n\n        this.attackTime = initValue(properties.attackTime, this.defaults\n            .attackTime\n            .value);\n        this.releaseTime = initValue(properties.releaseTime, this.defaults\n            .releaseTime\n            .value);\n        this._envelope = 0;\n        this.target = properties.target || {};\n        this.callback = properties.callback || function() {};\n    };\n    Tuna.prototype.EnvelopeFollower.prototype = Object.create(Super, {\n        name: {\n            value: \"EnvelopeFollower\"\n        },\n        defaults: {\n            value: {\n                attackTime: {\n                    value: 0.003,\n                    min: 0,\n                    max: 0.5,\n                    automatable: false,\n                    type: FLOAT\n                },\n                releaseTime: {\n                    value: 0.5,\n                    min: 0,\n                    max: 0.5,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        buffersize: {\n            value: 256\n        },\n        envelope: {\n            value: 0\n        },\n        sampleRate: {\n            value: 44100\n        },\n        attackTime: {\n            enumerable: true,\n            get: function() {\n                return this._attackTime;\n            },\n            set: function(value) {\n                this._attackTime = value;\n                this._attackC = Math.exp(-1 / this._attackTime *\n                    this.sampleRate /\n                    this.buffersize);\n            }\n        },\n        releaseTime: {\n            enumerable: true,\n            get: function() {\n                return this._releaseTime;\n            },\n            set: function(value) {\n                this._releaseTime = value;\n                this._releaseC = Math.exp(-1 / this._releaseTime *\n                    this.sampleRate /\n                    this.buffersize);\n            }\n        },\n        callback: {\n            get: function() {\n                return this._callback;\n            },\n            set: function(value) {\n                if (typeof value === \"function\") {\n                    this._callback = value;\n                } else {\n                    console.error(\"tuna.js: \" + this.name +\n                        \": Callback must be a function!\");\n                }\n            }\n        },\n        target: {\n            get: function() {\n                return this._target;\n            },\n            set: function(value) {\n                this._target = value;\n            }\n        },\n        activate: {\n            value: function(doActivate) {\n                this.activated = doActivate;\n                if (doActivate) {\n                    this.jsNode.connect(userContext.destination);\n                    this.jsNode.onaudioprocess = this.returnCompute(\n                        this);\n                } else {\n                    this.jsNode.disconnect();\n                    this.jsNode.onaudioprocess = null;\n                }\n            }\n        },\n        returnCompute: {\n            value: function(instance) {\n                return function(event) {\n                    instance.compute(event);\n                };\n            }\n        },\n        compute: {\n            value: function(event) {\n                var count = event.inputBuffer.getChannelData(0)\n                    .length,\n                    channels = event.inputBuffer.numberOfChannels,\n                    current, chan, rms, i;\n                chan = rms = i = 0;\n                if (channels > 1) { //need to mixdown\n                    for (i = 0; i < count; ++i) {\n                        for (; chan < channels; ++chan) {\n                            current = event.inputBuffer.getChannelData(chan)[i];\n                            rms += (current * current) / channels;\n                        }\n                    }\n                } else {\n                    for (i = 0; i < count; ++i) {\n                        current = event.inputBuffer.getChannelData(0)[i];\n                        rms += (current * current);\n                    }\n                }\n                rms = Math.sqrt(rms);\n\n                if (this._envelope < rms) {\n                    this._envelope *= this._attackC;\n                    this._envelope += (1 - this._attackC) * rms;\n                } else {\n                    this._envelope *= this._releaseC;\n                    this._envelope += (1 - this._releaseC) *\n                        rms;\n                }\n                this._callback(this._target, this._envelope);\n            }\n        }\n    });\n\n    Tuna.prototype.LFO = function(properties) {\n        //Instantiate AudioNode\n        this.output = userContext.createScriptProcessor(256, 1, 1);\n        this.activateNode = userContext.destination;\n\n        //Set Properties\n        this.frequency = initValue(properties.frequency, this.defaults.frequency\n            .value);\n        this.offset = initValue(properties.offset, this.defaults.offset.value);\n        this.oscillation = initValue(properties.oscillation, this.defaults\n            .oscillation\n            .value);\n        this.phase = initValue(properties.phase, this.defaults.phase.value);\n        this.target = properties.target || {};\n        this.output.onaudioprocess = this.callback(properties.callback ||\n            function() {});\n        this.bypass = properties.bypass || false;\n    };\n    Tuna.prototype.LFO.prototype = Object.create(Super, {\n        name: {\n            value: \"LFO\"\n        },\n        bufferSize: {\n            value: 256\n        },\n        sampleRate: {\n            value: 44100\n        },\n        defaults: {\n            value: {\n                frequency: {\n                    value: 1,\n                    min: 0,\n                    max: 20,\n                    automatable: false,\n                    type: FLOAT\n                },\n                offset: {\n                    value: 0.85,\n                    min: 0,\n                    max: 22049,\n                    automatable: false,\n                    type: FLOAT\n                },\n                oscillation: {\n                    value: 0.3,\n                    min: -22050,\n                    max: 22050,\n                    automatable: false,\n                    type: FLOAT\n                },\n                phase: {\n                    value: 0,\n                    min: 0,\n                    max: 2 * Math.PI,\n                    automatable: false,\n                    type: FLOAT\n                }\n            }\n        },\n        frequency: {\n            get: function() {\n                return this._frequency;\n            },\n            set: function(value) {\n                this._frequency = value;\n                this._phaseInc = 2 * Math.PI * this._frequency *\n                    this.bufferSize /\n                    this.sampleRate;\n            }\n        },\n        offset: {\n            get: function() {\n                return this._offset;\n            },\n            set: function(value) {\n                this._offset = value;\n            }\n        },\n        oscillation: {\n            get: function() {\n                return this._oscillation;\n            },\n            set: function(value) {\n                this._oscillation = value;\n            }\n        },\n        phase: {\n            get: function() {\n                return this._phase;\n            },\n            set: function(value) {\n                this._phase = value;\n            }\n        },\n        target: {\n            get: function() {\n                return this._target;\n            },\n            set: function(value) {\n                this._target = value;\n            }\n        },\n        activate: {\n            value: function(doActivate) {\n                if (!doActivate) {\n                    this.output.disconnect(userContext.destination);\n                } else {\n                    this.output.connect(userContext.destination);\n                }\n            }\n        },\n        callback: {\n            value: function(callback) {\n                var that = this;\n                return function() {\n                    that._phase += that._phaseInc;\n                    if (that._phase > 2 * Math.PI) {\n                        that._phase = 0;\n                    }\n                    callback(that._target, that._offset +\n                        that._oscillation *\n                        Math.sin(that._phase));\n                };\n            }\n        }\n    });\n\n    Tuna.toString = Tuna.prototype.toString = function() {\n        return \"Please visit https://github.com/Theodeus/tuna/wiki for instructions on how to use Tuna.js\";\n    };\n})(this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/tunajs/tuna.js\n ** module id = 41\n ** module chunks = 0\n **/"],"sourceRoot":""}